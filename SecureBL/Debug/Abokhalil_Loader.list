
Abokhalil_Loader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003794  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002fc  080038a0  080038a0  000048a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b9c  08003b9c  00005084  2**0
                  CONTENTS
  4 .ARM          00000008  08003b9c  08003b9c  00004b9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ba4  08003ba4  00005084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ba4  08003ba4  00004ba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003ba8  08003ba8  00004ba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000084  20000000  08003bac  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000246c  20000088  08003c30  00005088  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200024f4  08003c30  000054f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cf58  00000000  00000000  000050ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b70  00000000  00000000  00012005  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 000057c4  00000000  00000000  00014b75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000828  00000000  00000000  0001a340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008a5  00000000  00000000  0001ab68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000188f1  00000000  00000000  0001b40d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f65a  00000000  00000000  00033cfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000868a6  00000000  00000000  00043358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000c9bfe  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000194c  00000000  00000000  000c9c44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  000cb590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000088 	.word	0x20000088
 8000128:	00000000 	.word	0x00000000
 800012c:	08003888 	.word	0x08003888

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000008c 	.word	0x2000008c
 8000148:	08003888 	.word	0x08003888

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <Bootloader_EraseFlash>:
static void
Bootloader_EraseFlash (uint8_t starting_page, uint8_t number_of_pages)
{

  FLASH_EraseInitTypeDef erase_init_struct;
  uint32_t page_err = 0;
 800015c:	2300      	movs	r3, #0
{
 800015e:	b530      	push	{r4, r5, lr}
 8000160:	b087      	sub	sp, #28
 8000162:	4604      	mov	r4, r0
 8000164:	460d      	mov	r5, r1
  uint32_t page_err = 0;
 8000166:	9301      	str	r3, [sp, #4]
  HAL_StatusTypeDef status = HAL_OK;
  /* Unlock Flash memory for writing/erasing */
  status = HAL_FLASH_Unlock ();
 8000168:	f000 fe40 	bl	8000dec <HAL_FLASH_Unlock>
  if (status != HAL_OK)
 800016c:	b960      	cbnz	r0, 8000188 <Bootloader_EraseFlash+0x2c>
    {
      return;
    }
  else
    {
      if ((starting_page == 0)
 800016e:	b96c      	cbnz	r4, 800018c <Bootloader_EraseFlash+0x30>
	  && (starting_page + number_of_pages) == STM32F103C8T6_PAGES_NUM)
 8000170:	2d40      	cmp	r5, #64	@ 0x40
 8000172:	d10b      	bne.n	800018c <Bootloader_EraseFlash+0x30>
	{
	  /* MASS Erase */
	  erase_init_struct.TypeErase = FLASH_TYPEERASE_MASSERASE; /* Type of erase: mass */
 8000174:	2302      	movs	r3, #2
 8000176:	9302      	str	r3, [sp, #8]
	  erase_init_struct.Banks = FLASH_BANK_1;
 8000178:	2301      	movs	r3, #1
	  erase_init_struct.PageAddress = Starting_Page_Address; /*  Start page address (base flash address) */
	  erase_init_struct.NbPages = number_of_pages;
	  erase_init_struct.Banks = FLASH_BANK_1;/* Number of pages to erase */
	}
      // Erase the specified page
      if (HAL_FLASHEx_Erase (&erase_init_struct, &page_err) != HAL_OK)
 800017a:	a901      	add	r1, sp, #4
 800017c:	a802      	add	r0, sp, #8
	  erase_init_struct.Banks = FLASH_BANK_1;
 800017e:	9303      	str	r3, [sp, #12]
      if (HAL_FLASHEx_Erase (&erase_init_struct, &page_err) != HAL_OK)
 8000180:	f000 fef2 	bl	8000f68 <HAL_FLASHEx_Erase>
#ifdef DEBUG_ENABLED
	  BL_SendMSG (&DEBUG_USART_HANDLE, "\rErase Success \r\n");
#endif
	}
      // Lock the Flash memory to prevent unwanted access
      status = HAL_FLASH_Lock ();
 8000184:	f000 fe44 	bl	8000e10 <HAL_FLASH_Lock>
    }
}
 8000188:	b007      	add	sp, #28
 800018a:	bd30      	pop	{r4, r5, pc}
	  erase_init_struct.TypeErase = FLASH_TYPEERASE_PAGES; /* Type of erase: pages */
 800018c:	2300      	movs	r3, #0
	      + PAGE0_ADDRESS;
 800018e:	f504 3400 	add.w	r4, r4, #131072	@ 0x20000
	  uint32_t Starting_Page_Address = ((uint32_t) starting_page * 1024)
 8000192:	02a4      	lsls	r4, r4, #10
	  erase_init_struct.NbPages = number_of_pages;
 8000194:	e9cd 4504 	strd	r4, r5, [sp, #16]
	  erase_init_struct.TypeErase = FLASH_TYPEERASE_PAGES; /* Type of erase: pages */
 8000198:	9302      	str	r3, [sp, #8]
	  erase_init_struct.Banks = FLASH_BANK_1;/* Number of pages to erase */
 800019a:	e7ed      	b.n	8000178 <Bootloader_EraseFlash+0x1c>

0800019c <BL_WriteAppsInfoToFlash>:
{
 800019c:	b570      	push	{r4, r5, r6, lr}
  Bootloader_EraseFlash (BL_INFO_PAGE, 1);
 800019e:	2101      	movs	r1, #1
{
 80001a0:	4604      	mov	r4, r0
  Bootloader_EraseFlash (BL_INFO_PAGE, 1);
 80001a2:	201a      	movs	r0, #26
 80001a4:	f7ff ffda 	bl	800015c <Bootloader_EraseFlash>
  status = HAL_FLASH_Unlock (); // unlock the Flash before writing
 80001a8:	f000 fe20 	bl	8000dec <HAL_FLASH_Unlock>
  if (status != HAL_OK)
 80001ac:	b9a0      	cbnz	r0, 80001d8 <BL_WriteAppsInfoToFlash+0x3c>
 80001ae:	4d0b      	ldr	r5, [pc, #44]	@ (80001dc <BL_WriteAppsInfoToFlash+0x40>)
      for (uint32_t i = 0; i < (sizeof(BL_INFO_t) / sizeof(uint32_t)); i++)
 80001b0:	4e0b      	ldr	r6, [pc, #44]	@ (80001e0 <BL_WriteAppsInfoToFlash+0x44>)
 80001b2:	3c04      	subs	r4, #4
	      HAL_FLASH_Program (
 80001b4:	2300      	movs	r3, #0
 80001b6:	4629      	mov	r1, r5
 80001b8:	2002      	movs	r0, #2
 80001ba:	f854 2f04 	ldr.w	r2, [r4, #4]!
 80001be:	f000 fe5b 	bl	8000e78 <HAL_FLASH_Program>
	  if (status != HAL_OK)
 80001c2:	b938      	cbnz	r0, 80001d4 <BL_WriteAppsInfoToFlash+0x38>
      for (uint32_t i = 0; i < (sizeof(BL_INFO_t) / sizeof(uint32_t)); i++)
 80001c4:	3504      	adds	r5, #4
 80001c6:	42b5      	cmp	r5, r6
 80001c8:	d1f4      	bne.n	80001b4 <BL_WriteAppsInfoToFlash+0x18>
  BL_STATUS ret = BL_ACK;
 80001ca:	24a5      	movs	r4, #165	@ 0xa5
      HAL_FLASH_Lock ();  // Lock the Flash after writing
 80001cc:	f000 fe20 	bl	8000e10 <HAL_FLASH_Lock>
}
 80001d0:	4620      	mov	r0, r4
 80001d2:	bd70      	pop	{r4, r5, r6, pc}
	      ret = BL_NACK;
 80001d4:	245a      	movs	r4, #90	@ 0x5a
 80001d6:	e7f9      	b.n	80001cc <BL_WriteAppsInfoToFlash+0x30>
      return ret;
 80001d8:	245a      	movs	r4, #90	@ 0x5a
 80001da:	e7f9      	b.n	80001d0 <BL_WriteAppsInfoToFlash+0x34>
 80001dc:	08006800 	.word	0x08006800
 80001e0:	08006850 	.word	0x08006850

080001e4 <BL_VerifyApplication>:
{
 80001e4:	b530      	push	{r4, r5, lr}
  uint8_t calc_hash[32] =
 80001e6:	2400      	movs	r4, #0
{
 80001e8:	b089      	sub	sp, #36	@ 0x24
  uint8_t is_valid = bl_info_ptr->app.app_validity;
 80001ea:	4d13      	ldr	r5, [pc, #76]	@ (8000238 <BL_VerifyApplication+0x54>)
  uint8_t calc_hash[32] =
 80001ec:	221c      	movs	r2, #28
 80001ee:	4621      	mov	r1, r4
 80001f0:	a801      	add	r0, sp, #4
 80001f2:	9400      	str	r4, [sp, #0]
 80001f4:	f002 feb8 	bl	8002f68 <memset>
  uint8_t is_valid = bl_info_ptr->app.app_validity;
 80001f8:	6828      	ldr	r0, [r5, #0]
  if ((is_valid == 0xff) || (is_valid == 0))
 80001fa:	f890 2024 	ldrb.w	r2, [r0, #36]	@ 0x24
 80001fe:	3a01      	subs	r2, #1
 8000200:	b2d2      	uxtb	r2, r2
 8000202:	2afd      	cmp	r2, #253	@ 0xfd
 8000204:	d907      	bls.n	8000216 <BL_VerifyApplication+0x32>
      if (bl_info_ptr->update.updated == 1)
 8000206:	f890 304c 	ldrb.w	r3, [r0, #76]	@ 0x4c
	  status = UPDATE_FOUND;
 800020a:	2b01      	cmp	r3, #1
 800020c:	bf14      	ite	ne
 800020e:	2004      	movne	r0, #4
 8000210:	2003      	moveq	r0, #3
}
 8000212:	b009      	add	sp, #36	@ 0x24
 8000214:	bd30      	pop	{r4, r5, pc}
      status = mbedtls_sha256_ret ((uint8_t*) address,
 8000216:	6a01      	ldr	r1, [r0, #32]
 8000218:	4623      	mov	r3, r4
 800021a:	466a      	mov	r2, sp
 800021c:	4807      	ldr	r0, [pc, #28]	@ (800023c <BL_VerifyApplication+0x58>)
 800021e:	f002 fe50 	bl	8002ec2 <mbedtls_sha256_ret>
      status = memcmp (calc_hash, bl_info_ptr->app.hash, HASH_SIZE);
 8000222:	2220      	movs	r2, #32
 8000224:	4668      	mov	r0, sp
 8000226:	6829      	ldr	r1, [r5, #0]
 8000228:	f002 fe8e 	bl	8002f48 <memcmp>
      if (status == 0)
 800022c:	b2c0      	uxtb	r0, r0
 800022e:	3800      	subs	r0, #0
 8000230:	bf18      	it	ne
 8000232:	2001      	movne	r0, #1
 8000234:	e7ed      	b.n	8000212 <BL_VerifyApplication+0x2e>
 8000236:	bf00      	nop
 8000238:	20000000 	.word	0x20000000
 800023c:	08006c00 	.word	0x08006c00

08000240 <Get_CurrentBL_Info>:
  memcpy (dest, bl_info_ptr, sizeof(BL_INFO_t));
 8000240:	4b02      	ldr	r3, [pc, #8]	@ (800024c <Get_CurrentBL_Info+0xc>)
 8000242:	2250      	movs	r2, #80	@ 0x50
 8000244:	6819      	ldr	r1, [r3, #0]
 8000246:	f002 bec3 	b.w	8002fd0 <memcpy>
 800024a:	bf00      	nop
 800024c:	20000000 	.word	0x20000000

08000250 <BL_SendAck>:
{
 8000250:	b507      	push	{r0, r1, r2, lr}
  HAL_UART_Transmit (&huart1, &ack, 1, HAL_MAX_DELAY);
 8000252:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
{
 8000256:	f88d 0007 	strb.w	r0, [sp, #7]
  HAL_UART_Transmit (&huart1, &ack, 1, HAL_MAX_DELAY);
 800025a:	2201      	movs	r2, #1
 800025c:	f10d 0107 	add.w	r1, sp, #7
 8000260:	4802      	ldr	r0, [pc, #8]	@ (800026c <BL_SendAck+0x1c>)
 8000262:	f001 faf4 	bl	800184e <HAL_UART_Transmit>
}
 8000266:	b003      	add	sp, #12
 8000268:	f85d fb04 	ldr.w	pc, [sp], #4
 800026c:	20000100 	.word	0x20000100

08000270 <BL_InstallApplication>:
{
 8000270:	b570      	push	{r4, r5, r6, lr}
  uint32_t update_size = (bl_info_ptr->update.update_size);
 8000272:	4e21      	ldr	r6, [pc, #132]	@ (80002f8 <BL_InstallApplication+0x88>)
  Bootloader_EraseFlash (APP_START_PAGE, APP_MAX_SIZE);
 8000274:	2112      	movs	r1, #18
  uint32_t update_size = (bl_info_ptr->update.update_size);
 8000276:	6833      	ldr	r3, [r6, #0]
  Bootloader_EraseFlash (APP_START_PAGE, APP_MAX_SIZE);
 8000278:	201b      	movs	r0, #27
{
 800027a:	b094      	sub	sp, #80	@ 0x50
  uint32_t update_size = (bl_info_ptr->update.update_size);
 800027c:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
  Bootloader_EraseFlash (APP_START_PAGE, APP_MAX_SIZE);
 800027e:	f7ff ff6d 	bl	800015c <Bootloader_EraseFlash>
  HAL_FLASH_Unlock (); // unlock the Flash before writing
 8000282:	f000 fdb3 	bl	8000dec <HAL_FLASH_Unlock>
  for (uint32_t i = 0; i < (update_size / sizeof(uint32_t)); i++)
 8000286:	f024 0403 	bic.w	r4, r4, #3
 800028a:	f104 6400 	add.w	r4, r4, #134217728	@ 0x8000000
 800028e:	4d1b      	ldr	r5, [pc, #108]	@ (80002fc <BL_InstallApplication+0x8c>)
 8000290:	f504 4438 	add.w	r4, r4, #47104	@ 0xb800
 8000294:	42a5      	cmp	r5, r4
 8000296:	d120      	bne.n	80002da <BL_InstallApplication+0x6a>
  HAL_FLASH_Lock ();  // Lock the Flash after writing
 8000298:	f000 fdba 	bl	8000e10 <HAL_FLASH_Lock>
  memcpy (&temp_info, bl_info_ptr, sizeof(BL_INFO_t));
 800029c:	6834      	ldr	r4, [r6, #0]
 800029e:	2250      	movs	r2, #80	@ 0x50
 80002a0:	4621      	mov	r1, r4
 80002a2:	4668      	mov	r0, sp
 80002a4:	f002 fe94 	bl	8002fd0 <memcpy>
  temp_info.app.app_size = temp_info.update.update_size;
 80002a8:	9b12      	ldr	r3, [sp, #72]	@ 0x48
  memcpy (temp_info.app.hash, bl_info_ptr->update.hash, HASH_SIZE);
 80002aa:	466d      	mov	r5, sp
  temp_info.app.app_size = temp_info.update.update_size;
 80002ac:	9308      	str	r3, [sp, #32]
  temp_info.app.app_validity = 1;
 80002ae:	2301      	movs	r3, #1
 80002b0:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
  memcpy (temp_info.app.hash, bl_info_ptr->update.hash, HASH_SIZE);
 80002b4:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 80002b8:	3448      	adds	r4, #72	@ 0x48
 80002ba:	462a      	mov	r2, r5
 80002bc:	6818      	ldr	r0, [r3, #0]
 80002be:	6859      	ldr	r1, [r3, #4]
 80002c0:	3308      	adds	r3, #8
 80002c2:	c203      	stmia	r2!, {r0, r1}
 80002c4:	42a3      	cmp	r3, r4
 80002c6:	4615      	mov	r5, r2
 80002c8:	d1f7      	bne.n	80002ba <BL_InstallApplication+0x4a>
  temp_info.update.updated = 0;
 80002ca:	2400      	movs	r4, #0
  BL_WriteAppsInfoToFlash (&temp_info);
 80002cc:	4668      	mov	r0, sp
  temp_info.update.updated = 0;
 80002ce:	f88d 404c 	strb.w	r4, [sp, #76]	@ 0x4c
  BL_WriteAppsInfoToFlash (&temp_info);
 80002d2:	f7ff ff63 	bl	800019c <BL_WriteAppsInfoToFlash>
  return status;
 80002d6:	4620      	mov	r0, r4
 80002d8:	e00c      	b.n	80002f4 <BL_InstallApplication+0x84>
      status = HAL_FLASH_Program (FLASH_TYPEPROGRAM_WORD,
 80002da:	682a      	ldr	r2, [r5, #0]
 80002dc:	f5a5 4198 	sub.w	r1, r5, #19456	@ 0x4c00
 80002e0:	2300      	movs	r3, #0
 80002e2:	2002      	movs	r0, #2
 80002e4:	f000 fdc8 	bl	8000e78 <HAL_FLASH_Program>
      if (status != HAL_OK)
 80002e8:	3504      	adds	r5, #4
 80002ea:	2800      	cmp	r0, #0
 80002ec:	d0d2      	beq.n	8000294 <BL_InstallApplication+0x24>
	  HAL_FLASH_Lock ();  // Lock the Flash after writing
 80002ee:	f000 fd8f 	bl	8000e10 <HAL_FLASH_Lock>
	  return BL_NACK;
 80002f2:	205a      	movs	r0, #90	@ 0x5a
}
 80002f4:	b014      	add	sp, #80	@ 0x50
 80002f6:	bd70      	pop	{r4, r5, r6, pc}
 80002f8:	20000000 	.word	0x20000000
 80002fc:	0800b800 	.word	0x0800b800

08000300 <Set_ValidUpdate>:
{
 8000300:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000302:	b095      	sub	sp, #84	@ 0x54
  BL_INFO_t temp_info =
 8000304:	2250      	movs	r2, #80	@ 0x50
 8000306:	2100      	movs	r1, #0
{
 8000308:	4604      	mov	r4, r0
  BL_INFO_t temp_info =
 800030a:	4668      	mov	r0, sp
 800030c:	f002 fe2c 	bl	8002f68 <memset>
  uint8_t updated = bl_info_ptr->update.updated;
 8000310:	4b15      	ldr	r3, [pc, #84]	@ (8000368 <Set_ValidUpdate+0x68>)
 8000312:	681b      	ldr	r3, [r3, #0]
  if ((app_valid & updated) != 0xff)
 8000314:	f893 204c 	ldrb.w	r2, [r3, #76]	@ 0x4c
 8000318:	f893 1024 	ldrb.w	r1, [r3, #36]	@ 0x24
 800031c:	400a      	ands	r2, r1
 800031e:	2aff      	cmp	r2, #255	@ 0xff
 8000320:	d010      	beq.n	8000344 <Set_ValidUpdate+0x44>
      memcpy (temp_info.app.hash, bl_info_ptr->app.hash, sizeof(App_INFO_t));
 8000322:	461a      	mov	r2, r3
 8000324:	466e      	mov	r6, sp
 8000326:	f103 0728 	add.w	r7, r3, #40	@ 0x28
 800032a:	4635      	mov	r5, r6
 800032c:	6810      	ldr	r0, [r2, #0]
 800032e:	6851      	ldr	r1, [r2, #4]
 8000330:	3208      	adds	r2, #8
 8000332:	c503      	stmia	r5!, {r0, r1}
 8000334:	42ba      	cmp	r2, r7
 8000336:	462e      	mov	r6, r5
 8000338:	d1f7      	bne.n	800032a <Set_ValidUpdate+0x2a>
      temp_info.app.app_size = bl_info_ptr->app.app_size;
 800033a:	6a1b      	ldr	r3, [r3, #32]
 800033c:	9308      	str	r3, [sp, #32]
      temp_info.app.app_validity = 0;
 800033e:	2300      	movs	r3, #0
 8000340:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
  memcpy ((uint8_t*) &temp_info.update, update, sizeof(Update_INFO_t));
 8000344:	4623      	mov	r3, r4
 8000346:	ac0a      	add	r4, sp, #40	@ 0x28
 8000348:	f103 0528 	add.w	r5, r3, #40	@ 0x28
 800034c:	4622      	mov	r2, r4
 800034e:	6818      	ldr	r0, [r3, #0]
 8000350:	6859      	ldr	r1, [r3, #4]
 8000352:	3308      	adds	r3, #8
 8000354:	c203      	stmia	r2!, {r0, r1}
 8000356:	42ab      	cmp	r3, r5
 8000358:	4614      	mov	r4, r2
 800035a:	d1f7      	bne.n	800034c <Set_ValidUpdate+0x4c>
  BL_WriteAppsInfoToFlash (&temp_info);
 800035c:	4668      	mov	r0, sp
 800035e:	f7ff ff1d 	bl	800019c <BL_WriteAppsInfoToFlash>
}
 8000362:	20a5      	movs	r0, #165	@ 0xa5
 8000364:	b015      	add	sp, #84	@ 0x54
 8000366:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000368:	20000000 	.word	0x20000000

0800036c <Bootloader_UpdateAPP.isra.0>:
Bootloader_UpdateAPP (uint32_t app_size, uint8_t update_page)
 800036c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t rec_hash[32] =
 8000370:	2500      	movs	r5, #0
Bootloader_UpdateAPP (uint32_t app_size, uint8_t update_page)
 8000372:	f5ad 7d11 	sub.w	sp, sp, #580	@ 0x244
 8000376:	4607      	mov	r7, r0
  uint32_t rec_buffer[4] =
 8000378:	2210      	movs	r2, #16
Bootloader_UpdateAPP (uint32_t app_size, uint8_t update_page)
 800037a:	460c      	mov	r4, r1
  uint32_t rec_buffer[4] =
 800037c:	a801      	add	r0, sp, #4
 800037e:	2100      	movs	r1, #0
 8000380:	f002 fdf2 	bl	8002f68 <memset>
  uint32_t decrypted_data[4] =
 8000384:	2210      	movs	r2, #16
 8000386:	2100      	movs	r1, #0
 8000388:	a805      	add	r0, sp, #20
 800038a:	f002 fded 	bl	8002f68 <memset>
  uint8_t rec_hash[32] =
 800038e:	221c      	movs	r2, #28
 8000390:	4629      	mov	r1, r5
 8000392:	a80e      	add	r0, sp, #56	@ 0x38
 8000394:	950d      	str	r5, [sp, #52]	@ 0x34
 8000396:	f002 fde7 	bl	8002f68 <memset>
  uint8_t encrypted_hash[32] =
 800039a:	221c      	movs	r2, #28
 800039c:	4629      	mov	r1, r5
 800039e:	a816      	add	r0, sp, #88	@ 0x58
 80003a0:	9515      	str	r5, [sp, #84]	@ 0x54
 80003a2:	f002 fde1 	bl	8002f68 <memset>
  uint8_t calc_hash[32] =
 80003a6:	221c      	movs	r2, #28
 80003a8:	4629      	mov	r1, r5
 80003aa:	a81e      	add	r0, sp, #120	@ 0x78
 80003ac:	951d      	str	r5, [sp, #116]	@ 0x74
 80003ae:	f002 fddb 	bl	8002f68 <memset>
Start_Updating_Session (mbedtls_aes_context *aes_ctx,
			mbedtls_sha256_context *sha256_ctx)
{
  uint8_t ret = BL_NACK;

  mbedtls_aes_init (aes_ctx);
 80003b2:	a84a      	add	r0, sp, #296	@ 0x128
 80003b4:	f001 fc02 	bl	8001bbc <mbedtls_aes_init>
  mbedtls_sha256_init (sha256_ctx);
 80003b8:	a82f      	add	r0, sp, #188	@ 0xbc
 80003ba:	f002 f8fd 	bl	80025b8 <mbedtls_sha256_init>
  ret = mbedtls_aes_setkey_dec (aes_ctx, key, sizeof(key) * 8);
 80003be:	2280      	movs	r2, #128	@ 0x80
 80003c0:	4959      	ldr	r1, [pc, #356]	@ (8000528 <Bootloader_UpdateAPP.isra.0+0x1bc>)
 80003c2:	a84a      	add	r0, sp, #296	@ 0x128
 80003c4:	f001 fcec 	bl	8001da0 <mbedtls_aes_setkey_dec>

  ret = mbedtls_sha256_starts_ret (sha256_ctx, 0);
 80003c8:	4629      	mov	r1, r5
 80003ca:	a82f      	add	r0, sp, #188	@ 0xbc
 80003cc:	f002 f8fe 	bl	80025cc <mbedtls_sha256_starts_ret>
  if (ret != 0)
 80003d0:	b2c0      	uxtb	r0, r0
    {
#ifdef DEBUG_ENABLED
			BL_SendMSG(&DEBUG_USART_HANDLE, "Error: Starting Hash Function\n") ;
		#endif
      ret = BL_NACK;
 80003d2:	42a8      	cmp	r0, r5
 80003d4:	bf0c      	ite	eq
 80003d6:	f04f 08a5 	moveq.w	r8, #165	@ 0xa5
 80003da:	f04f 085a 	movne.w	r8, #90	@ 0x5a
  BL_SendAck (ack);
 80003de:	4640      	mov	r0, r8
 80003e0:	f7ff ff36 	bl	8000250 <BL_SendAck>

static void
Read_EncryptedHashValue (uint8_t *encrypted)
{

  HAL_UART_Receive (&HOST_USART_HANDLE, encrypted, HASH_SIZE, HAL_MAX_DELAY);
 80003e4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80003e8:	2220      	movs	r2, #32
 80003ea:	a915      	add	r1, sp, #84	@ 0x54
 80003ec:	484f      	ldr	r0, [pc, #316]	@ (800052c <Bootloader_UpdateAPP.isra.0+0x1c0>)
 80003ee:	f001 fa7c 	bl	80018ea <HAL_UART_Receive>
  app_size = ((app_size + 3) / 4) * 4; /* align app_size to 4 bytes */
 80003f2:	3703      	adds	r7, #3
  HAL_Delay (300);
 80003f4:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80003f8:	f000 fc68 	bl	8000ccc <HAL_Delay>
  app_size = ((app_size + 3) / 4) * 4; /* align app_size to 4 bytes */
 80003fc:	f027 0703 	bic.w	r7, r7, #3
  BL_SendAck (ack);
 8000400:	4640      	mov	r0, r8
 8000402:	f7ff ff25 	bl	8000250 <BL_SendAck>
  if (app_size > PREDEF_APP_SIZE)
 8000406:	f5b7 4f90 	cmp.w	r7, #18432	@ 0x4800
 800040a:	d85c      	bhi.n	80004c6 <Bootloader_UpdateAPP.isra.0+0x15a>
  status = HAL_FLASH_Unlock ();
 800040c:	f000 fcee 	bl	8000dec <HAL_FLASH_Unlock>
  if (status != HAL_OK)
 8000410:	2800      	cmp	r0, #0
 8000412:	d158      	bne.n	80004c6 <Bootloader_UpdateAPP.isra.0+0x15a>
  erase_init.NbPages = PREDEF_APP_PAGE_NUM; // Number of pages to erase
 8000414:	2312      	movs	r3, #18
 8000416:	930c      	str	r3, [sp, #48]	@ 0x30
  erase_init.Banks = FLASH_BANK_1; // flash bank 1
 8000418:	2301      	movs	r3, #1
      | (update_page * PAGE_SIZE));
 800041a:	02a4      	lsls	r4, r4, #10
  erase_init.TypeErase = FLASH_TYPEERASE_PAGES;
 800041c:	9009      	str	r0, [sp, #36]	@ 0x24
  if (HAL_FLASHEx_Erase (&erase_init, &page_error) != HAL_OK)
 800041e:	4669      	mov	r1, sp
  uint32_t app_start_mem_address = ((uint32_t) PAGE0_ADDRESS
 8000420:	f044 6400 	orr.w	r4, r4, #134217728	@ 0x8000000
  if (HAL_FLASHEx_Erase (&erase_init, &page_error) != HAL_OK)
 8000424:	a809      	add	r0, sp, #36	@ 0x24
  erase_init.PageAddress = app_start_mem_address;
 8000426:	940b      	str	r4, [sp, #44]	@ 0x2c
  erase_init.Banks = FLASH_BANK_1; // flash bank 1
 8000428:	930a      	str	r3, [sp, #40]	@ 0x28
  if (HAL_FLASHEx_Erase (&erase_init, &page_error) != HAL_OK)
 800042a:	f000 fd9d 	bl	8000f68 <HAL_FLASHEx_Erase>
 800042e:	4605      	mov	r5, r0
 8000430:	2800      	cmp	r0, #0
 8000432:	d148      	bne.n	80004c6 <Bootloader_UpdateAPP.isra.0+0x15a>
      status = HAL_UART_Receive (&HOST_USART_HANDLE, (uint8_t*) rec_buffer,
 8000434:	f8df 90f4 	ldr.w	r9, [pc, #244]	@ 800052c <Bootloader_UpdateAPP.isra.0+0x1c0>
  for (uint32_t app_counter = 0; app_counter < app_size; app_counter +=
 8000438:	42af      	cmp	r7, r5
 800043a:	d831      	bhi.n	80004a0 <Bootloader_UpdateAPP.isra.0+0x134>
  status = HAL_FLASH_Lock ();
 800043c:	f000 fce8 	bl	8000e10 <HAL_FLASH_Lock>

static uint8_t
Decrypt_RecievedChunk (mbedtls_aes_context *ctx, uint8_t *enc, uint8_t *dec)
{
  int ret = BL_ACK;
  ret = mbedtls_aes_crypt_ecb (ctx, MBEDTLS_AES_DECRYPT, enc, dec);
 8000440:	2100      	movs	r1, #0
 8000442:	ab0d      	add	r3, sp, #52	@ 0x34
 8000444:	aa15      	add	r2, sp, #84	@ 0x54
 8000446:	a84a      	add	r0, sp, #296	@ 0x128
 8000448:	f002 f8a0 	bl	800258c <mbedtls_aes_crypt_ecb>
 800044c:	aa19      	add	r2, sp, #100	@ 0x64
 800044e:	ab11      	add	r3, sp, #68	@ 0x44
 8000450:	2100      	movs	r1, #0
 8000452:	a84a      	add	r0, sp, #296	@ 0x128
 8000454:	f002 f89a 	bl	800258c <mbedtls_aes_crypt_ecb>
  ret = mbedtls_sha256_finish_ret (sha256_ctx, calc_hash);
 8000458:	a91d      	add	r1, sp, #116	@ 0x74
 800045a:	a82f      	add	r0, sp, #188	@ 0xbc
 800045c:	f002 fcaf 	bl	8002dbe <mbedtls_sha256_finish_ret>
  mbedtls_aes_free (aes_ctx);
 8000460:	a84a      	add	r0, sp, #296	@ 0x128
 8000462:	f001 fbb0 	bl	8001bc6 <mbedtls_aes_free>
  mbedtls_sha256_free (sha256_ctx);
 8000466:	a82f      	add	r0, sp, #188	@ 0xbc
 8000468:	f002 f8aa 	bl	80025c0 <mbedtls_sha256_free>
  var = memcmp (calc_hash, rec_hash, sizeof(calc_hash));
 800046c:	2220      	movs	r2, #32
 800046e:	a90d      	add	r1, sp, #52	@ 0x34
 8000470:	a81d      	add	r0, sp, #116	@ 0x74
 8000472:	f002 fd69 	bl	8002f48 <memcmp>
  if (var == 0)
 8000476:	2800      	cmp	r0, #0
 8000478:	d154      	bne.n	8000524 <Bootloader_UpdateAPP.isra.0+0x1b8>
  update.updated = 1;
 800047a:	2301      	movs	r3, #1
  memcpy (update.hash, calc_hash, HASH_SIZE);
 800047c:	ad25      	add	r5, sp, #148	@ 0x94
 800047e:	ac1d      	add	r4, sp, #116	@ 0x74
  update.updated = 1;
 8000480:	f88d 30b8 	strb.w	r3, [sp, #184]	@ 0xb8
  update.update_size = app_size;
 8000484:	972d      	str	r7, [sp, #180]	@ 0xb4
  memcpy (update.hash, calc_hash, HASH_SIZE);
 8000486:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000488:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800048a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800048e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  Set_ValidUpdate (&update);
 8000492:	a825      	add	r0, sp, #148	@ 0x94
 8000494:	f7ff ff34 	bl	8000300 <Set_ValidUpdate>
  BL_SendAck (ack);
 8000498:	20a5      	movs	r0, #165	@ 0xa5
      BL_SendAck (ack);
 800049a:	f7ff fed9 	bl	8000250 <BL_SendAck>
      return ack;
 800049e:	e012      	b.n	80004c6 <Bootloader_UpdateAPP.isra.0+0x15a>
      BL_SendAck (ack);
 80004a0:	4640      	mov	r0, r8
      if ((app_size - app_counter) < sizeof(rec_buffer) ?
 80004a2:	1b7e      	subs	r6, r7, r5
      BL_SendAck (ack);
 80004a4:	f7ff fed4 	bl	8000250 <BL_SendAck>
      if ((app_size - app_counter) < sizeof(rec_buffer) ?
 80004a8:	2e10      	cmp	r6, #16
      status = HAL_UART_Receive (&HOST_USART_HANDLE, (uint8_t*) rec_buffer,
 80004aa:	a901      	add	r1, sp, #4
 80004ac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80004b0:	f04f 0210 	mov.w	r2, #16
 80004b4:	4648      	mov	r0, r9
      if ((app_size - app_counter) < sizeof(rec_buffer) ?
 80004b6:	bf28      	it	cs
 80004b8:	2610      	movcs	r6, #16
      status = HAL_UART_Receive (&HOST_USART_HANDLE, (uint8_t*) rec_buffer,
 80004ba:	f001 fa16 	bl	80018ea <HAL_UART_Receive>
      if (status != HAL_OK)
 80004be:	4601      	mov	r1, r0
 80004c0:	b128      	cbz	r0, 80004ce <Bootloader_UpdateAPP.isra.0+0x162>
	  status = HAL_FLASH_Lock ();
 80004c2:	f000 fca5 	bl	8000e10 <HAL_FLASH_Lock>
}
 80004c6:	f50d 7d11 	add.w	sp, sp, #580	@ 0x244
 80004ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  ret = mbedtls_aes_crypt_ecb (ctx, MBEDTLS_AES_DECRYPT, enc, dec);
 80004ce:	ab05      	add	r3, sp, #20
 80004d0:	aa01      	add	r2, sp, #4
 80004d2:	a84a      	add	r0, sp, #296	@ 0x128
 80004d4:	f002 f85a 	bl	800258c <mbedtls_aes_crypt_ecb>
      for (uint32_t j = 0; j < (data_to_recieve / sizeof(uint32_t)); j++)
 80004d8:	46a0      	mov	r8, r4
 80004da:	f026 0a03 	bic.w	sl, r6, #3
 80004de:	f10d 0b14 	add.w	fp, sp, #20
 80004e2:	44a2      	add	sl, r4
 80004e4:	45c2      	cmp	sl, r8
 80004e6:	d111      	bne.n	800050c <Bootloader_UpdateAPP.isra.0+0x1a0>
static uint8_t
Accumulate_Sha256Hash (mbedtls_sha256_context *sha256_ctx, uint8_t *chunk,
		       uint32_t chunck_size)
{
  uint8_t ret = BL_ACK;
  ret = mbedtls_sha256_update_ret (sha256_ctx, chunk, chunck_size);
 80004e8:	4632      	mov	r2, r6
 80004ea:	a905      	add	r1, sp, #20
 80004ec:	a82f      	add	r0, sp, #188	@ 0xbc
 80004ee:	f002 fc2d 	bl	8002d4c <mbedtls_sha256_update_ret>
  if (ret != 0)
 80004f2:	b2c0      	uxtb	r0, r0
    {
#ifdef DEBUG_ENABLED
		BL_SendMSG(&DEBUG_USART_HANDLE, "Error: Updating Hash Function\n") ;
	#endif
      ret = BL_NACK;
 80004f4:	2800      	cmp	r0, #0
 80004f6:	bf0c      	ite	eq
 80004f8:	f04f 08a5 	moveq.w	r8, #165	@ 0xa5
 80004fc:	f04f 085a 	movne.w	r8, #90	@ 0x5a
      BL_SendAck (ack);
 8000500:	4640      	mov	r0, r8
 8000502:	f7ff fea5 	bl	8000250 <BL_SendAck>
      download_address += data_to_recieve;
 8000506:	4434      	add	r4, r6
  for (uint32_t app_counter = 0; app_counter < app_size; app_counter +=
 8000508:	4435      	add	r5, r6
 800050a:	e795      	b.n	8000438 <Bootloader_UpdateAPP.isra.0+0xcc>
	  status = HAL_FLASH_Program (FLASH_TYPEPROGRAM_WORD,
 800050c:	4641      	mov	r1, r8
 800050e:	2300      	movs	r3, #0
 8000510:	2002      	movs	r0, #2
 8000512:	f85b 2b04 	ldr.w	r2, [fp], #4
 8000516:	f000 fcaf 	bl	8000e78 <HAL_FLASH_Program>
	  if (status != HAL_OK)
 800051a:	f108 0804 	add.w	r8, r8, #4
 800051e:	2800      	cmp	r0, #0
 8000520:	d0e0      	beq.n	80004e4 <Bootloader_UpdateAPP.isra.0+0x178>
 8000522:	e7ce      	b.n	80004c2 <Bootloader_UpdateAPP.isra.0+0x156>
      BL_SendAck (ack);
 8000524:	205a      	movs	r0, #90	@ 0x5a
 8000526:	e7b8      	b.n	800049a <Bootloader_UpdateAPP.isra.0+0x12e>
 8000528:	20000014 	.word	0x20000014
 800052c:	20000100 	.word	0x20000100

08000530 <BL_JumpToApplication>:
      + (app_starting_page * PAGE_SIZE));
 8000530:	f500 3000 	add.w	r0, r0, #131072	@ 0x20000
{
 8000534:	b570      	push	{r4, r5, r6, lr}
      + (app_starting_page * PAGE_SIZE));
 8000536:	0280      	lsls	r0, r0, #10
  uint32_t jump_address = *(uint32_t*) ((uint32_t*) pointer_to_page + 1); // The Jump address is the Reset Handler of the Application
 8000538:	e9d0 5400 	ldrd	r5, r4, [r0]
  HAL_DeInit ();
 800053c:	f000 fb6e 	bl	8000c1c <HAL_DeInit>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000540:	b672      	cpsid	i
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000542:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000546:	f3bf 8f6f 	isb	sy
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800054a:	f385 8808 	msr	MSP, r5
  __ASM volatile ("cpsie i" : : : "memory");
 800054e:	b662      	cpsie	i
  JumpToApplication ();
 8000550:	4623      	mov	r3, r4
}
 8000552:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  JumpToApplication ();
 8000556:	4718      	bx	r3

08000558 <BL_JumpToApplication_Wrapper>:
  uint8_t starting_page_num = hostbuffer[2];
 8000558:	7880      	ldrb	r0, [r0, #2]
  if (starting_page_num >= STM32F103C8T6_PAGES_NUM)
 800055a:	283f      	cmp	r0, #63	@ 0x3f
 800055c:	d801      	bhi.n	8000562 <BL_JumpToApplication_Wrapper+0xa>
  BL_JumpToApplication (starting_page_num);
 800055e:	f7ff bfe7 	b.w	8000530 <BL_JumpToApplication>
}
 8000562:	4770      	bx	lr

08000564 <BL_Init>:
  CRC32_Init (&hcrc);
 8000564:	4801      	ldr	r0, [pc, #4]	@ (800056c <BL_Init+0x8>)
 8000566:	f000 b99b 	b.w	80008a0 <CRC32_Init>
 800056a:	bf00      	nop
 800056c:	20000148 	.word	0x20000148

08000570 <BL_SendMSG>:
{
 8000570:	b40e      	push	{r1, r2, r3}
  char msg[200] =
 8000572:	2100      	movs	r1, #0
{
 8000574:	b570      	push	{r4, r5, r6, lr}
 8000576:	4604      	mov	r4, r0
 8000578:	b0b5      	sub	sp, #212	@ 0xd4
 800057a:	ad39      	add	r5, sp, #228	@ 0xe4
 800057c:	f855 6b04 	ldr.w	r6, [r5], #4
  char msg[200] =
 8000580:	22c4      	movs	r2, #196	@ 0xc4
 8000582:	a803      	add	r0, sp, #12
 8000584:	9102      	str	r1, [sp, #8]
 8000586:	f002 fcef 	bl	8002f68 <memset>
  vsprintf (msg, format, args);
 800058a:	462a      	mov	r2, r5
 800058c:	4631      	mov	r1, r6
 800058e:	a802      	add	r0, sp, #8
  va_start(args, format);
 8000590:	9501      	str	r5, [sp, #4]
  vsprintf (msg, format, args);
 8000592:	f002 fccf 	bl	8002f34 <vsiprintf>
  if (huart == &HOST_USART_HANDLE)
 8000596:	4b0b      	ldr	r3, [pc, #44]	@ (80005c4 <BL_SendMSG+0x54>)
 8000598:	429c      	cmp	r4, r3
 800059a:	d10d      	bne.n	80005b8 <BL_SendMSG+0x48>
      HAL_UART_Transmit (huart, (uint8_t*) msg, strlen (msg) + 1,
 800059c:	a802      	add	r0, sp, #8
 800059e:	f7ff fdd5 	bl	800014c <strlen>
 80005a2:	1c42      	adds	r2, r0, #1
 80005a4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005a8:	4620      	mov	r0, r4
 80005aa:	b292      	uxth	r2, r2
 80005ac:	a902      	add	r1, sp, #8
 80005ae:	f001 f94e 	bl	800184e <HAL_UART_Transmit>
      HAL_Delay (20);
 80005b2:	2014      	movs	r0, #20
 80005b4:	f000 fb8a 	bl	8000ccc <HAL_Delay>
}
 80005b8:	b035      	add	sp, #212	@ 0xd4
 80005ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80005be:	b003      	add	sp, #12
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	20000100 	.word	0x20000100

080005c8 <generate_random_number>:
{
 80005c8:	b538      	push	{r3, r4, r5, lr}
 80005ca:	4604      	mov	r4, r0
 80005cc:	f100 0510 	add.w	r5, r0, #16
      tick_value = HAL_GetTick ();
 80005d0:	f000 fb76 	bl	8000cc0 <HAL_GetTick>
      memcpy (&output[i * 4], &tick_value, sizeof(tick_value));
 80005d4:	f844 0b04 	str.w	r0, [r4], #4
      HAL_Delay (10);  // delay to make variations
 80005d8:	200a      	movs	r0, #10
 80005da:	f000 fb77 	bl	8000ccc <HAL_Delay>
  for (int i = 0; i < 4; i++)
 80005de:	42ac      	cmp	r4, r5
 80005e0:	d1f6      	bne.n	80005d0 <generate_random_number+0x8>
}
 80005e2:	bd38      	pop	{r3, r4, r5, pc}

080005e4 <Bootloader_MemRead>:
{
 80005e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint8_t seed[16] =
 80005e8:	2400      	movs	r4, #0
  if (address < FLASH_START)
 80005ea:	f100 4378 	add.w	r3, r0, #4160749568	@ 0xf8000000
{
 80005ee:	f5ad 7d1a 	sub.w	sp, sp, #616	@ 0x268
  if (address < FLASH_START)
 80005f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
{
 80005f6:	4605      	mov	r5, r0
  uint8_t seed[16] =
 80005f8:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80005fc:	e9cd 4404 	strd	r4, r4, [sp, #16]
  uint8_t encrypted_seed[16] =
 8000600:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8000604:	e9cd 4408 	strd	r4, r4, [sp, #32]
  uint8_t decrypted_seed[16] =
 8000608:	e9cd 440a 	strd	r4, r4, [sp, #40]	@ 0x28
 800060c:	e9cd 440c 	strd	r4, r4, [sp, #48]	@ 0x30
  if (address < FLASH_START)
 8000610:	d90e      	bls.n	8000630 <Bootloader_MemRead+0x4c>
      status = BL_NACK;
 8000612:	235a      	movs	r3, #90	@ 0x5a
      HAL_UART_Transmit (&HOST_USART_HANDLE, (uint8_t*) &status, 1,
 8000614:	2201      	movs	r2, #1
      status = BL_NACK;
 8000616:	f88d 3007 	strb.w	r3, [sp, #7]
      HAL_UART_Transmit (&HOST_USART_HANDLE, (uint8_t*) &status, 1,
 800061a:	483c      	ldr	r0, [pc, #240]	@ (800070c <Bootloader_MemRead+0x128>)
 800061c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000620:	f10d 0107 	add.w	r1, sp, #7
 8000624:	f001 f913 	bl	800184e <HAL_UART_Transmit>
}
 8000628:	f50d 7d1a 	add.w	sp, sp, #616	@ 0x268
 800062c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if ((address + len) > FLASH_END)
 8000630:	4b37      	ldr	r3, [pc, #220]	@ (8000710 <Bootloader_MemRead+0x12c>)
 8000632:	1847      	adds	r7, r0, r1
 8000634:	429f      	cmp	r7, r3
 8000636:	d8ec      	bhi.n	8000612 <Bootloader_MemRead+0x2e>
  status = IS_VALID_ADDRESS (address, len);
 8000638:	f04f 0801 	mov.w	r8, #1
      mbedtls_aes_init (&aes_ctx);
 800063c:	a854      	add	r0, sp, #336	@ 0x150
  status = IS_VALID_ADDRESS (address, len);
 800063e:	f88d 8007 	strb.w	r8, [sp, #7]
      mbedtls_aes_init (&aes_ctx);
 8000642:	f001 fabb 	bl	8001bbc <mbedtls_aes_init>
      mbedtls_aes_setkey_dec (&aes_ctx, read_key, 16 * 8);
 8000646:	2280      	movs	r2, #128	@ 0x80
 8000648:	4932      	ldr	r1, [pc, #200]	@ (8000714 <Bootloader_MemRead+0x130>)
 800064a:	a854      	add	r0, sp, #336	@ 0x150
 800064c:	f001 fba8 	bl	8001da0 <mbedtls_aes_setkey_dec>
      HAL_UART_Transmit (&HOST_USART_HANDLE, (uint8_t*) seed, sizeof(seed),
 8000650:	4e2e      	ldr	r6, [pc, #184]	@ (800070c <Bootloader_MemRead+0x128>)
      generate_random_number (seed);
 8000652:	a802      	add	r0, sp, #8
 8000654:	f7ff ffb8 	bl	80005c8 <generate_random_number>
      HAL_Delay (10);
 8000658:	200a      	movs	r0, #10
 800065a:	f000 fb37 	bl	8000ccc <HAL_Delay>
      HAL_UART_Transmit (&HOST_USART_HANDLE, (uint8_t*) seed, sizeof(seed),
 800065e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000662:	2210      	movs	r2, #16
 8000664:	a902      	add	r1, sp, #8
 8000666:	4630      	mov	r0, r6
 8000668:	f001 f8f1 	bl	800184e <HAL_UART_Transmit>
      HAL_Delay (10);
 800066c:	200a      	movs	r0, #10
 800066e:	f000 fb2d 	bl	8000ccc <HAL_Delay>
      __HAL_UART_FLUSH_DRREGISTER(&HOST_USART_HANDLE); // Clear UART data register
 8000672:	6833      	ldr	r3, [r6, #0]
      HAL_UART_Receive (&HOST_USART_HANDLE, (uint8_t*) encrypted_seed,
 8000674:	2210      	movs	r2, #16
      __HAL_UART_FLUSH_DRREGISTER(&HOST_USART_HANDLE); // Clear UART data register
 8000676:	685b      	ldr	r3, [r3, #4]
      HAL_UART_Receive (&HOST_USART_HANDLE, (uint8_t*) encrypted_seed,
 8000678:	a906      	add	r1, sp, #24
 800067a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800067e:	4630      	mov	r0, r6
 8000680:	f001 f933 	bl	80018ea <HAL_UART_Receive>
      mbedtls_aes_crypt_ecb (&aes_ctx, MBEDTLS_AES_DECRYPT, encrypted_seed,
 8000684:	4621      	mov	r1, r4
 8000686:	ab0a      	add	r3, sp, #40	@ 0x28
 8000688:	aa06      	add	r2, sp, #24
 800068a:	a854      	add	r0, sp, #336	@ 0x150
 800068c:	f001 ff7e 	bl	800258c <mbedtls_aes_crypt_ecb>
      HAL_Delay (10);
 8000690:	200a      	movs	r0, #10
 8000692:	f000 fb1b 	bl	8000ccc <HAL_Delay>
      HAL_UART_Transmit (&HOST_USART_HANDLE, (uint8_t*) encrypted_seed,
 8000696:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800069a:	2210      	movs	r2, #16
 800069c:	a906      	add	r1, sp, #24
 800069e:	4630      	mov	r0, r6
 80006a0:	f001 f8d5 	bl	800184e <HAL_UART_Transmit>
      HAL_Delay (10);
 80006a4:	200a      	movs	r0, #10
 80006a6:	f000 fb11 	bl	8000ccc <HAL_Delay>
      status = memcmp (decrypted_seed, seed, sizeof(seed));
 80006aa:	2210      	movs	r2, #16
 80006ac:	a902      	add	r1, sp, #8
 80006ae:	a80a      	add	r0, sp, #40	@ 0x28
 80006b0:	f002 fc4a 	bl	8002f48 <memcmp>
      if (status == 0)
 80006b4:	b2c0      	uxtb	r0, r0
 80006b6:	b9e0      	cbnz	r0, 80006f2 <Bootloader_MemRead+0x10e>
	  status = BL_ACK;
 80006b8:	23a5      	movs	r3, #165	@ 0xa5
	  HAL_UART_Transmit (&HOST_USART_HANDLE, (uint8_t*) &status, 1,
 80006ba:	4642      	mov	r2, r8
	  status = BL_ACK;
 80006bc:	f88d 3007 	strb.w	r3, [sp, #7]
	  HAL_UART_Transmit (&HOST_USART_HANDLE, (uint8_t*) &status, 1,
 80006c0:	4630      	mov	r0, r6
 80006c2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80006c6:	f10d 0107 	add.w	r1, sp, #7
 80006ca:	f001 f8c0 	bl	800184e <HAL_UART_Transmit>
  for (uint32_t i = 0; i < len; i++)
 80006ce:	42af      	cmp	r7, r5
 80006d0:	d103      	bne.n	80006da <Bootloader_MemRead+0xf6>
      mbedtls_aes_free (&aes);
 80006d2:	a80e      	add	r0, sp, #56	@ 0x38
 80006d4:	f001 fa77 	bl	8001bc6 <mbedtls_aes_free>
}
 80006d8:	e7a6      	b.n	8000628 <Bootloader_MemRead+0x44>
      HAL_Delay (50);
 80006da:	2032      	movs	r0, #50	@ 0x32
 80006dc:	f000 faf6 	bl	8000ccc <HAL_Delay>
      HAL_UART_Transmit (&HOST_USART_HANDLE, &(((uint8_t*) address)[i]), 1,
 80006e0:	4629      	mov	r1, r5
 80006e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80006e6:	2201      	movs	r2, #1
 80006e8:	4630      	mov	r0, r6
 80006ea:	f001 f8b0 	bl	800184e <HAL_UART_Transmit>
  for (uint32_t i = 0; i < len; i++)
 80006ee:	3501      	adds	r5, #1
 80006f0:	e7ed      	b.n	80006ce <Bootloader_MemRead+0xea>
	  status = BL_NACK;
 80006f2:	235a      	movs	r3, #90	@ 0x5a
	  HAL_UART_Transmit (&HOST_USART_HANDLE, (uint8_t*) &status, 1,
 80006f4:	4642      	mov	r2, r8
	  status = BL_NACK;
 80006f6:	f88d 3007 	strb.w	r3, [sp, #7]
	  HAL_UART_Transmit (&HOST_USART_HANDLE, (uint8_t*) &status, 1,
 80006fa:	4630      	mov	r0, r6
 80006fc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000700:	f10d 0107 	add.w	r1, sp, #7
 8000704:	f001 f8a3 	bl	800184e <HAL_UART_Transmit>
 8000708:	e7e3      	b.n	80006d2 <Bootloader_MemRead+0xee>
 800070a:	bf00      	nop
 800070c:	20000100 	.word	0x20000100
 8000710:	08010000 	.word	0x08010000
 8000714:	20000004 	.word	0x20000004

08000718 <BL_FetchUARTCommand>:
{
 8000718:	b570      	push	{r4, r5, r6, lr}
  memset (host_buffer, 0, sizeof(host_buffer));
 800071a:	4c53      	ldr	r4, [pc, #332]	@ (8000868 <BL_FetchUARTCommand+0x150>)
 800071c:	2214      	movs	r2, #20
 800071e:	2100      	movs	r1, #0
{
 8000720:	b088      	sub	sp, #32
  memset (host_buffer, 0, sizeof(host_buffer));
 8000722:	4620      	mov	r0, r4
 8000724:	f002 fc20 	bl	8002f68 <memset>
      hal_status = HAL_UART_Receive (&HOST_USART_HANDLE, host_buffer + i,
 8000728:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800072c:	2201      	movs	r2, #1
 800072e:	4621      	mov	r1, r4
 8000730:	484e      	ldr	r0, [pc, #312]	@ (800086c <BL_FetchUARTCommand+0x154>)
 8000732:	f001 f8da 	bl	80018ea <HAL_UART_Receive>
      if (hal_status != HAL_OK)
 8000736:	b9d0      	cbnz	r0, 800076e <BL_FetchUARTCommand+0x56>
      hal_status = HAL_UART_Receive (&HOST_USART_HANDLE, host_buffer + i,
 8000738:	4621      	mov	r1, r4
 800073a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800073e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8000742:	484a      	ldr	r0, [pc, #296]	@ (800086c <BL_FetchUARTCommand+0x154>)
 8000744:	f001 f8d1 	bl	80018ea <HAL_UART_Receive>
      if (hal_status != HAL_OK)
 8000748:	b988      	cbnz	r0, 800076e <BL_FetchUARTCommand+0x56>
  uint8_t data_count = hostbuffer[0] - BL_CRC_SIZE + 1;
 800074a:	7825      	ldrb	r5, [r4, #0]
  crc_buff = CRC32_Calculate (&hcrc, hostbuffer, data_count);
 800074c:	4621      	mov	r1, r4
  uint8_t data_count = hostbuffer[0] - BL_CRC_SIZE + 1;
 800074e:	3d03      	subs	r5, #3
  crc_buff = CRC32_Calculate (&hcrc, hostbuffer, data_count);
 8000750:	b2ed      	uxtb	r5, r5
 8000752:	462a      	mov	r2, r5
 8000754:	4846      	ldr	r0, [pc, #280]	@ (8000870 <BL_FetchUARTCommand+0x158>)
 8000756:	f000 f8af 	bl	80008b8 <CRC32_Calculate>
 800075a:	4606      	mov	r6, r0
  crc_rec = *(uint32_t*) (((uint8_t*) hostbuffer + data_count));
 800075c:	5965      	ldr	r5, [r4, r5]
  CRC32_ResetCRC (&hcrc);
 800075e:	4844      	ldr	r0, [pc, #272]	@ (8000870 <BL_FetchUARTCommand+0x158>)
 8000760:	f000 f8c0 	bl	80008e4 <CRC32_ResetCRC>
  if (crc_buff != crc_rec)
 8000764:	42ae      	cmp	r6, r5
 8000766:	d004      	beq.n	8000772 <BL_FetchUARTCommand+0x5a>
      BL_SendAck (ret_status);
 8000768:	205a      	movs	r0, #90	@ 0x5a
 800076a:	f7ff fd71 	bl	8000250 <BL_SendAck>
	  return ret_status;
 800076e:	205a      	movs	r0, #90	@ 0x5a
 8000770:	e01a      	b.n	80007a8 <BL_FetchUARTCommand+0x90>
  BL_SendAck (ret_status);
 8000772:	20a5      	movs	r0, #165	@ 0xa5
 8000774:	f7ff fd6c 	bl	8000250 <BL_SendAck>
  switch (host_buffer[1]/* Command Code */)
 8000778:	7863      	ldrb	r3, [r4, #1]
 800077a:	3b01      	subs	r3, #1
 800077c:	2b07      	cmp	r3, #7
 800077e:	d812      	bhi.n	80007a6 <BL_FetchUARTCommand+0x8e>
 8000780:	e8df f003 	tbb	[pc, r3]
 8000784:	665d0414 	.word	0x665d0414
 8000788:	17596b44 	.word	0x17596b44
  chip_id = (READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 800078c:	4b39      	ldr	r3, [pc, #228]	@ (8000874 <BL_FetchUARTCommand+0x15c>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	f3c3 030b 	ubfx	r3, r3, #0, #12
  HAL_UART_Transmit (&HOST_USART_HANDLE, (uint8_t*) &version_id,
 8000794:	2204      	movs	r2, #4
  Version_ID_t version_id =
 8000796:	9301      	str	r3, [sp, #4]
  HAL_UART_Transmit (&HOST_USART_HANDLE, (uint8_t*) &version_id,
 8000798:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800079c:	eb0d 0102 	add.w	r1, sp, r2
 80007a0:	4832      	ldr	r0, [pc, #200]	@ (800086c <BL_FetchUARTCommand+0x154>)
 80007a2:	f001 f854 	bl	800184e <HAL_UART_Transmit>
      ret_status = Bootloader_GetVersionID (host_buffer);
 80007a6:	20a5      	movs	r0, #165	@ 0xa5
}
 80007a8:	b008      	add	sp, #32
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
  Version_ID_t version_id =
 80007ac:	f240 131f 	movw	r3, #287	@ 0x11f
 80007b0:	e7f0      	b.n	8000794 <BL_FetchUARTCommand+0x7c>
  BL_SendMSG (&HOST_USART_HANDLE, "----------------------------------------");
 80007b2:	4931      	ldr	r1, [pc, #196]	@ (8000878 <BL_FetchUARTCommand+0x160>)
 80007b4:	482d      	ldr	r0, [pc, #180]	@ (800086c <BL_FetchUARTCommand+0x154>)
 80007b6:	f7ff fedb 	bl	8000570 <BL_SendMSG>
  BL_SendMSG (&HOST_USART_HANDLE,
 80007ba:	4930      	ldr	r1, [pc, #192]	@ (800087c <BL_FetchUARTCommand+0x164>)
 80007bc:	482b      	ldr	r0, [pc, #172]	@ (800086c <BL_FetchUARTCommand+0x154>)
 80007be:	f7ff fed7 	bl	8000570 <BL_SendMSG>
  BL_SendMSG (&HOST_USART_HANDLE,
 80007c2:	492f      	ldr	r1, [pc, #188]	@ (8000880 <BL_FetchUARTCommand+0x168>)
 80007c4:	4829      	ldr	r0, [pc, #164]	@ (800086c <BL_FetchUARTCommand+0x154>)
 80007c6:	f7ff fed3 	bl	8000570 <BL_SendMSG>
  BL_SendMSG (&HOST_USART_HANDLE,
 80007ca:	492e      	ldr	r1, [pc, #184]	@ (8000884 <BL_FetchUARTCommand+0x16c>)
 80007cc:	4827      	ldr	r0, [pc, #156]	@ (800086c <BL_FetchUARTCommand+0x154>)
 80007ce:	f7ff fecf 	bl	8000570 <BL_SendMSG>
  BL_SendMSG (&HOST_USART_HANDLE,
 80007d2:	492d      	ldr	r1, [pc, #180]	@ (8000888 <BL_FetchUARTCommand+0x170>)
 80007d4:	4825      	ldr	r0, [pc, #148]	@ (800086c <BL_FetchUARTCommand+0x154>)
 80007d6:	f7ff fecb 	bl	8000570 <BL_SendMSG>
  BL_SendMSG (&HOST_USART_HANDLE,
 80007da:	492c      	ldr	r1, [pc, #176]	@ (800088c <BL_FetchUARTCommand+0x174>)
 80007dc:	4823      	ldr	r0, [pc, #140]	@ (800086c <BL_FetchUARTCommand+0x154>)
 80007de:	f7ff fec7 	bl	8000570 <BL_SendMSG>
  BL_SendMSG (&HOST_USART_HANDLE,
 80007e2:	492b      	ldr	r1, [pc, #172]	@ (8000890 <BL_FetchUARTCommand+0x178>)
 80007e4:	4821      	ldr	r0, [pc, #132]	@ (800086c <BL_FetchUARTCommand+0x154>)
 80007e6:	f7ff fec3 	bl	8000570 <BL_SendMSG>
  BL_SendMSG (&HOST_USART_HANDLE,
 80007ea:	492a      	ldr	r1, [pc, #168]	@ (8000894 <BL_FetchUARTCommand+0x17c>)
 80007ec:	481f      	ldr	r0, [pc, #124]	@ (800086c <BL_FetchUARTCommand+0x154>)
 80007ee:	f7ff febf 	bl	8000570 <BL_SendMSG>
  BL_SendMSG (&HOST_USART_HANDLE,
 80007f2:	4929      	ldr	r1, [pc, #164]	@ (8000898 <BL_FetchUARTCommand+0x180>)
 80007f4:	481d      	ldr	r0, [pc, #116]	@ (800086c <BL_FetchUARTCommand+0x154>)
 80007f6:	f7ff febb 	bl	8000570 <BL_SendMSG>
  BL_SendMSG (&HOST_USART_HANDLE, "----------------------------------------");
 80007fa:	491f      	ldr	r1, [pc, #124]	@ (8000878 <BL_FetchUARTCommand+0x160>)
 80007fc:	481b      	ldr	r0, [pc, #108]	@ (800086c <BL_FetchUARTCommand+0x154>)
 80007fe:	f7ff feb7 	bl	8000570 <BL_SendMSG>
  BL_SendMSG (&HOST_USART_HANDLE, "END");
 8000802:	4926      	ldr	r1, [pc, #152]	@ (800089c <BL_FetchUARTCommand+0x184>)
 8000804:	4819      	ldr	r0, [pc, #100]	@ (800086c <BL_FetchUARTCommand+0x154>)
 8000806:	f7ff feb3 	bl	8000570 <BL_SendMSG>
}
 800080a:	e7cc      	b.n	80007a6 <BL_FetchUARTCommand+0x8e>
  HAL_FLASHEx_OBGetConfig (&initconfig);
 800080c:	a801      	add	r0, sp, #4
 800080e:	f000 fb85 	bl	8000f1c <HAL_FLASHEx_OBGetConfig>
  switch (initconfig.RDPLevel)
 8000812:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8000816:	b163      	cbz	r3, 8000832 <BL_FetchUARTCommand+0x11a>
 8000818:	3ba5      	subs	r3, #165	@ 0xa5
 800081a:	bf18      	it	ne
 800081c:	f04f 33ff 	movne.w	r3, #4294967295	@ 0xffffffff
 8000820:	b2db      	uxtb	r3, r3
      level = 0;
 8000822:	f88d 3003 	strb.w	r3, [sp, #3]
  HAL_UART_Transmit (&HOST_USART_HANDLE, &(level), 1, HAL_MAX_DELAY);
 8000826:	2201      	movs	r2, #1
 8000828:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800082c:	f10d 0103 	add.w	r1, sp, #3
 8000830:	e7b6      	b.n	80007a0 <BL_FetchUARTCommand+0x88>
  switch (initconfig.RDPLevel)
 8000832:	2301      	movs	r3, #1
 8000834:	e7f5      	b.n	8000822 <BL_FetchUARTCommand+0x10a>
      BL_JumpToApplication_Wrapper (host_buffer);
 8000836:	480c      	ldr	r0, [pc, #48]	@ (8000868 <BL_FetchUARTCommand+0x150>)
 8000838:	f7ff fe8e 	bl	8000558 <BL_JumpToApplication_Wrapper>
      break;
 800083c:	e7b3      	b.n	80007a6 <BL_FetchUARTCommand+0x8e>
  uint32_t address = (host_buffer[2] << 24) | (host_buffer[3] << 16)
 800083e:	f8d4 0002 	ldr.w	r0, [r4, #2]
  size_t len = (host_buffer[6] << 24) | (host_buffer[7] << 16)
 8000842:	f8d4 1006 	ldr.w	r1, [r4, #6]
  Bootloader_MemRead (address, len);
 8000846:	ba00      	rev	r0, r0
 8000848:	ba09      	rev	r1, r1
 800084a:	f7ff fecb 	bl	80005e4 <Bootloader_MemRead>
}
 800084e:	e7aa      	b.n	80007a6 <BL_FetchUARTCommand+0x8e>
  Bootloader_EraseFlash (starting_page, number_of_pages);
 8000850:	78e1      	ldrb	r1, [r4, #3]
 8000852:	78a0      	ldrb	r0, [r4, #2]
 8000854:	f7ff fc82 	bl	800015c <Bootloader_EraseFlash>
}
 8000858:	e7a5      	b.n	80007a6 <BL_FetchUARTCommand+0x8e>
  uint32_t app_size = (hostbuffer[2] << 24) | (hostbuffer[3] << 16)
 800085a:	f8d4 0002 	ldr.w	r0, [r4, #2]
  Bootloader_UpdateAPP (app_size, update_starting_page);
 800085e:	79a1      	ldrb	r1, [r4, #6]
 8000860:	ba00      	rev	r0, r0
 8000862:	f7ff fd83 	bl	800036c <Bootloader_UpdateAPP.isra.0>
}
 8000866:	e79e      	b.n	80007a6 <BL_FetchUARTCommand+0x8e>
 8000868:	200000a4 	.word	0x200000a4
 800086c:	20000100 	.word	0x20000100
 8000870:	20000148 	.word	0x20000148
 8000874:	e0042000 	.word	0xe0042000
 8000878:	080038a0 	.word	0x080038a0
 800087c:	080038c9 	.word	0x080038c9
 8000880:	080038f7 	.word	0x080038f7
 8000884:	08003925 	.word	0x08003925
 8000888:	08003953 	.word	0x08003953
 800088c:	08003981 	.word	0x08003981
 8000890:	080039af 	.word	0x080039af
 8000894:	080039dd 	.word	0x080039dd
 8000898:	08003a0b 	.word	0x08003a0b
 800089c:	08003a39 	.word	0x08003a39

080008a0 <CRC32_Init>:
 * @retval The initial CRC value set in the CRC register.
 */
void
CRC32_Init (CRC_Handle_t *hcrc)
{
  if (!hcrc->crc_poly)
 80008a0:	6803      	ldr	r3, [r0, #0]
 80008a2:	b923      	cbnz	r3, 80008ae <CRC32_Init+0xe>
    { /* Check if the crc not initialized */
      hcrc->crc_initval = DEFAULT_INIT_VAL;
      hcrc->crc_poly = DEFAULT_POLY_VAL;
 80008a4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80008a8:	4b02      	ldr	r3, [pc, #8]	@ (80008b4 <CRC32_Init+0x14>)
 80008aa:	e9c0 3200 	strd	r3, r2, [r0]
    }
  hcrc->crc_reg = hcrc->crc_initval; // Set the CRC register to the initial value specified in the handle
 80008ae:	6843      	ldr	r3, [r0, #4]
 80008b0:	6083      	str	r3, [r0, #8]
}
 80008b2:	4770      	bx	lr
 80008b4:	edb88320 	.word	0xedb88320

080008b8 <CRC32_Calculate>:
 * @param  length: Length of the data buffer.
 * @retval The computed CRC32 value.
 */
uint32_t
CRC32_Calculate (CRC_Handle_t *hcrc, uint8_t *data, uint32_t length)
{
 80008b8:	b570      	push	{r4, r5, r6, lr}
 80008ba:	4604      	mov	r4, r0
  uint32_t crc = hcrc->crc_reg; // Get the current CRC value from the handle (initial or updated value)
 80008bc:	6883      	ldr	r3, [r0, #8]
  uint32_t poly = hcrc->crc_poly; // Get the CRC polynomial from the handle
 80008be:	6805      	ldr	r5, [r0, #0]

  // Iterate over each byte in the data buffer
  for (size_t i = 0; i < length; i++)
 80008c0:	440a      	add	r2, r1
 80008c2:	4291      	cmp	r1, r2
 80008c4:	d102      	bne.n	80008cc <CRC32_Calculate+0x14>
	      crc >>= 1;  // Otherwise, just shift right
	    }
	}
    }

  hcrc->crc_reg = ~crc; // Invert all the bits (final XOR step) and store it in the CRC register
 80008c6:	43d8      	mvns	r0, r3
 80008c8:	60a0      	str	r0, [r4, #8]
  return hcrc->crc_reg;  // Return the final CRC value
}
 80008ca:	bd70      	pop	{r4, r5, r6, pc}
      crc ^= data[i]; // XOR the current byte of data with the current CRC value
 80008cc:	f811 0b01 	ldrb.w	r0, [r1], #1
 80008d0:	4043      	eors	r3, r0
 80008d2:	2008      	movs	r0, #8
	  if (crc & 1)
 80008d4:	f003 0601 	and.w	r6, r3, #1
	      crc = (crc >> 1) ^ poly; // Shift right and XOR with the polynomial
 80008d8:	085b      	lsrs	r3, r3, #1
	  if (crc & 1)
 80008da:	b106      	cbz	r6, 80008de <CRC32_Calculate+0x26>
	      crc = (crc >> 1) ^ poly; // Shift right and XOR with the polynomial
 80008dc:	406b      	eors	r3, r5
      for (int j = 0; j < 8; j++)
 80008de:	3801      	subs	r0, #1
 80008e0:	d1f8      	bne.n	80008d4 <CRC32_Calculate+0x1c>
 80008e2:	e7ee      	b.n	80008c2 <CRC32_Calculate+0xa>

080008e4 <CRC32_ResetCRC>:
 * @param  hcrc: Pointer to the CRC handle structure.
 */
void
CRC32_ResetCRC (CRC_Handle_t *hcrc)
{
  hcrc->crc_reg = hcrc->crc_initval; // Reset the CRC register to the initial value specified in the handle
 80008e4:	6843      	ldr	r3, [r0, #4]
 80008e6:	6083      	str	r3, [r0, #8]
}
 80008e8:	4770      	bx	lr

080008ea <SystemClock_Config>:
 * @brief System Clock Configuration
 * @retval None
 */
void
SystemClock_Config (void)
{
 80008ea:	b500      	push	{lr}
 80008ec:	b091      	sub	sp, #68	@ 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct =
 80008ee:	2224      	movs	r2, #36	@ 0x24
 80008f0:	2100      	movs	r1, #0
 80008f2:	a807      	add	r0, sp, #28
 80008f4:	f002 fb38 	bl	8002f68 <memset>
    { 0 };
  RCC_ClkInitTypeDef RCC_ClkInitStruct =
 80008f8:	2214      	movs	r2, #20
 80008fa:	2100      	movs	r1, #0
 80008fc:	a801      	add	r0, sp, #4
 80008fe:	f002 fb33 	bl	8002f68 <memset>
    { 0 };

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000902:	2302      	movs	r3, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000904:	2101      	movs	r1, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000906:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000908:	2310      	movs	r3, #16
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig (&RCC_OscInitStruct) != HAL_OK)
 800090a:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800090c:	e9cd 130a 	strd	r1, r3, [sp, #40]	@ 0x28
  if (HAL_RCC_OscConfig (&RCC_OscInitStruct) != HAL_OK)
 8000910:	f000 fc56 	bl	80011c0 <HAL_RCC_OscConfig>
 8000914:	4601      	mov	r1, r0
 8000916:	b108      	cbz	r0, 800091c <SystemClock_Config+0x32>
  __ASM volatile ("cpsid i" : : : "memory");
 8000918:	b672      	cpsid	i
Error_Handler (void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq ();
  while (1)
 800091a:	e7fe      	b.n	800091a <SystemClock_Config+0x30>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800091c:	230f      	movs	r3, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800091e:	e9cd 0003 	strd	r0, r0, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000922:	e9cd 3001 	strd	r3, r0, [sp, #4]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000926:	9005      	str	r0, [sp, #20]
  if (HAL_RCC_ClockConfig (&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000928:	a801      	add	r0, sp, #4
 800092a:	f000 fe0b 	bl	8001544 <HAL_RCC_ClockConfig>
 800092e:	b108      	cbz	r0, 8000934 <SystemClock_Config+0x4a>
 8000930:	b672      	cpsid	i
  while (1)
 8000932:	e7fe      	b.n	8000932 <SystemClock_Config+0x48>
}
 8000934:	b011      	add	sp, #68	@ 0x44
 8000936:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800093c <main>:
{
 800093c:	b570      	push	{r4, r5, r6, lr}
  huart1.Init.BaudRate = 115200;
 800093e:	f44f 35e1 	mov.w	r5, #115200	@ 0x1c200
{
 8000942:	b096      	sub	sp, #88	@ 0x58
  HAL_Init ();
 8000944:	f000 f99e 	bl	8000c84 <HAL_Init>
  BL_Init ();
 8000948:	f7ff fe0c 	bl	8000564 <BL_Init>
  SystemClock_Config ();
 800094c:	f7ff ffcd 	bl	80008ea <SystemClock_Config>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000950:	4b38      	ldr	r3, [pc, #224]	@ (8000a34 <main+0xf8>)
  huart1.Instance = USART1;
 8000952:	4839      	ldr	r0, [pc, #228]	@ (8000a38 <main+0xfc>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000954:	699a      	ldr	r2, [r3, #24]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000956:	240c      	movs	r4, #12
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000958:	f042 0204 	orr.w	r2, r2, #4
 800095c:	619a      	str	r2, [r3, #24]
 800095e:	699a      	ldr	r2, [r3, #24]
 8000960:	f002 0204 	and.w	r2, r2, #4
 8000964:	9200      	str	r2, [sp, #0]
 8000966:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000968:	699a      	ldr	r2, [r3, #24]
 800096a:	f042 0208 	orr.w	r2, r2, #8
 800096e:	619a      	str	r2, [r3, #24]
 8000970:	699b      	ldr	r3, [r3, #24]
 8000972:	f003 0308 	and.w	r3, r3, #8
 8000976:	9301      	str	r3, [sp, #4]
 8000978:	9b01      	ldr	r3, [sp, #4]
  huart1.Init.BaudRate = 115200;
 800097a:	4b30      	ldr	r3, [pc, #192]	@ (8000a3c <main+0x100>)
 800097c:	e9c0 3500 	strd	r3, r5, [r0]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000980:	2300      	movs	r3, #0
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000982:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000986:	e9c0 4305 	strd	r4, r3, [r0, #20]
  huart1.Init.Parity = UART_PARITY_NONE;
 800098a:	6103      	str	r3, [r0, #16]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800098c:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init (&huart1) != HAL_OK)
 800098e:	f000 ff2f 	bl	80017f0 <HAL_UART_Init>
 8000992:	4603      	mov	r3, r0
 8000994:	b108      	cbz	r0, 800099a <main+0x5e>
 8000996:	b672      	cpsid	i
  while (1)
 8000998:	e7fe      	b.n	8000998 <main+0x5c>
  huart2.Instance = USART2;
 800099a:	4829      	ldr	r0, [pc, #164]	@ (8000a40 <main+0x104>)
 800099c:	4a29      	ldr	r2, [pc, #164]	@ (8000a44 <main+0x108>)
  huart2.Init.StopBits = UART_STOPBITS_1;
 800099e:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.BaudRate = 115200;
 80009a2:	e9c0 2500 	strd	r2, r5, [r0]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009a6:	e9c0 3404 	strd	r3, r4, [r0, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009aa:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_UART_Init (&huart2) != HAL_OK)
 80009ae:	f000 ff1f 	bl	80017f0 <HAL_UART_Init>
 80009b2:	4605      	mov	r5, r0
 80009b4:	b108      	cbz	r0, 80009ba <main+0x7e>
 80009b6:	b672      	cpsid	i
  while (1)
 80009b8:	e7fe      	b.n	80009b8 <main+0x7c>
  hcrc.crc_poly = DEFAULT_POLY_VAL;
 80009ba:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
  hcrc.crc_initval = DEFAULT_INIT_VAL;
 80009be:	4b22      	ldr	r3, [pc, #136]	@ (8000a48 <main+0x10c>)
  hcrc.crc_poly = DEFAULT_POLY_VAL;
 80009c0:	4a22      	ldr	r2, [pc, #136]	@ (8000a4c <main+0x110>)
      if (((HAL_GetTick () - start_time) > wait_time) && (stuck_on_menu == 0))
 80009c2:	f242 7610 	movw	r6, #10000	@ 0x2710
  hcrc.crc_poly = DEFAULT_POLY_VAL;
 80009c6:	e9c3 2100 	strd	r2, r1, [r3]
  uint32_t start_time = HAL_GetTick ();
 80009ca:	f000 f979 	bl	8000cc0 <HAL_GetTick>
 80009ce:	4604      	mov	r4, r0
  BL_SendAck (BL_ACK);
 80009d0:	20a5      	movs	r0, #165	@ 0xa5
 80009d2:	f7ff fc3d 	bl	8000250 <BL_SendAck>
      if (((HAL_GetTick () - start_time) > wait_time) && (stuck_on_menu == 0))
 80009d6:	f000 f973 	bl	8000cc0 <HAL_GetTick>
 80009da:	1b03      	subs	r3, r0, r4
 80009dc:	42b3      	cmp	r3, r6
 80009de:	d920      	bls.n	8000a22 <main+0xe6>
 80009e0:	b9fd      	cbnz	r5, 8000a22 <main+0xe6>
	  status = BL_VerifyApplication ();
 80009e2:	f7ff fbff 	bl	80001e4 <BL_VerifyApplication>
	  switch (status)
 80009e6:	2804      	cmp	r0, #4
 80009e8:	d8f5      	bhi.n	80009d6 <main+0x9a>
 80009ea:	a301      	add	r3, pc, #4	@ (adr r3, 80009f0 <main+0xb4>)
 80009ec:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
 80009f0:	08000a17 	.word	0x08000a17
 80009f4:	08000a05 	.word	0x08000a05
 80009f8:	080009d7 	.word	0x080009d7
 80009fc:	08000a05 	.word	0x08000a05
 8000a00:	08000a1f 	.word	0x08000a1f
	      Get_CurrentBL_Info (&temp_info);
 8000a04:	a802      	add	r0, sp, #8
 8000a06:	f7ff fc1b 	bl	8000240 <Get_CurrentBL_Info>
	      BL_InstallApplication ();
 8000a0a:	f7ff fc31 	bl	8000270 <BL_InstallApplication>
	      status = BL_VerifyApplication ();
 8000a0e:	f7ff fbe9 	bl	80001e4 <BL_VerifyApplication>
	      if (status == APP_VERIFIED)
 8000a12:	2800      	cmp	r0, #0
 8000a14:	d1df      	bne.n	80009d6 <main+0x9a>
		  BL_JumpToApplication (APP_START_PAGE);
 8000a16:	201b      	movs	r0, #27
 8000a18:	f7ff fd8a 	bl	8000530 <BL_JumpToApplication>
 8000a1c:	e7db      	b.n	80009d6 <main+0x9a>
	  switch (status)
 8000a1e:	2501      	movs	r5, #1
 8000a20:	e7d9      	b.n	80009d6 <main+0x9a>
	  if (BL_FetchUARTCommand () == BL_NACK)
 8000a22:	f7ff fe79 	bl	8000718 <BL_FetchUARTCommand>
 8000a26:	285a      	cmp	r0, #90	@ 0x5a
 8000a28:	d0d5      	beq.n	80009d6 <main+0x9a>
	      start_time = HAL_GetTick() ;
 8000a2a:	f000 f949 	bl	8000cc0 <HAL_GetTick>
 8000a2e:	4604      	mov	r4, r0
 8000a30:	e7d1      	b.n	80009d6 <main+0x9a>
 8000a32:	bf00      	nop
 8000a34:	40021000 	.word	0x40021000
 8000a38:	20000100 	.word	0x20000100
 8000a3c:	40013800 	.word	0x40013800
 8000a40:	200000b8 	.word	0x200000b8
 8000a44:	40004400 	.word	0x40004400
 8000a48:	20000148 	.word	0x20000148
 8000a4c:	edb88320 	.word	0xedb88320

08000a50 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a50:	4b0e      	ldr	r3, [pc, #56]	@ (8000a8c <HAL_MspInit+0x3c>)
{
 8000a52:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a54:	699a      	ldr	r2, [r3, #24]
 8000a56:	f042 0201 	orr.w	r2, r2, #1
 8000a5a:	619a      	str	r2, [r3, #24]
 8000a5c:	699a      	ldr	r2, [r3, #24]
 8000a5e:	f002 0201 	and.w	r2, r2, #1
 8000a62:	9200      	str	r2, [sp, #0]
 8000a64:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a66:	69da      	ldr	r2, [r3, #28]
 8000a68:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000a6c:	61da      	str	r2, [r3, #28]
 8000a6e:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000a70:	4a07      	ldr	r2, [pc, #28]	@ (8000a90 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a76:	9301      	str	r3, [sp, #4]
 8000a78:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000a7a:	6853      	ldr	r3, [r2, #4]
 8000a7c:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000a80:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000a84:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a86:	b002      	add	sp, #8
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	40021000 	.word	0x40021000
 8000a90:	40010000 	.word	0x40010000

08000a94 <HAL_UART_MspInit>:
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a94:	2210      	movs	r2, #16
{
 8000a96:	b510      	push	{r4, lr}
 8000a98:	4604      	mov	r4, r0
 8000a9a:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a9c:	eb0d 0002 	add.w	r0, sp, r2
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	f002 fa61 	bl	8002f68 <memset>
  if(huart->Instance==USART1)
 8000aa6:	6823      	ldr	r3, [r4, #0]
 8000aa8:	4a2d      	ldr	r2, [pc, #180]	@ (8000b60 <HAL_UART_MspInit+0xcc>)
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	d12e      	bne.n	8000b0c <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000aae:	4b2d      	ldr	r3, [pc, #180]	@ (8000b64 <HAL_UART_MspInit+0xd0>)
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab0:	2040      	movs	r0, #64	@ 0x40
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ab2:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab4:	a904      	add	r1, sp, #16
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ab6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000aba:	619a      	str	r2, [r3, #24]
 8000abc:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000abe:	2480      	movs	r4, #128	@ 0x80
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ac0:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8000ac4:	9200      	str	r2, [sp, #0]
 8000ac6:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ac8:	699a      	ldr	r2, [r3, #24]
 8000aca:	f042 0208 	orr.w	r2, r2, #8
 8000ace:	619a      	str	r2, [r3, #24]
 8000ad0:	699b      	ldr	r3, [r3, #24]
 8000ad2:	f003 0308 	and.w	r3, r3, #8
 8000ad6:	9301      	str	r3, [sp, #4]
 8000ad8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ada:	2302      	movs	r3, #2
 8000adc:	e9cd 0304 	strd	r0, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ae0:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae2:	4821      	ldr	r0, [pc, #132]	@ (8000b68 <HAL_UART_MspInit+0xd4>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ae4:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae6:	f000 fa93 	bl	8001010 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aea:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aec:	481e      	ldr	r0, [pc, #120]	@ (8000b68 <HAL_UART_MspInit+0xd4>)
 8000aee:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000af0:	e9cd 4304 	strd	r4, r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000af6:	f000 fa8b 	bl	8001010 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8000afa:	4a1c      	ldr	r2, [pc, #112]	@ (8000b6c <HAL_UART_MspInit+0xd8>)
 8000afc:	6853      	ldr	r3, [r2, #4]
 8000afe:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000b02:	f043 0304 	orr.w	r3, r3, #4
 8000b06:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b08:	b008      	add	sp, #32
 8000b0a:	bd10      	pop	{r4, pc}
  else if(huart->Instance==USART2)
 8000b0c:	4a18      	ldr	r2, [pc, #96]	@ (8000b70 <HAL_UART_MspInit+0xdc>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d1fa      	bne.n	8000b08 <HAL_UART_MspInit+0x74>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b12:	4b14      	ldr	r3, [pc, #80]	@ (8000b64 <HAL_UART_MspInit+0xd0>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b14:	a904      	add	r1, sp, #16
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b16:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b18:	4816      	ldr	r0, [pc, #88]	@ (8000b74 <HAL_UART_MspInit+0xe0>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b1a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8000b1e:	61da      	str	r2, [r3, #28]
 8000b20:	69da      	ldr	r2, [r3, #28]
 8000b22:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 8000b26:	9202      	str	r2, [sp, #8]
 8000b28:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b2a:	699a      	ldr	r2, [r3, #24]
 8000b2c:	f042 0204 	orr.w	r2, r2, #4
 8000b30:	619a      	str	r2, [r3, #24]
 8000b32:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b34:	2204      	movs	r2, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b36:	f003 0304 	and.w	r3, r3, #4
 8000b3a:	9303      	str	r3, [sp, #12]
 8000b3c:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b44:	2303      	movs	r3, #3
 8000b46:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b48:	f000 fa62 	bl	8001010 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	2108      	movs	r1, #8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b50:	4808      	ldr	r0, [pc, #32]	@ (8000b74 <HAL_UART_MspInit+0xe0>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b52:	e9cd 1304 	strd	r1, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b56:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b58:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b5a:	f000 fa59 	bl	8001010 <HAL_GPIO_Init>
}
 8000b5e:	e7d3      	b.n	8000b08 <HAL_UART_MspInit+0x74>
 8000b60:	40013800 	.word	0x40013800
 8000b64:	40021000 	.word	0x40021000
 8000b68:	40010c00 	.word	0x40010c00
 8000b6c:	40010000 	.word	0x40010000
 8000b70:	40004400 	.word	0x40004400
 8000b74:	40010800 	.word	0x40010800

08000b78 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b78:	e7fe      	b.n	8000b78 <NMI_Handler>

08000b7a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b7a:	e7fe      	b.n	8000b7a <HardFault_Handler>

08000b7c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b7c:	e7fe      	b.n	8000b7c <MemManage_Handler>

08000b7e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b7e:	e7fe      	b.n	8000b7e <BusFault_Handler>

08000b80 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b80:	e7fe      	b.n	8000b80 <UsageFault_Handler>

08000b82 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b82:	4770      	bx	lr

08000b84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8000b84:	4770      	bx	lr

08000b86 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8000b86:	4770      	bx	lr

08000b88 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b88:	f000 b88e 	b.w	8000ca8 <HAL_IncTick>

08000b8c <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b8c:	4a0b      	ldr	r2, [pc, #44]	@ (8000bbc <_sbrk+0x30>)
{
 8000b8e:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8000b90:	6811      	ldr	r1, [r2, #0]
{
 8000b92:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8000b94:	b909      	cbnz	r1, 8000b9a <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8000b96:	490a      	ldr	r1, [pc, #40]	@ (8000bc0 <_sbrk+0x34>)
 8000b98:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b9a:	6810      	ldr	r0, [r2, #0]
 8000b9c:	4909      	ldr	r1, [pc, #36]	@ (8000bc4 <_sbrk+0x38>)
 8000b9e:	4c0a      	ldr	r4, [pc, #40]	@ (8000bc8 <_sbrk+0x3c>)
 8000ba0:	4403      	add	r3, r0
 8000ba2:	1b09      	subs	r1, r1, r4
 8000ba4:	428b      	cmp	r3, r1
 8000ba6:	d906      	bls.n	8000bb6 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8000ba8:	f002 f9e6 	bl	8002f78 <__errno>
 8000bac:	230c      	movs	r3, #12
 8000bae:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8000bb0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8000bb4:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8000bb6:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8000bb8:	e7fc      	b.n	8000bb4 <_sbrk+0x28>
 8000bba:	bf00      	nop
 8000bbc:	20000154 	.word	0x20000154
 8000bc0:	200024f8 	.word	0x200024f8
 8000bc4:	20005000 	.word	0x20005000
 8000bc8:	00000400 	.word	0x00000400

08000bcc <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bcc:	4770      	bx	lr
	...

08000bd0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bd0:	f7ff fffc 	bl	8000bcc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bd4:	480b      	ldr	r0, [pc, #44]	@ (8000c04 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000bd6:	490c      	ldr	r1, [pc, #48]	@ (8000c08 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000bd8:	4a0c      	ldr	r2, [pc, #48]	@ (8000c0c <LoopFillZerobss+0x16>)
  movs r3, #0
 8000bda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bdc:	e002      	b.n	8000be4 <LoopCopyDataInit>

08000bde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000be0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000be2:	3304      	adds	r3, #4

08000be4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000be4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000be6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000be8:	d3f9      	bcc.n	8000bde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bea:	4a09      	ldr	r2, [pc, #36]	@ (8000c10 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000bec:	4c09      	ldr	r4, [pc, #36]	@ (8000c14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bf0:	e001      	b.n	8000bf6 <LoopFillZerobss>

08000bf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bf4:	3204      	adds	r2, #4

08000bf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bf8:	d3fb      	bcc.n	8000bf2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bfa:	f002 f9c3 	bl	8002f84 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bfe:	f7ff fe9d 	bl	800093c <main>
  bx lr
 8000c02:	4770      	bx	lr
  ldr r0, =_sdata
 8000c04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c08:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8000c0c:	08003bac 	.word	0x08003bac
  ldr r2, =_sbss
 8000c10:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8000c14:	200024f4 	.word	0x200024f4

08000c18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c18:	e7fe      	b.n	8000c18 <ADC1_2_IRQHandler>

08000c1a <HAL_MspDeInit>:

/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
 8000c1a:	4770      	bx	lr

08000c1c <HAL_DeInit>:
{
 8000c1c:	b510      	push	{r4, lr}
  __HAL_RCC_APB1_FORCE_RESET();
 8000c1e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
  __HAL_RCC_APB1_RELEASE_RESET();
 8000c22:	2400      	movs	r4, #0
  __HAL_RCC_APB1_FORCE_RESET();
 8000c24:	4b04      	ldr	r3, [pc, #16]	@ (8000c38 <HAL_DeInit+0x1c>)
 8000c26:	611a      	str	r2, [r3, #16]
  __HAL_RCC_APB1_RELEASE_RESET();
 8000c28:	611c      	str	r4, [r3, #16]
  __HAL_RCC_APB2_FORCE_RESET();
 8000c2a:	60da      	str	r2, [r3, #12]
  __HAL_RCC_APB2_RELEASE_RESET();
 8000c2c:	60dc      	str	r4, [r3, #12]
  HAL_MspDeInit();
 8000c2e:	f7ff fff4 	bl	8000c1a <HAL_MspDeInit>
}
 8000c32:	4620      	mov	r0, r4
 8000c34:	bd10      	pop	{r4, pc}
 8000c36:	bf00      	nop
 8000c38:	40021000 	.word	0x40021000

08000c3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c3c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c3e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c78 <HAL_InitTick+0x3c>)
{
 8000c40:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c42:	781a      	ldrb	r2, [r3, #0]
 8000c44:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c48:	fbb3 f3f2 	udiv	r3, r3, r2
 8000c4c:	4a0b      	ldr	r2, [pc, #44]	@ (8000c7c <HAL_InitTick+0x40>)
 8000c4e:	6810      	ldr	r0, [r2, #0]
 8000c50:	fbb0 f0f3 	udiv	r0, r0, r3
 8000c54:	f000 f88e 	bl	8000d74 <HAL_SYSTICK_Config>
 8000c58:	4604      	mov	r4, r0
 8000c5a:	b958      	cbnz	r0, 8000c74 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c5c:	2d0f      	cmp	r5, #15
 8000c5e:	d809      	bhi.n	8000c74 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c60:	4602      	mov	r2, r0
 8000c62:	4629      	mov	r1, r5
 8000c64:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c68:	f000 f854 	bl	8000d14 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c6c:	4620      	mov	r0, r4
 8000c6e:	4b04      	ldr	r3, [pc, #16]	@ (8000c80 <HAL_InitTick+0x44>)
 8000c70:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000c72:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000c74:	2001      	movs	r0, #1
 8000c76:	e7fc      	b.n	8000c72 <HAL_InitTick+0x36>
 8000c78:	20000028 	.word	0x20000028
 8000c7c:	20000024 	.word	0x20000024
 8000c80:	2000002c 	.word	0x2000002c

08000c84 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c84:	4a07      	ldr	r2, [pc, #28]	@ (8000ca4 <HAL_Init+0x20>)
{
 8000c86:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c88:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c8a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c8c:	f043 0310 	orr.w	r3, r3, #16
 8000c90:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c92:	f000 f82d 	bl	8000cf0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c96:	200f      	movs	r0, #15
 8000c98:	f7ff ffd0 	bl	8000c3c <HAL_InitTick>
  HAL_MspInit();
 8000c9c:	f7ff fed8 	bl	8000a50 <HAL_MspInit>
}
 8000ca0:	2000      	movs	r0, #0
 8000ca2:	bd08      	pop	{r3, pc}
 8000ca4:	40022000 	.word	0x40022000

08000ca8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000ca8:	4a03      	ldr	r2, [pc, #12]	@ (8000cb8 <HAL_IncTick+0x10>)
 8000caa:	4b04      	ldr	r3, [pc, #16]	@ (8000cbc <HAL_IncTick+0x14>)
 8000cac:	6811      	ldr	r1, [r2, #0]
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	440b      	add	r3, r1
 8000cb2:	6013      	str	r3, [r2, #0]
}
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	20000158 	.word	0x20000158
 8000cbc:	20000028 	.word	0x20000028

08000cc0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000cc0:	4b01      	ldr	r3, [pc, #4]	@ (8000cc8 <HAL_GetTick+0x8>)
 8000cc2:	6818      	ldr	r0, [r3, #0]
}
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	20000158 	.word	0x20000158

08000ccc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ccc:	b538      	push	{r3, r4, r5, lr}
 8000cce:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000cd0:	f7ff fff6 	bl	8000cc0 <HAL_GetTick>
 8000cd4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cd6:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000cd8:	bf1e      	ittt	ne
 8000cda:	4b04      	ldrne	r3, [pc, #16]	@ (8000cec <HAL_Delay+0x20>)
 8000cdc:	781b      	ldrbne	r3, [r3, #0]
 8000cde:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ce0:	f7ff ffee 	bl	8000cc0 <HAL_GetTick>
 8000ce4:	1b43      	subs	r3, r0, r5
 8000ce6:	42a3      	cmp	r3, r4
 8000ce8:	d3fa      	bcc.n	8000ce0 <HAL_Delay+0x14>
  {
  }
}
 8000cea:	bd38      	pop	{r3, r4, r5, pc}
 8000cec:	20000028 	.word	0x20000028

08000cf0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cf0:	4907      	ldr	r1, [pc, #28]	@ (8000d10 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000cf2:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cf4:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000cf6:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cfa:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8000cfe:	0412      	lsls	r2, r2, #16
 8000d00:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d04:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8000d0c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000d0e:	4770      	bx	lr
 8000d10:	e000ed00 	.word	0xe000ed00

08000d14 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d14:	4b15      	ldr	r3, [pc, #84]	@ (8000d6c <HAL_NVIC_SetPriority+0x58>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d16:	b530      	push	{r4, r5, lr}
 8000d18:	68dc      	ldr	r4, [r3, #12]
 8000d1a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d1e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d22:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d24:	2b04      	cmp	r3, #4
 8000d26:	bf28      	it	cs
 8000d28:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d2a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d2c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d30:	bf94      	ite	ls
 8000d32:	2400      	movls	r4, #0
 8000d34:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d36:	fa05 f303 	lsl.w	r3, r5, r3
 8000d3a:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d3e:	40a5      	lsls	r5, r4
 8000d40:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d44:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 8000d46:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d48:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d4c:	bfac      	ite	ge
 8000d4e:	f100 4060 	addge.w	r0, r0, #3758096384	@ 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d52:	4a07      	ldrlt	r2, [pc, #28]	@ (8000d70 <HAL_NVIC_SetPriority+0x5c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d54:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	bfab      	itete	ge
 8000d5c:	f500 4061 	addge.w	r0, r0, #57600	@ 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d60:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d64:	f880 3300 	strbge.w	r3, [r0, #768]	@ 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d68:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000d6a:	bd30      	pop	{r4, r5, pc}
 8000d6c:	e000ed00 	.word	0xe000ed00
 8000d70:	e000ed14 	.word	0xe000ed14

08000d74 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d74:	3801      	subs	r0, #1
 8000d76:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000d7a:	d20b      	bcs.n	8000d94 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d7c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d80:	21f0      	movs	r1, #240	@ 0xf0
 8000d82:	4a05      	ldr	r2, [pc, #20]	@ (8000d98 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d84:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d86:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d8a:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d8c:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d8e:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d90:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d92:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000d94:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000d96:	4770      	bx	lr
 8000d98:	e000ed00 	.word	0xe000ed00

08000d9c <FLASH_SetErrorCode>:
  uint32_t flags = 0U;
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8000d9c:	4a11      	ldr	r2, [pc, #68]	@ (8000de4 <FLASH_SetErrorCode+0x48>)
 8000d9e:	68d3      	ldr	r3, [r2, #12]
 8000da0:	f013 0310 	ands.w	r3, r3, #16
 8000da4:	d005      	beq.n	8000db2 <FLASH_SetErrorCode+0x16>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000da6:	4910      	ldr	r1, [pc, #64]	@ (8000de8 <FLASH_SetErrorCode+0x4c>)
 8000da8:	69cb      	ldr	r3, [r1, #28]
 8000daa:	f043 0302 	orr.w	r3, r3, #2
 8000dae:	61cb      	str	r3, [r1, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8000db0:	2310      	movs	r3, #16
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000db2:	68d2      	ldr	r2, [r2, #12]
 8000db4:	0750      	lsls	r0, r2, #29
 8000db6:	d506      	bpl.n	8000dc6 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8000db8:	490b      	ldr	r1, [pc, #44]	@ (8000de8 <FLASH_SetErrorCode+0x4c>)
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8000dba:	f043 0304 	orr.w	r3, r3, #4
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8000dbe:	69ca      	ldr	r2, [r1, #28]
 8000dc0:	f042 0201 	orr.w	r2, r2, #1
 8000dc4:	61ca      	str	r2, [r1, #28]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8000dc6:	4a07      	ldr	r2, [pc, #28]	@ (8000de4 <FLASH_SetErrorCode+0x48>)
 8000dc8:	69d1      	ldr	r1, [r2, #28]
 8000dca:	07c9      	lsls	r1, r1, #31
 8000dcc:	d508      	bpl.n	8000de0 <FLASH_SetErrorCode+0x44>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8000dce:	4806      	ldr	r0, [pc, #24]	@ (8000de8 <FLASH_SetErrorCode+0x4c>)
 8000dd0:	69c1      	ldr	r1, [r0, #28]
 8000dd2:	f041 0104 	orr.w	r1, r1, #4
 8000dd6:	61c1      	str	r1, [r0, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000dd8:	69d1      	ldr	r1, [r2, #28]
 8000dda:	f021 0101 	bic.w	r1, r1, #1
 8000dde:	61d1      	str	r1, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000de0:	60d3      	str	r3, [r2, #12]
}  
 8000de2:	4770      	bx	lr
 8000de4:	40022000 	.word	0x40022000
 8000de8:	20000160 	.word	0x20000160

08000dec <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000dec:	4b06      	ldr	r3, [pc, #24]	@ (8000e08 <HAL_FLASH_Unlock+0x1c>)
 8000dee:	6918      	ldr	r0, [r3, #16]
 8000df0:	f010 0080 	ands.w	r0, r0, #128	@ 0x80
 8000df4:	d007      	beq.n	8000e06 <HAL_FLASH_Unlock+0x1a>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000df6:	4a05      	ldr	r2, [pc, #20]	@ (8000e0c <HAL_FLASH_Unlock+0x20>)
 8000df8:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000dfa:	f102 3288 	add.w	r2, r2, #2290649224	@ 0x88888888
 8000dfe:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000e00:	6918      	ldr	r0, [r3, #16]
 8000e02:	f3c0 10c0 	ubfx	r0, r0, #7, #1
}
 8000e06:	4770      	bx	lr
 8000e08:	40022000 	.word	0x40022000
 8000e0c:	45670123 	.word	0x45670123

08000e10 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000e10:	4a03      	ldr	r2, [pc, #12]	@ (8000e20 <HAL_FLASH_Lock+0x10>)
}
 8000e12:	2000      	movs	r0, #0
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000e14:	6913      	ldr	r3, [r2, #16]
 8000e16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e1a:	6113      	str	r3, [r2, #16]
}
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	40022000 	.word	0x40022000

08000e24 <FLASH_WaitForLastOperation>:
{
 8000e24:	b570      	push	{r4, r5, r6, lr}
 8000e26:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 8000e28:	f7ff ff4a 	bl	8000cc0 <HAL_GetTick>
 8000e2c:	4606      	mov	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000e2e:	4c11      	ldr	r4, [pc, #68]	@ (8000e74 <FLASH_WaitForLastOperation+0x50>)
 8000e30:	68e3      	ldr	r3, [r4, #12]
 8000e32:	07d8      	lsls	r0, r3, #31
 8000e34:	d412      	bmi.n	8000e5c <FLASH_WaitForLastOperation+0x38>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000e36:	68e3      	ldr	r3, [r4, #12]
 8000e38:	0699      	lsls	r1, r3, #26
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000e3a:	bf44      	itt	mi
 8000e3c:	2320      	movmi	r3, #32
 8000e3e:	60e3      	strmi	r3, [r4, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000e40:	68e3      	ldr	r3, [r4, #12]
 8000e42:	06da      	lsls	r2, r3, #27
 8000e44:	d406      	bmi.n	8000e54 <FLASH_WaitForLastOperation+0x30>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8000e46:	69e3      	ldr	r3, [r4, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000e48:	07db      	lsls	r3, r3, #31
 8000e4a:	d403      	bmi.n	8000e54 <FLASH_WaitForLastOperation+0x30>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000e4c:	68e0      	ldr	r0, [r4, #12]
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8000e4e:	f010 0004 	ands.w	r0, r0, #4
 8000e52:	d007      	beq.n	8000e64 <FLASH_WaitForLastOperation+0x40>
    FLASH_SetErrorCode();
 8000e54:	f7ff ffa2 	bl	8000d9c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8000e58:	2001      	movs	r0, #1
 8000e5a:	e003      	b.n	8000e64 <FLASH_WaitForLastOperation+0x40>
    if (Timeout != HAL_MAX_DELAY)
 8000e5c:	1c6b      	adds	r3, r5, #1
 8000e5e:	d0e7      	beq.n	8000e30 <FLASH_WaitForLastOperation+0xc>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000e60:	b90d      	cbnz	r5, 8000e66 <FLASH_WaitForLastOperation+0x42>
        return HAL_TIMEOUT;
 8000e62:	2003      	movs	r0, #3
}
 8000e64:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000e66:	f7ff ff2b 	bl	8000cc0 <HAL_GetTick>
 8000e6a:	1b80      	subs	r0, r0, r6
 8000e6c:	42a8      	cmp	r0, r5
 8000e6e:	d9df      	bls.n	8000e30 <FLASH_WaitForLastOperation+0xc>
 8000e70:	e7f7      	b.n	8000e62 <FLASH_WaitForLastOperation+0x3e>
 8000e72:	bf00      	nop
 8000e74:	40022000 	.word	0x40022000

08000e78 <HAL_FLASH_Program>:
{
 8000e78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __HAL_LOCK(&pFlash);
 8000e7c:	f8df a094 	ldr.w	sl, [pc, #148]	@ 8000f14 <HAL_FLASH_Program+0x9c>
{
 8000e80:	461f      	mov	r7, r3
  __HAL_LOCK(&pFlash);
 8000e82:	f89a 3018 	ldrb.w	r3, [sl, #24]
{
 8000e86:	4605      	mov	r5, r0
  __HAL_LOCK(&pFlash);
 8000e88:	2b01      	cmp	r3, #1
{
 8000e8a:	4688      	mov	r8, r1
 8000e8c:	4691      	mov	r9, r2
  __HAL_LOCK(&pFlash);
 8000e8e:	d03f      	beq.n	8000f10 <HAL_FLASH_Program+0x98>
 8000e90:	2301      	movs	r3, #1
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000e92:	f24c 3050 	movw	r0, #50000	@ 0xc350
  __HAL_LOCK(&pFlash);
 8000e96:	f88a 3018 	strb.w	r3, [sl, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000e9a:	f7ff ffc3 	bl	8000e24 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8000e9e:	bb90      	cbnz	r0, 8000f06 <HAL_FLASH_Program+0x8e>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000ea0:	2d01      	cmp	r5, #1
 8000ea2:	d003      	beq.n	8000eac <HAL_FLASH_Program+0x34>
      nbiterations = 2U;
 8000ea4:	2d02      	cmp	r5, #2
 8000ea6:	bf14      	ite	ne
 8000ea8:	2504      	movne	r5, #4
 8000eaa:	2502      	moveq	r5, #2
      nbiterations = 4U;
 8000eac:	2600      	movs	r6, #0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000eae:	4633      	mov	r3, r6
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000eb0:	f8df b064 	ldr.w	fp, [pc, #100]	@ 8000f18 <HAL_FLASH_Program+0xa0>
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000eb4:	0134      	lsls	r4, r6, #4
 8000eb6:	f1c4 0120 	rsb	r1, r4, #32
 8000eba:	f1a4 0220 	sub.w	r2, r4, #32
 8000ebe:	fa07 f101 	lsl.w	r1, r7, r1
 8000ec2:	fa29 f404 	lsr.w	r4, r9, r4
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000ec6:	f8ca 301c 	str.w	r3, [sl, #28]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000eca:	430c      	orrs	r4, r1
 8000ecc:	fa27 f202 	lsr.w	r2, r7, r2
 8000ed0:	4314      	orrs	r4, r2
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000ed2:	f8db 2010 	ldr.w	r2, [fp, #16]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000ed6:	b2a4      	uxth	r4, r4
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000ed8:	f042 0201 	orr.w	r2, r2, #1
 8000edc:	f8cb 2010 	str.w	r2, [fp, #16]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000ee0:	f24c 3050 	movw	r0, #50000	@ 0xc350
  *(__IO uint16_t*)Address = Data;
 8000ee4:	f828 4016 	strh.w	r4, [r8, r6, lsl #1]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000ee8:	f7ff ff9c 	bl	8000e24 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8000eec:	f8db 2010 	ldr.w	r2, [fp, #16]
 8000ef0:	f022 0201 	bic.w	r2, r2, #1
 8000ef4:	f8cb 2010 	str.w	r2, [fp, #16]
      if (status != HAL_OK)
 8000ef8:	b928      	cbnz	r0, 8000f06 <HAL_FLASH_Program+0x8e>
    for (index = 0U; index < nbiterations; index++)
 8000efa:	3601      	adds	r6, #1
 8000efc:	b2f2      	uxtb	r2, r6
 8000efe:	4295      	cmp	r5, r2
 8000f00:	f04f 0300 	mov.w	r3, #0
 8000f04:	d8d6      	bhi.n	8000eb4 <HAL_FLASH_Program+0x3c>
  __HAL_UNLOCK(&pFlash);
 8000f06:	2300      	movs	r3, #0
 8000f08:	f88a 3018 	strb.w	r3, [sl, #24]
}
 8000f0c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  __HAL_LOCK(&pFlash);
 8000f10:	2002      	movs	r0, #2
 8000f12:	e7fb      	b.n	8000f0c <HAL_FLASH_Program+0x94>
 8000f14:	20000160 	.word	0x20000160
 8000f18:	40022000 	.word	0x40022000

08000f1c <HAL_FLASHEx_OBGetConfig>:
  *
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER;
 8000f1c:	2307      	movs	r3, #7
 8000f1e:	6003      	str	r3, [r0, #0]
  * @retval The FLASH Write Protection Option Bytes value
  */
static uint32_t FLASH_OB_GetWRP(void)
{
  /* Return the FLASH write protection Register value */
  return (uint32_t)(READ_REG(FLASH->WRPR));
 8000f20:	4b07      	ldr	r3, [pc, #28]	@ (8000f40 <HAL_FLASHEx_OBGetConfig+0x24>)
 8000f22:	6a1a      	ldr	r2, [r3, #32]
  pOBInit->WRPPage = FLASH_OB_GetWRP();
 8000f24:	6082      	str	r2, [r0, #8]
{
  uint32_t readstatus = OB_RDP_LEVEL_0;
  uint32_t tmp_reg = 0U;
  
  /* Read RDP level bits */
  tmp_reg = READ_BIT(FLASH->OBR, FLASH_OBR_RDPRT);
 8000f26:	69da      	ldr	r2, [r3, #28]

  if (tmp_reg == FLASH_OBR_RDPRT)
  {
    readstatus = OB_RDP_LEVEL_1;
 8000f28:	f012 0f02 	tst.w	r2, #2
 8000f2c:	bf0c      	ite	eq
 8000f2e:	22a5      	moveq	r2, #165	@ 0xa5
 8000f30:	2200      	movne	r2, #0
  pOBInit->RDPLevel = FLASH_OB_GetRDP();
 8000f32:	7402      	strb	r2, [r0, #16]
  *         And FLASH_OBR_BFB2(Bit5) for STM32F101xG and STM32F103xG . 
  */
static uint8_t FLASH_OB_GetUser(void)
{
  /* Return the User Option Byte */
  return (uint8_t)((READ_REG(FLASH->OBR) & FLASH_OBR_USER) >> FLASH_POSITION_IWDGSW_BIT);
 8000f34:	69db      	ldr	r3, [r3, #28]
 8000f36:	f3c3 0382 	ubfx	r3, r3, #2, #3
  pOBInit->USERConfig = FLASH_OB_GetUser();
 8000f3a:	7443      	strb	r3, [r0, #17]
}
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	40022000 	.word	0x40022000

08000f44 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000f44:	2200      	movs	r2, #0
 8000f46:	4b06      	ldr	r3, [pc, #24]	@ (8000f60 <FLASH_PageErase+0x1c>)
 8000f48:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8000f4a:	4b06      	ldr	r3, [pc, #24]	@ (8000f64 <FLASH_PageErase+0x20>)
 8000f4c:	691a      	ldr	r2, [r3, #16]
 8000f4e:	f042 0202 	orr.w	r2, r2, #2
 8000f52:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8000f54:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000f56:	691a      	ldr	r2, [r3, #16]
 8000f58:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000f5c:	611a      	str	r2, [r3, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8000f5e:	4770      	bx	lr
 8000f60:	20000160 	.word	0x20000160
 8000f64:	40022000 	.word	0x40022000

08000f68 <HAL_FLASHEx_Erase>:
{
 8000f68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 8000f6c:	4f26      	ldr	r7, [pc, #152]	@ (8001008 <HAL_FLASHEx_Erase+0xa0>)
{
 8000f6e:	4605      	mov	r5, r0
  __HAL_LOCK(&pFlash);
 8000f70:	7e3b      	ldrb	r3, [r7, #24]
{
 8000f72:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d044      	beq.n	8001002 <HAL_FLASHEx_Erase+0x9a>
 8000f78:	2401      	movs	r4, #1
 8000f7a:	763c      	strb	r4, [r7, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000f7c:	6803      	ldr	r3, [r0, #0]
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000f7e:	f24c 3050 	movw	r0, #50000	@ 0xc350
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000f82:	2b02      	cmp	r3, #2
 8000f84:	d11a      	bne.n	8000fbc <HAL_FLASHEx_Erase+0x54>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000f86:	f7ff ff4d 	bl	8000e24 <FLASH_WaitForLastOperation>
 8000f8a:	b120      	cbz	r0, 8000f96 <HAL_FLASHEx_Erase+0x2e>
  HAL_StatusTypeDef status = HAL_ERROR;
 8000f8c:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 8000f8e:	2300      	movs	r3, #0
 8000f90:	763b      	strb	r3, [r7, #24]
}
 8000f92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8000f96:	4c1d      	ldr	r4, [pc, #116]	@ (800100c <HAL_FLASHEx_Erase+0xa4>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000f98:	61f8      	str	r0, [r7, #28]
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8000f9a:	6923      	ldr	r3, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000f9c:	f24c 3050 	movw	r0, #50000	@ 0xc350
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8000fa0:	f043 0304 	orr.w	r3, r3, #4
 8000fa4:	6123      	str	r3, [r4, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000fa6:	6923      	ldr	r3, [r4, #16]
 8000fa8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000fac:	6123      	str	r3, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000fae:	f7ff ff39 	bl	8000e24 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8000fb2:	6923      	ldr	r3, [r4, #16]
 8000fb4:	f023 0304 	bic.w	r3, r3, #4
 8000fb8:	6123      	str	r3, [r4, #16]
 8000fba:	e7e8      	b.n	8000f8e <HAL_FLASHEx_Erase+0x26>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000fbc:	f7ff ff32 	bl	8000e24 <FLASH_WaitForLastOperation>
 8000fc0:	2800      	cmp	r0, #0
 8000fc2:	d1e3      	bne.n	8000f8c <HAL_FLASHEx_Erase+0x24>
        *PageError = 0xFFFFFFFFU;
 8000fc4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000fc8:	f8c8 3000 	str.w	r3, [r8]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000fcc:	4620      	mov	r0, r4
        for(address = pEraseInit->PageAddress;
 8000fce:	68ae      	ldr	r6, [r5, #8]
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8000fd0:	4c0e      	ldr	r4, [pc, #56]	@ (800100c <HAL_FLASHEx_Erase+0xa4>)
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8000fd2:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
 8000fd6:	eb03 2382 	add.w	r3, r3, r2, lsl #10
 8000fda:	42b3      	cmp	r3, r6
 8000fdc:	d9d7      	bls.n	8000f8e <HAL_FLASHEx_Erase+0x26>
          FLASH_PageErase(address);
 8000fde:	4630      	mov	r0, r6
 8000fe0:	f7ff ffb0 	bl	8000f44 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000fe4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8000fe8:	f7ff ff1c 	bl	8000e24 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8000fec:	6923      	ldr	r3, [r4, #16]
 8000fee:	f023 0302 	bic.w	r3, r3, #2
 8000ff2:	6123      	str	r3, [r4, #16]
          if (status != HAL_OK)
 8000ff4:	b110      	cbz	r0, 8000ffc <HAL_FLASHEx_Erase+0x94>
            *PageError = address;
 8000ff6:	f8c8 6000 	str.w	r6, [r8]
            break;
 8000ffa:	e7c8      	b.n	8000f8e <HAL_FLASHEx_Erase+0x26>
            address += FLASH_PAGE_SIZE)
 8000ffc:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8001000:	e7e7      	b.n	8000fd2 <HAL_FLASHEx_Erase+0x6a>
  __HAL_LOCK(&pFlash);
 8001002:	2002      	movs	r0, #2
 8001004:	e7c5      	b.n	8000f92 <HAL_FLASHEx_Erase+0x2a>
 8001006:	bf00      	nop
 8001008:	20000160 	.word	0x20000160
 800100c:	40022000 	.word	0x40022000

08001010 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001010:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001014:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 8001016:	4626      	mov	r6, r4
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001018:	f8df c188 	ldr.w	ip, [pc, #392]	@ 80011a4 <HAL_GPIO_Init+0x194>
 800101c:	4b62      	ldr	r3, [pc, #392]	@ (80011a8 <HAL_GPIO_Init+0x198>)
      switch (GPIO_Init->Mode)
 800101e:	f8df e18c 	ldr.w	lr, [pc, #396]	@ 80011ac <HAL_GPIO_Init+0x19c>
 8001022:	f8df 818c 	ldr.w	r8, [pc, #396]	@ 80011b0 <HAL_GPIO_Init+0x1a0>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001026:	680a      	ldr	r2, [r1, #0]
 8001028:	fa32 f506 	lsrs.w	r5, r2, r6
 800102c:	d102      	bne.n	8001034 <HAL_GPIO_Init+0x24>
      }
    }

	position++;
  }
}
 800102e:	b003      	add	sp, #12
 8001030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8001034:	2701      	movs	r7, #1
 8001036:	40b7      	lsls	r7, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001038:	ea02 0507 	and.w	r5, r2, r7
    if (iocurrent == ioposition)
 800103c:	ea37 0202 	bics.w	r2, r7, r2
 8001040:	d17a      	bne.n	8001138 <HAL_GPIO_Init+0x128>
      switch (GPIO_Init->Mode)
 8001042:	684a      	ldr	r2, [r1, #4]
 8001044:	2a03      	cmp	r2, #3
 8001046:	d807      	bhi.n	8001058 <HAL_GPIO_Init+0x48>
 8001048:	3a01      	subs	r2, #1
 800104a:	2a02      	cmp	r2, #2
 800104c:	f200 8083 	bhi.w	8001156 <HAL_GPIO_Init+0x146>
 8001050:	e8df f002 	tbb	[pc, r2]
 8001054:	9792      	.short	0x9792
 8001056:	9d          	.byte	0x9d
 8001057:	00          	.byte	0x00
 8001058:	2a12      	cmp	r2, #18
 800105a:	f000 8095 	beq.w	8001188 <HAL_GPIO_Init+0x178>
 800105e:	d86d      	bhi.n	800113c <HAL_GPIO_Init+0x12c>
 8001060:	2a11      	cmp	r2, #17
 8001062:	f000 808b 	beq.w	800117c <HAL_GPIO_Init+0x16c>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001066:	2dff      	cmp	r5, #255	@ 0xff
 8001068:	bf98      	it	ls
 800106a:	4681      	movls	r9, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800106c:	f04f 0b0f 	mov.w	fp, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001070:	bf88      	it	hi
 8001072:	f100 0904 	addhi.w	r9, r0, #4
 8001076:	ea4f 0286 	mov.w	r2, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800107a:	f8d9 7000 	ldr.w	r7, [r9]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800107e:	bf88      	it	hi
 8001080:	3a20      	subhi	r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001082:	fa0b fa02 	lsl.w	sl, fp, r2
 8001086:	ea27 070a 	bic.w	r7, r7, sl
 800108a:	fa04 f202 	lsl.w	r2, r4, r2
 800108e:	4317      	orrs	r7, r2
 8001090:	f8c9 7000 	str.w	r7, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001094:	f8d1 9004 	ldr.w	r9, [r1, #4]
 8001098:	f019 5f80 	tst.w	r9, #268435456	@ 0x10000000
 800109c:	d04c      	beq.n	8001138 <HAL_GPIO_Init+0x128>
        __HAL_RCC_AFIO_CLK_ENABLE();
 800109e:	f8dc 2018 	ldr.w	r2, [ip, #24]
 80010a2:	f026 0703 	bic.w	r7, r6, #3
 80010a6:	f042 0201 	orr.w	r2, r2, #1
 80010aa:	f8cc 2018 	str.w	r2, [ip, #24]
 80010ae:	f8dc 2018 	ldr.w	r2, [ip, #24]
 80010b2:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 80010b6:	f002 0201 	and.w	r2, r2, #1
 80010ba:	9201      	str	r2, [sp, #4]
 80010bc:	f507 3780 	add.w	r7, r7, #65536	@ 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80010c0:	f006 0a03 	and.w	sl, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80010c4:	9a01      	ldr	r2, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80010c6:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 80010ca:	68ba      	ldr	r2, [r7, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80010cc:	fa0b fb0a 	lsl.w	fp, fp, sl
 80010d0:	ea22 0b0b 	bic.w	fp, r2, fp
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80010d4:	4a37      	ldr	r2, [pc, #220]	@ (80011b4 <HAL_GPIO_Init+0x1a4>)
 80010d6:	4290      	cmp	r0, r2
 80010d8:	d05d      	beq.n	8001196 <HAL_GPIO_Init+0x186>
 80010da:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80010de:	4290      	cmp	r0, r2
 80010e0:	d05b      	beq.n	800119a <HAL_GPIO_Init+0x18a>
 80010e2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80010e6:	4290      	cmp	r0, r2
 80010e8:	d059      	beq.n	800119e <HAL_GPIO_Init+0x18e>
 80010ea:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80010ee:	4290      	cmp	r0, r2
 80010f0:	bf14      	ite	ne
 80010f2:	2204      	movne	r2, #4
 80010f4:	2203      	moveq	r2, #3
 80010f6:	fa02 f20a 	lsl.w	r2, r2, sl
 80010fa:	ea42 020b 	orr.w	r2, r2, fp
        AFIO->EXTICR[position >> 2u] = temp;
 80010fe:	60ba      	str	r2, [r7, #8]
          SET_BIT(EXTI->RTSR, iocurrent);
 8001100:	689a      	ldr	r2, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001102:	f419 1f80 	tst.w	r9, #1048576	@ 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8001106:	bf14      	ite	ne
 8001108:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800110a:	43aa      	biceq	r2, r5
 800110c:	609a      	str	r2, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 800110e:	68da      	ldr	r2, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001110:	f419 1f00 	tst.w	r9, #2097152	@ 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8001114:	bf14      	ite	ne
 8001116:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001118:	43aa      	biceq	r2, r5
 800111a:	60da      	str	r2, [r3, #12]
          SET_BIT(EXTI->EMR, iocurrent);
 800111c:	685a      	ldr	r2, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800111e:	f419 3f00 	tst.w	r9, #131072	@ 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8001122:	bf14      	ite	ne
 8001124:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001126:	43aa      	biceq	r2, r5
 8001128:	605a      	str	r2, [r3, #4]
          SET_BIT(EXTI->IMR, iocurrent);
 800112a:	681a      	ldr	r2, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800112c:	f419 3f80 	tst.w	r9, #65536	@ 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8001130:	bf14      	ite	ne
 8001132:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001134:	43aa      	biceq	r2, r5
 8001136:	601a      	str	r2, [r3, #0]
	position++;
 8001138:	3601      	adds	r6, #1
 800113a:	e774      	b.n	8001026 <HAL_GPIO_Init+0x16>
      switch (GPIO_Init->Mode)
 800113c:	f8df 9078 	ldr.w	r9, [pc, #120]	@ 80011b8 <HAL_GPIO_Init+0x1a8>
 8001140:	454a      	cmp	r2, r9
 8001142:	d008      	beq.n	8001156 <HAL_GPIO_Init+0x146>
 8001144:	d810      	bhi.n	8001168 <HAL_GPIO_Init+0x158>
 8001146:	f5a9 1980 	sub.w	r9, r9, #1048576	@ 0x100000
 800114a:	454a      	cmp	r2, r9
 800114c:	d003      	beq.n	8001156 <HAL_GPIO_Init+0x146>
 800114e:	4572      	cmp	r2, lr
 8001150:	d001      	beq.n	8001156 <HAL_GPIO_Init+0x146>
 8001152:	4542      	cmp	r2, r8
 8001154:	d187      	bne.n	8001066 <HAL_GPIO_Init+0x56>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001156:	688a      	ldr	r2, [r1, #8]
 8001158:	b1da      	cbz	r2, 8001192 <HAL_GPIO_Init+0x182>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800115a:	2a01      	cmp	r2, #1
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800115c:	f04f 0408 	mov.w	r4, #8
            GPIOx->BSRR = ioposition;
 8001160:	bf0c      	ite	eq
 8001162:	6107      	streq	r7, [r0, #16]
            GPIOx->BRR = ioposition;
 8001164:	6147      	strne	r7, [r0, #20]
 8001166:	e77e      	b.n	8001066 <HAL_GPIO_Init+0x56>
      switch (GPIO_Init->Mode)
 8001168:	f8df 9050 	ldr.w	r9, [pc, #80]	@ 80011bc <HAL_GPIO_Init+0x1ac>
 800116c:	454a      	cmp	r2, r9
 800116e:	d0f2      	beq.n	8001156 <HAL_GPIO_Init+0x146>
 8001170:	f509 3980 	add.w	r9, r9, #65536	@ 0x10000
 8001174:	454a      	cmp	r2, r9
 8001176:	e7ed      	b.n	8001154 <HAL_GPIO_Init+0x144>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001178:	68cc      	ldr	r4, [r1, #12]
          break;
 800117a:	e774      	b.n	8001066 <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800117c:	68cc      	ldr	r4, [r1, #12]
 800117e:	3404      	adds	r4, #4
          break;
 8001180:	e771      	b.n	8001066 <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001182:	68cc      	ldr	r4, [r1, #12]
 8001184:	3408      	adds	r4, #8
          break;
 8001186:	e76e      	b.n	8001066 <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001188:	68cc      	ldr	r4, [r1, #12]
 800118a:	340c      	adds	r4, #12
          break;
 800118c:	e76b      	b.n	8001066 <HAL_GPIO_Init+0x56>
      switch (GPIO_Init->Mode)
 800118e:	2400      	movs	r4, #0
 8001190:	e769      	b.n	8001066 <HAL_GPIO_Init+0x56>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001192:	2404      	movs	r4, #4
 8001194:	e767      	b.n	8001066 <HAL_GPIO_Init+0x56>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001196:	2200      	movs	r2, #0
 8001198:	e7ad      	b.n	80010f6 <HAL_GPIO_Init+0xe6>
 800119a:	2201      	movs	r2, #1
 800119c:	e7ab      	b.n	80010f6 <HAL_GPIO_Init+0xe6>
 800119e:	2202      	movs	r2, #2
 80011a0:	e7a9      	b.n	80010f6 <HAL_GPIO_Init+0xe6>
 80011a2:	bf00      	nop
 80011a4:	40021000 	.word	0x40021000
 80011a8:	40010400 	.word	0x40010400
 80011ac:	10210000 	.word	0x10210000
 80011b0:	10110000 	.word	0x10110000
 80011b4:	40010800 	.word	0x40010800
 80011b8:	10220000 	.word	0x10220000
 80011bc:	10310000 	.word	0x10310000

080011c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80011c4:	4605      	mov	r5, r0
 80011c6:	b338      	cbz	r0, 8001218 <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011c8:	6803      	ldr	r3, [r0, #0]
 80011ca:	07db      	lsls	r3, r3, #31
 80011cc:	d410      	bmi.n	80011f0 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011ce:	682b      	ldr	r3, [r5, #0]
 80011d0:	079f      	lsls	r7, r3, #30
 80011d2:	d45e      	bmi.n	8001292 <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011d4:	682b      	ldr	r3, [r5, #0]
 80011d6:	0719      	lsls	r1, r3, #28
 80011d8:	f100 8095 	bmi.w	8001306 <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011dc:	682b      	ldr	r3, [r5, #0]
 80011de:	075a      	lsls	r2, r3, #29
 80011e0:	f100 80c1 	bmi.w	8001366 <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80011e4:	69eb      	ldr	r3, [r5, #28]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	f040 812c 	bne.w	8001444 <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 80011ec:	2000      	movs	r0, #0
 80011ee:	e029      	b.n	8001244 <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80011f0:	4c90      	ldr	r4, [pc, #576]	@ (8001434 <HAL_RCC_OscConfig+0x274>)
 80011f2:	6863      	ldr	r3, [r4, #4]
 80011f4:	f003 030c 	and.w	r3, r3, #12
 80011f8:	2b04      	cmp	r3, #4
 80011fa:	d007      	beq.n	800120c <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80011fc:	6863      	ldr	r3, [r4, #4]
 80011fe:	f003 030c 	and.w	r3, r3, #12
 8001202:	2b08      	cmp	r3, #8
 8001204:	d10a      	bne.n	800121c <HAL_RCC_OscConfig+0x5c>
 8001206:	6863      	ldr	r3, [r4, #4]
 8001208:	03de      	lsls	r6, r3, #15
 800120a:	d507      	bpl.n	800121c <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800120c:	6823      	ldr	r3, [r4, #0]
 800120e:	039c      	lsls	r4, r3, #14
 8001210:	d5dd      	bpl.n	80011ce <HAL_RCC_OscConfig+0xe>
 8001212:	686b      	ldr	r3, [r5, #4]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d1da      	bne.n	80011ce <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 8001218:	2001      	movs	r0, #1
 800121a:	e013      	b.n	8001244 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800121c:	686b      	ldr	r3, [r5, #4]
 800121e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001222:	d112      	bne.n	800124a <HAL_RCC_OscConfig+0x8a>
 8001224:	6823      	ldr	r3, [r4, #0]
 8001226:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800122a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800122c:	f7ff fd48 	bl	8000cc0 <HAL_GetTick>
 8001230:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001232:	6823      	ldr	r3, [r4, #0]
 8001234:	0398      	lsls	r0, r3, #14
 8001236:	d4ca      	bmi.n	80011ce <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001238:	f7ff fd42 	bl	8000cc0 <HAL_GetTick>
 800123c:	1b80      	subs	r0, r0, r6
 800123e:	2864      	cmp	r0, #100	@ 0x64
 8001240:	d9f7      	bls.n	8001232 <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 8001242:	2003      	movs	r0, #3
}
 8001244:	b002      	add	sp, #8
 8001246:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800124a:	b99b      	cbnz	r3, 8001274 <HAL_RCC_OscConfig+0xb4>
 800124c:	6823      	ldr	r3, [r4, #0]
 800124e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001252:	6023      	str	r3, [r4, #0]
 8001254:	6823      	ldr	r3, [r4, #0]
 8001256:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800125a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800125c:	f7ff fd30 	bl	8000cc0 <HAL_GetTick>
 8001260:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001262:	6823      	ldr	r3, [r4, #0]
 8001264:	0399      	lsls	r1, r3, #14
 8001266:	d5b2      	bpl.n	80011ce <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001268:	f7ff fd2a 	bl	8000cc0 <HAL_GetTick>
 800126c:	1b80      	subs	r0, r0, r6
 800126e:	2864      	cmp	r0, #100	@ 0x64
 8001270:	d9f7      	bls.n	8001262 <HAL_RCC_OscConfig+0xa2>
 8001272:	e7e6      	b.n	8001242 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001274:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001278:	6823      	ldr	r3, [r4, #0]
 800127a:	d103      	bne.n	8001284 <HAL_RCC_OscConfig+0xc4>
 800127c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001280:	6023      	str	r3, [r4, #0]
 8001282:	e7cf      	b.n	8001224 <HAL_RCC_OscConfig+0x64>
 8001284:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001288:	6023      	str	r3, [r4, #0]
 800128a:	6823      	ldr	r3, [r4, #0]
 800128c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001290:	e7cb      	b.n	800122a <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001292:	4c68      	ldr	r4, [pc, #416]	@ (8001434 <HAL_RCC_OscConfig+0x274>)
 8001294:	6863      	ldr	r3, [r4, #4]
 8001296:	f013 0f0c 	tst.w	r3, #12
 800129a:	d007      	beq.n	80012ac <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800129c:	6863      	ldr	r3, [r4, #4]
 800129e:	f003 030c 	and.w	r3, r3, #12
 80012a2:	2b08      	cmp	r3, #8
 80012a4:	d110      	bne.n	80012c8 <HAL_RCC_OscConfig+0x108>
 80012a6:	6863      	ldr	r3, [r4, #4]
 80012a8:	03da      	lsls	r2, r3, #15
 80012aa:	d40d      	bmi.n	80012c8 <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012ac:	6823      	ldr	r3, [r4, #0]
 80012ae:	079b      	lsls	r3, r3, #30
 80012b0:	d502      	bpl.n	80012b8 <HAL_RCC_OscConfig+0xf8>
 80012b2:	692b      	ldr	r3, [r5, #16]
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d1af      	bne.n	8001218 <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012b8:	6823      	ldr	r3, [r4, #0]
 80012ba:	696a      	ldr	r2, [r5, #20]
 80012bc:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80012c0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80012c4:	6023      	str	r3, [r4, #0]
 80012c6:	e785      	b.n	80011d4 <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012c8:	692a      	ldr	r2, [r5, #16]
 80012ca:	4b5b      	ldr	r3, [pc, #364]	@ (8001438 <HAL_RCC_OscConfig+0x278>)
 80012cc:	b16a      	cbz	r2, 80012ea <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 80012ce:	2201      	movs	r2, #1
 80012d0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80012d2:	f7ff fcf5 	bl	8000cc0 <HAL_GetTick>
 80012d6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012d8:	6823      	ldr	r3, [r4, #0]
 80012da:	079f      	lsls	r7, r3, #30
 80012dc:	d4ec      	bmi.n	80012b8 <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012de:	f7ff fcef 	bl	8000cc0 <HAL_GetTick>
 80012e2:	1b80      	subs	r0, r0, r6
 80012e4:	2802      	cmp	r0, #2
 80012e6:	d9f7      	bls.n	80012d8 <HAL_RCC_OscConfig+0x118>
 80012e8:	e7ab      	b.n	8001242 <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 80012ea:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80012ec:	f7ff fce8 	bl	8000cc0 <HAL_GetTick>
 80012f0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012f2:	6823      	ldr	r3, [r4, #0]
 80012f4:	0798      	lsls	r0, r3, #30
 80012f6:	f57f af6d 	bpl.w	80011d4 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012fa:	f7ff fce1 	bl	8000cc0 <HAL_GetTick>
 80012fe:	1b80      	subs	r0, r0, r6
 8001300:	2802      	cmp	r0, #2
 8001302:	d9f6      	bls.n	80012f2 <HAL_RCC_OscConfig+0x132>
 8001304:	e79d      	b.n	8001242 <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001306:	69aa      	ldr	r2, [r5, #24]
 8001308:	4e4a      	ldr	r6, [pc, #296]	@ (8001434 <HAL_RCC_OscConfig+0x274>)
 800130a:	4b4b      	ldr	r3, [pc, #300]	@ (8001438 <HAL_RCC_OscConfig+0x278>)
 800130c:	b1e2      	cbz	r2, 8001348 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 800130e:	2201      	movs	r2, #1
 8001310:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 8001314:	f7ff fcd4 	bl	8000cc0 <HAL_GetTick>
 8001318:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800131a:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 800131c:	079b      	lsls	r3, r3, #30
 800131e:	d50d      	bpl.n	800133c <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001320:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8001324:	4b45      	ldr	r3, [pc, #276]	@ (800143c <HAL_RCC_OscConfig+0x27c>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	fbb3 f3f2 	udiv	r3, r3, r2
 800132c:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 800132e:	bf00      	nop
  }
  while (Delay --);
 8001330:	9b01      	ldr	r3, [sp, #4]
 8001332:	1e5a      	subs	r2, r3, #1
 8001334:	9201      	str	r2, [sp, #4]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d1f9      	bne.n	800132e <HAL_RCC_OscConfig+0x16e>
 800133a:	e74f      	b.n	80011dc <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800133c:	f7ff fcc0 	bl	8000cc0 <HAL_GetTick>
 8001340:	1b00      	subs	r0, r0, r4
 8001342:	2802      	cmp	r0, #2
 8001344:	d9e9      	bls.n	800131a <HAL_RCC_OscConfig+0x15a>
 8001346:	e77c      	b.n	8001242 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 8001348:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 800134c:	f7ff fcb8 	bl	8000cc0 <HAL_GetTick>
 8001350:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001352:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8001354:	079f      	lsls	r7, r3, #30
 8001356:	f57f af41 	bpl.w	80011dc <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800135a:	f7ff fcb1 	bl	8000cc0 <HAL_GetTick>
 800135e:	1b00      	subs	r0, r0, r4
 8001360:	2802      	cmp	r0, #2
 8001362:	d9f6      	bls.n	8001352 <HAL_RCC_OscConfig+0x192>
 8001364:	e76d      	b.n	8001242 <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001366:	4c33      	ldr	r4, [pc, #204]	@ (8001434 <HAL_RCC_OscConfig+0x274>)
 8001368:	69e3      	ldr	r3, [r4, #28]
 800136a:	00d8      	lsls	r0, r3, #3
 800136c:	d424      	bmi.n	80013b8 <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 800136e:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001370:	69e3      	ldr	r3, [r4, #28]
 8001372:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001376:	61e3      	str	r3, [r4, #28]
 8001378:	69e3      	ldr	r3, [r4, #28]
 800137a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800137e:	9300      	str	r3, [sp, #0]
 8001380:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001382:	4e2f      	ldr	r6, [pc, #188]	@ (8001440 <HAL_RCC_OscConfig+0x280>)
 8001384:	6833      	ldr	r3, [r6, #0]
 8001386:	05d9      	lsls	r1, r3, #23
 8001388:	d518      	bpl.n	80013bc <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800138a:	68eb      	ldr	r3, [r5, #12]
 800138c:	2b01      	cmp	r3, #1
 800138e:	d126      	bne.n	80013de <HAL_RCC_OscConfig+0x21e>
 8001390:	6a23      	ldr	r3, [r4, #32]
 8001392:	f043 0301 	orr.w	r3, r3, #1
 8001396:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001398:	f7ff fc92 	bl	8000cc0 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800139c:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 80013a0:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013a2:	6a23      	ldr	r3, [r4, #32]
 80013a4:	079b      	lsls	r3, r3, #30
 80013a6:	d53f      	bpl.n	8001428 <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 80013a8:	2f00      	cmp	r7, #0
 80013aa:	f43f af1b 	beq.w	80011e4 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 80013ae:	69e3      	ldr	r3, [r4, #28]
 80013b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80013b4:	61e3      	str	r3, [r4, #28]
 80013b6:	e715      	b.n	80011e4 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 80013b8:	2700      	movs	r7, #0
 80013ba:	e7e2      	b.n	8001382 <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013bc:	6833      	ldr	r3, [r6, #0]
 80013be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013c2:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80013c4:	f7ff fc7c 	bl	8000cc0 <HAL_GetTick>
 80013c8:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013ca:	6833      	ldr	r3, [r6, #0]
 80013cc:	05da      	lsls	r2, r3, #23
 80013ce:	d4dc      	bmi.n	800138a <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013d0:	f7ff fc76 	bl	8000cc0 <HAL_GetTick>
 80013d4:	eba0 0008 	sub.w	r0, r0, r8
 80013d8:	2864      	cmp	r0, #100	@ 0x64
 80013da:	d9f6      	bls.n	80013ca <HAL_RCC_OscConfig+0x20a>
 80013dc:	e731      	b.n	8001242 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013de:	b9ab      	cbnz	r3, 800140c <HAL_RCC_OscConfig+0x24c>
 80013e0:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013e2:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013e6:	f023 0301 	bic.w	r3, r3, #1
 80013ea:	6223      	str	r3, [r4, #32]
 80013ec:	6a23      	ldr	r3, [r4, #32]
 80013ee:	f023 0304 	bic.w	r3, r3, #4
 80013f2:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80013f4:	f7ff fc64 	bl	8000cc0 <HAL_GetTick>
 80013f8:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013fa:	6a23      	ldr	r3, [r4, #32]
 80013fc:	0798      	lsls	r0, r3, #30
 80013fe:	d5d3      	bpl.n	80013a8 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001400:	f7ff fc5e 	bl	8000cc0 <HAL_GetTick>
 8001404:	1b80      	subs	r0, r0, r6
 8001406:	4540      	cmp	r0, r8
 8001408:	d9f7      	bls.n	80013fa <HAL_RCC_OscConfig+0x23a>
 800140a:	e71a      	b.n	8001242 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800140c:	2b05      	cmp	r3, #5
 800140e:	6a23      	ldr	r3, [r4, #32]
 8001410:	d103      	bne.n	800141a <HAL_RCC_OscConfig+0x25a>
 8001412:	f043 0304 	orr.w	r3, r3, #4
 8001416:	6223      	str	r3, [r4, #32]
 8001418:	e7ba      	b.n	8001390 <HAL_RCC_OscConfig+0x1d0>
 800141a:	f023 0301 	bic.w	r3, r3, #1
 800141e:	6223      	str	r3, [r4, #32]
 8001420:	6a23      	ldr	r3, [r4, #32]
 8001422:	f023 0304 	bic.w	r3, r3, #4
 8001426:	e7b6      	b.n	8001396 <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001428:	f7ff fc4a 	bl	8000cc0 <HAL_GetTick>
 800142c:	1b80      	subs	r0, r0, r6
 800142e:	4540      	cmp	r0, r8
 8001430:	d9b7      	bls.n	80013a2 <HAL_RCC_OscConfig+0x1e2>
 8001432:	e706      	b.n	8001242 <HAL_RCC_OscConfig+0x82>
 8001434:	40021000 	.word	0x40021000
 8001438:	42420000 	.word	0x42420000
 800143c:	20000024 	.word	0x20000024
 8001440:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001444:	4c2a      	ldr	r4, [pc, #168]	@ (80014f0 <HAL_RCC_OscConfig+0x330>)
 8001446:	6862      	ldr	r2, [r4, #4]
 8001448:	f002 020c 	and.w	r2, r2, #12
 800144c:	2a08      	cmp	r2, #8
 800144e:	d03e      	beq.n	80014ce <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001450:	2200      	movs	r2, #0
 8001452:	2b02      	cmp	r3, #2
 8001454:	4b27      	ldr	r3, [pc, #156]	@ (80014f4 <HAL_RCC_OscConfig+0x334>)
        __HAL_RCC_PLL_DISABLE();
 8001456:	661a      	str	r2, [r3, #96]	@ 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001458:	d12c      	bne.n	80014b4 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 800145a:	f7ff fc31 	bl	8000cc0 <HAL_GetTick>
 800145e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001460:	6823      	ldr	r3, [r4, #0]
 8001462:	0199      	lsls	r1, r3, #6
 8001464:	d420      	bmi.n	80014a8 <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001466:	6a2b      	ldr	r3, [r5, #32]
 8001468:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800146c:	d105      	bne.n	800147a <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800146e:	6862      	ldr	r2, [r4, #4]
 8001470:	68a9      	ldr	r1, [r5, #8]
 8001472:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8001476:	430a      	orrs	r2, r1
 8001478:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800147a:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 800147c:	6862      	ldr	r2, [r4, #4]
 800147e:	430b      	orrs	r3, r1
 8001480:	f422 1274 	bic.w	r2, r2, #3997696	@ 0x3d0000
 8001484:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 8001486:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001488:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800148a:	4b1a      	ldr	r3, [pc, #104]	@ (80014f4 <HAL_RCC_OscConfig+0x334>)
 800148c:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 800148e:	f7ff fc17 	bl	8000cc0 <HAL_GetTick>
 8001492:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001494:	6823      	ldr	r3, [r4, #0]
 8001496:	019a      	lsls	r2, r3, #6
 8001498:	f53f aea8 	bmi.w	80011ec <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800149c:	f7ff fc10 	bl	8000cc0 <HAL_GetTick>
 80014a0:	1b40      	subs	r0, r0, r5
 80014a2:	2802      	cmp	r0, #2
 80014a4:	d9f6      	bls.n	8001494 <HAL_RCC_OscConfig+0x2d4>
 80014a6:	e6cc      	b.n	8001242 <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014a8:	f7ff fc0a 	bl	8000cc0 <HAL_GetTick>
 80014ac:	1b80      	subs	r0, r0, r6
 80014ae:	2802      	cmp	r0, #2
 80014b0:	d9d6      	bls.n	8001460 <HAL_RCC_OscConfig+0x2a0>
 80014b2:	e6c6      	b.n	8001242 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 80014b4:	f7ff fc04 	bl	8000cc0 <HAL_GetTick>
 80014b8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014ba:	6823      	ldr	r3, [r4, #0]
 80014bc:	019b      	lsls	r3, r3, #6
 80014be:	f57f ae95 	bpl.w	80011ec <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014c2:	f7ff fbfd 	bl	8000cc0 <HAL_GetTick>
 80014c6:	1b40      	subs	r0, r0, r5
 80014c8:	2802      	cmp	r0, #2
 80014ca:	d9f6      	bls.n	80014ba <HAL_RCC_OscConfig+0x2fa>
 80014cc:	e6b9      	b.n	8001242 <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	f43f aea2 	beq.w	8001218 <HAL_RCC_OscConfig+0x58>
        pll_config = RCC->CFGR;
 80014d4:	6860      	ldr	r0, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014d6:	6a2b      	ldr	r3, [r5, #32]
 80014d8:	f400 3280 	and.w	r2, r0, #65536	@ 0x10000
 80014dc:	429a      	cmp	r2, r3
 80014de:	f47f ae9b 	bne.w	8001218 <HAL_RCC_OscConfig+0x58>
 80014e2:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80014e4:	f400 1070 	and.w	r0, r0, #3932160	@ 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014e8:	1ac0      	subs	r0, r0, r3
 80014ea:	bf18      	it	ne
 80014ec:	2001      	movne	r0, #1
 80014ee:	e6a9      	b.n	8001244 <HAL_RCC_OscConfig+0x84>
 80014f0:	40021000 	.word	0x40021000
 80014f4:	42420000 	.word	0x42420000

080014f8 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 80014f8:	4a0d      	ldr	r2, [pc, #52]	@ (8001530 <HAL_RCC_GetSysClockFreq+0x38>)
 80014fa:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80014fc:	f003 010c 	and.w	r1, r3, #12
 8001500:	2908      	cmp	r1, #8
 8001502:	d112      	bne.n	800152a <HAL_RCC_GetSysClockFreq+0x32>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001504:	480b      	ldr	r0, [pc, #44]	@ (8001534 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001506:	f3c3 4183 	ubfx	r1, r3, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800150a:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800150c:	5c40      	ldrb	r0, [r0, r1]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800150e:	d509      	bpl.n	8001524 <HAL_RCC_GetSysClockFreq+0x2c>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001510:	6853      	ldr	r3, [r2, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001512:	4a09      	ldr	r2, [pc, #36]	@ (8001538 <HAL_RCC_GetSysClockFreq+0x40>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001514:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001518:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800151a:	4a08      	ldr	r2, [pc, #32]	@ (800153c <HAL_RCC_GetSysClockFreq+0x44>)
 800151c:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800151e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001522:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001524:	4b06      	ldr	r3, [pc, #24]	@ (8001540 <HAL_RCC_GetSysClockFreq+0x48>)
 8001526:	4358      	muls	r0, r3
 8001528:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 800152a:	4803      	ldr	r0, [pc, #12]	@ (8001538 <HAL_RCC_GetSysClockFreq+0x40>)
}
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	40021000 	.word	0x40021000
 8001534:	08003a57 	.word	0x08003a57
 8001538:	007a1200 	.word	0x007a1200
 800153c:	08003a55 	.word	0x08003a55
 8001540:	003d0900 	.word	0x003d0900

08001544 <HAL_RCC_ClockConfig>:
{
 8001544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001548:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800154a:	4604      	mov	r4, r0
 800154c:	b910      	cbnz	r0, 8001554 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800154e:	2001      	movs	r0, #1
}
 8001550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001554:	4a44      	ldr	r2, [pc, #272]	@ (8001668 <HAL_RCC_ClockConfig+0x124>)
 8001556:	6813      	ldr	r3, [r2, #0]
 8001558:	f003 0307 	and.w	r3, r3, #7
 800155c:	428b      	cmp	r3, r1
 800155e:	d328      	bcc.n	80015b2 <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001560:	6821      	ldr	r1, [r4, #0]
 8001562:	078e      	lsls	r6, r1, #30
 8001564:	d430      	bmi.n	80015c8 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001566:	07ca      	lsls	r2, r1, #31
 8001568:	d443      	bmi.n	80015f2 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800156a:	4a3f      	ldr	r2, [pc, #252]	@ (8001668 <HAL_RCC_ClockConfig+0x124>)
 800156c:	6813      	ldr	r3, [r2, #0]
 800156e:	f003 0307 	and.w	r3, r3, #7
 8001572:	42ab      	cmp	r3, r5
 8001574:	d865      	bhi.n	8001642 <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001576:	6822      	ldr	r2, [r4, #0]
 8001578:	4d3c      	ldr	r5, [pc, #240]	@ (800166c <HAL_RCC_ClockConfig+0x128>)
 800157a:	f012 0f04 	tst.w	r2, #4
 800157e:	d16c      	bne.n	800165a <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001580:	0713      	lsls	r3, r2, #28
 8001582:	d506      	bpl.n	8001592 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001584:	686b      	ldr	r3, [r5, #4]
 8001586:	6922      	ldr	r2, [r4, #16]
 8001588:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 800158c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001590:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001592:	f7ff ffb1 	bl	80014f8 <HAL_RCC_GetSysClockFreq>
 8001596:	686b      	ldr	r3, [r5, #4]
 8001598:	4a35      	ldr	r2, [pc, #212]	@ (8001670 <HAL_RCC_ClockConfig+0x12c>)
 800159a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800159e:	5cd3      	ldrb	r3, [r2, r3]
 80015a0:	40d8      	lsrs	r0, r3
 80015a2:	4b34      	ldr	r3, [pc, #208]	@ (8001674 <HAL_RCC_ClockConfig+0x130>)
 80015a4:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80015a6:	4b34      	ldr	r3, [pc, #208]	@ (8001678 <HAL_RCC_ClockConfig+0x134>)
 80015a8:	6818      	ldr	r0, [r3, #0]
 80015aa:	f7ff fb47 	bl	8000c3c <HAL_InitTick>
  return HAL_OK;
 80015ae:	2000      	movs	r0, #0
 80015b0:	e7ce      	b.n	8001550 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015b2:	6813      	ldr	r3, [r2, #0]
 80015b4:	f023 0307 	bic.w	r3, r3, #7
 80015b8:	430b      	orrs	r3, r1
 80015ba:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015bc:	6813      	ldr	r3, [r2, #0]
 80015be:	f003 0307 	and.w	r3, r3, #7
 80015c2:	428b      	cmp	r3, r1
 80015c4:	d1c3      	bne.n	800154e <HAL_RCC_ClockConfig+0xa>
 80015c6:	e7cb      	b.n	8001560 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015c8:	4b28      	ldr	r3, [pc, #160]	@ (800166c <HAL_RCC_ClockConfig+0x128>)
 80015ca:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015ce:	bf1e      	ittt	ne
 80015d0:	685a      	ldrne	r2, [r3, #4]
 80015d2:	f442 62e0 	orrne.w	r2, r2, #1792	@ 0x700
 80015d6:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015d8:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015da:	bf42      	ittt	mi
 80015dc:	685a      	ldrmi	r2, [r3, #4]
 80015de:	f442 5260 	orrmi.w	r2, r2, #14336	@ 0x3800
 80015e2:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015e4:	685a      	ldr	r2, [r3, #4]
 80015e6:	68a0      	ldr	r0, [r4, #8]
 80015e8:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 80015ec:	4302      	orrs	r2, r0
 80015ee:	605a      	str	r2, [r3, #4]
 80015f0:	e7b9      	b.n	8001566 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015f2:	6862      	ldr	r2, [r4, #4]
 80015f4:	4e1d      	ldr	r6, [pc, #116]	@ (800166c <HAL_RCC_ClockConfig+0x128>)
 80015f6:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015f8:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015fa:	d11a      	bne.n	8001632 <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015fc:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001600:	d0a5      	beq.n	800154e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001602:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001604:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001608:	f023 0303 	bic.w	r3, r3, #3
 800160c:	4313      	orrs	r3, r2
 800160e:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001610:	f7ff fb56 	bl	8000cc0 <HAL_GetTick>
 8001614:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001616:	6873      	ldr	r3, [r6, #4]
 8001618:	6862      	ldr	r2, [r4, #4]
 800161a:	f003 030c 	and.w	r3, r3, #12
 800161e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001622:	d0a2      	beq.n	800156a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001624:	f7ff fb4c 	bl	8000cc0 <HAL_GetTick>
 8001628:	1bc0      	subs	r0, r0, r7
 800162a:	4540      	cmp	r0, r8
 800162c:	d9f3      	bls.n	8001616 <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 800162e:	2003      	movs	r0, #3
 8001630:	e78e      	b.n	8001550 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001632:	2a02      	cmp	r2, #2
 8001634:	d102      	bne.n	800163c <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001636:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800163a:	e7e1      	b.n	8001600 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800163c:	f013 0f02 	tst.w	r3, #2
 8001640:	e7de      	b.n	8001600 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001642:	6813      	ldr	r3, [r2, #0]
 8001644:	f023 0307 	bic.w	r3, r3, #7
 8001648:	432b      	orrs	r3, r5
 800164a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800164c:	6813      	ldr	r3, [r2, #0]
 800164e:	f003 0307 	and.w	r3, r3, #7
 8001652:	42ab      	cmp	r3, r5
 8001654:	f47f af7b 	bne.w	800154e <HAL_RCC_ClockConfig+0xa>
 8001658:	e78d      	b.n	8001576 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800165a:	686b      	ldr	r3, [r5, #4]
 800165c:	68e1      	ldr	r1, [r4, #12]
 800165e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001662:	430b      	orrs	r3, r1
 8001664:	606b      	str	r3, [r5, #4]
 8001666:	e78b      	b.n	8001580 <HAL_RCC_ClockConfig+0x3c>
 8001668:	40022000 	.word	0x40022000
 800166c:	40021000 	.word	0x40021000
 8001670:	08003a45 	.word	0x08003a45
 8001674:	20000024 	.word	0x20000024
 8001678:	2000002c 	.word	0x2000002c

0800167c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800167c:	4b04      	ldr	r3, [pc, #16]	@ (8001690 <HAL_RCC_GetPCLK1Freq+0x14>)
 800167e:	4a05      	ldr	r2, [pc, #20]	@ (8001694 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001686:	5cd3      	ldrb	r3, [r2, r3]
 8001688:	4a03      	ldr	r2, [pc, #12]	@ (8001698 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800168a:	6810      	ldr	r0, [r2, #0]
}
 800168c:	40d8      	lsrs	r0, r3
 800168e:	4770      	bx	lr
 8001690:	40021000 	.word	0x40021000
 8001694:	08003a3d 	.word	0x08003a3d
 8001698:	20000024 	.word	0x20000024

0800169c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800169c:	4b04      	ldr	r3, [pc, #16]	@ (80016b0 <HAL_RCC_GetPCLK2Freq+0x14>)
 800169e:	4a05      	ldr	r2, [pc, #20]	@ (80016b4 <HAL_RCC_GetPCLK2Freq+0x18>)
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80016a6:	5cd3      	ldrb	r3, [r2, r3]
 80016a8:	4a03      	ldr	r2, [pc, #12]	@ (80016b8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80016aa:	6810      	ldr	r0, [r2, #0]
}
 80016ac:	40d8      	lsrs	r0, r3
 80016ae:	4770      	bx	lr
 80016b0:	40021000 	.word	0x40021000
 80016b4:	08003a3d 	.word	0x08003a3d
 80016b8:	20000024 	.word	0x20000024

080016bc <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80016bc:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80016be:	f102 030c 	add.w	r3, r2, #12
 80016c2:	e853 3f00 	ldrex	r3, [r3]
 80016c6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80016ca:	320c      	adds	r2, #12
 80016cc:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 80016d0:	6802      	ldr	r2, [r0, #0]
 80016d2:	2900      	cmp	r1, #0
 80016d4:	d1f2      	bne.n	80016bc <UART_EndRxTransfer>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80016d6:	f102 0314 	add.w	r3, r2, #20
 80016da:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80016de:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80016e2:	f102 0c14 	add.w	ip, r2, #20
 80016e6:	e84c 3100 	strex	r1, r3, [ip]
 80016ea:	2900      	cmp	r1, #0
 80016ec:	d1f3      	bne.n	80016d6 <UART_EndRxTransfer+0x1a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80016ee:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d10b      	bne.n	800170c <UART_EndRxTransfer+0x50>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80016f4:	f102 030c 	add.w	r3, r2, #12
 80016f8:	e853 3f00 	ldrex	r3, [r3]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80016fc:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001700:	f102 0c0c 	add.w	ip, r2, #12
 8001704:	e84c 3100 	strex	r1, r3, [ip]
 8001708:	2900      	cmp	r1, #0
 800170a:	d1f3      	bne.n	80016f4 <UART_EndRxTransfer+0x38>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800170c:	2320      	movs	r3, #32
 800170e:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001712:	2300      	movs	r3, #0
 8001714:	6303      	str	r3, [r0, #48]	@ 0x30
}
 8001716:	4770      	bx	lr

08001718 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001718:	b510      	push	{r4, lr}
 800171a:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800171c:	6803      	ldr	r3, [r0, #0]
 800171e:	68c1      	ldr	r1, [r0, #12]
 8001720:	691a      	ldr	r2, [r3, #16]
 8001722:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8001726:	430a      	orrs	r2, r1
 8001728:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800172a:	6882      	ldr	r2, [r0, #8]
 800172c:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 800172e:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001730:	4302      	orrs	r2, r0
 8001732:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8001734:	f421 51b0 	bic.w	r1, r1, #5632	@ 0x1600
 8001738:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800173c:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 800173e:	430a      	orrs	r2, r1
 8001740:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001742:	695a      	ldr	r2, [r3, #20]
 8001744:	69a1      	ldr	r1, [r4, #24]
 8001746:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800174a:	430a      	orrs	r2, r1
 800174c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800174e:	4a0e      	ldr	r2, [pc, #56]	@ (8001788 <UART_SetConfig+0x70>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d115      	bne.n	8001780 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001754:	f7ff ffa2 	bl	800169c <HAL_RCC_GetPCLK2Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001758:	2319      	movs	r3, #25
 800175a:	4343      	muls	r3, r0
 800175c:	6862      	ldr	r2, [r4, #4]
 800175e:	6820      	ldr	r0, [r4, #0]
 8001760:	0092      	lsls	r2, r2, #2
 8001762:	fbb3 f3f2 	udiv	r3, r3, r2
 8001766:	2264      	movs	r2, #100	@ 0x64
 8001768:	fbb3 f1f2 	udiv	r1, r3, r2
 800176c:	fb02 3311 	mls	r3, r2, r1, r3
 8001770:	011b      	lsls	r3, r3, #4
 8001772:	3332      	adds	r3, #50	@ 0x32
 8001774:	fbb3 f3f2 	udiv	r3, r3, r2
 8001778:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800177c:	6083      	str	r3, [r0, #8]
#endif /* USART_CR1_OVER8 */
}
 800177e:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8001780:	f7ff ff7c 	bl	800167c <HAL_RCC_GetPCLK1Freq>
 8001784:	e7e8      	b.n	8001758 <UART_SetConfig+0x40>
 8001786:	bf00      	nop
 8001788:	40013800 	.word	0x40013800

0800178c <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
 800178c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800178e:	4605      	mov	r5, r0
 8001790:	460c      	mov	r4, r1
 8001792:	4617      	mov	r7, r2
 8001794:	461e      	mov	r6, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001796:	682a      	ldr	r2, [r5, #0]
 8001798:	6813      	ldr	r3, [r2, #0]
 800179a:	ea34 0303 	bics.w	r3, r4, r3
 800179e:	d101      	bne.n	80017a4 <UART_WaitOnFlagUntilTimeout.constprop.0+0x18>
  return HAL_OK;
 80017a0:	2000      	movs	r0, #0
 80017a2:	e021      	b.n	80017e8 <UART_WaitOnFlagUntilTimeout.constprop.0+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 80017a4:	1c70      	adds	r0, r6, #1
 80017a6:	d0f7      	beq.n	8001798 <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80017a8:	f7ff fa8a 	bl	8000cc0 <HAL_GetTick>
 80017ac:	1bc0      	subs	r0, r0, r7
 80017ae:	4286      	cmp	r6, r0
 80017b0:	d31c      	bcc.n	80017ec <UART_WaitOnFlagUntilTimeout.constprop.0+0x60>
 80017b2:	b1de      	cbz	r6, 80017ec <UART_WaitOnFlagUntilTimeout.constprop.0+0x60>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80017b4:	682b      	ldr	r3, [r5, #0]
 80017b6:	68da      	ldr	r2, [r3, #12]
 80017b8:	0751      	lsls	r1, r2, #29
 80017ba:	d5ec      	bpl.n	8001796 <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
 80017bc:	2c80      	cmp	r4, #128	@ 0x80
 80017be:	d0ea      	beq.n	8001796 <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
 80017c0:	2c40      	cmp	r4, #64	@ 0x40
 80017c2:	d0e8      	beq.n	8001796 <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	0712      	lsls	r2, r2, #28
 80017c8:	d5e5      	bpl.n	8001796 <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
          __HAL_UART_CLEAR_OREFLAG(huart);
 80017ca:	2400      	movs	r4, #0
 80017cc:	9401      	str	r4, [sp, #4]
 80017ce:	681a      	ldr	r2, [r3, #0]
          UART_EndRxTransfer(huart);
 80017d0:	4628      	mov	r0, r5
          __HAL_UART_CLEAR_OREFLAG(huart);
 80017d2:	9201      	str	r2, [sp, #4]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	9301      	str	r3, [sp, #4]
 80017d8:	9b01      	ldr	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 80017da:	f7ff ff6f 	bl	80016bc <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80017de:	2308      	movs	r3, #8
          return HAL_ERROR;
 80017e0:	2001      	movs	r0, #1
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80017e2:	646b      	str	r3, [r5, #68]	@ 0x44
          __HAL_UNLOCK(huart);
 80017e4:	f885 4040 	strb.w	r4, [r5, #64]	@ 0x40
}
 80017e8:	b003      	add	sp, #12
 80017ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 80017ec:	2003      	movs	r0, #3
 80017ee:	e7fb      	b.n	80017e8 <UART_WaitOnFlagUntilTimeout.constprop.0+0x5c>

080017f0 <HAL_UART_Init>:
{
 80017f0:	b510      	push	{r4, lr}
  if (huart == NULL)
 80017f2:	4604      	mov	r4, r0
 80017f4:	b348      	cbz	r0, 800184a <HAL_UART_Init+0x5a>
  if (huart->gState == HAL_UART_STATE_RESET)
 80017f6:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 80017fa:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80017fe:	b91b      	cbnz	r3, 8001808 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001800:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8001804:	f7ff f946 	bl	8000a94 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8001808:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 800180a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800180c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8001810:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8001812:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8001814:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001818:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800181a:	f7ff ff7d 	bl	8001718 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800181e:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001820:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001822:	691a      	ldr	r2, [r3, #16]
 8001824:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001828:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800182a:	695a      	ldr	r2, [r3, #20]
 800182c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001830:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001832:	68da      	ldr	r2, [r3, #12]
 8001834:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001838:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800183a:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800183c:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800183e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001842:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001846:	6360      	str	r0, [r4, #52]	@ 0x34
}
 8001848:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800184a:	2001      	movs	r0, #1
 800184c:	e7fc      	b.n	8001848 <HAL_UART_Init+0x58>

0800184e <HAL_UART_Transmit>:
{
 800184e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001852:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8001854:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 8001858:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 800185a:	2b20      	cmp	r3, #32
{
 800185c:	460e      	mov	r6, r1
 800185e:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8001860:	d13f      	bne.n	80018e2 <HAL_UART_Transmit+0x94>
    if ((pData == NULL) || (Size == 0U))
 8001862:	2900      	cmp	r1, #0
 8001864:	d03f      	beq.n	80018e6 <HAL_UART_Transmit+0x98>
 8001866:	2a00      	cmp	r2, #0
 8001868:	d03d      	beq.n	80018e6 <HAL_UART_Transmit+0x98>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800186a:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800186c:	2500      	movs	r5, #0
 800186e:	6445      	str	r5, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001870:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    tickstart = HAL_GetTick();
 8001874:	f7ff fa24 	bl	8000cc0 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001878:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 800187a:	4681      	mov	r9, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800187c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    huart->TxXferSize = Size;
 8001880:	84a7      	strh	r7, [r4, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001882:	84e7      	strh	r7, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001884:	d103      	bne.n	800188e <HAL_UART_Transmit+0x40>
 8001886:	6923      	ldr	r3, [r4, #16]
 8001888:	b90b      	cbnz	r3, 800188e <HAL_UART_Transmit+0x40>
 800188a:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 800188c:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 800188e:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8001890:	b29b      	uxth	r3, r3
 8001892:	b953      	cbnz	r3, 80018aa <HAL_UART_Transmit+0x5c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001894:	4643      	mov	r3, r8
 8001896:	464a      	mov	r2, r9
 8001898:	2140      	movs	r1, #64	@ 0x40
 800189a:	4620      	mov	r0, r4
 800189c:	f7ff ff76 	bl	800178c <UART_WaitOnFlagUntilTimeout.constprop.0>
 80018a0:	2320      	movs	r3, #32
 80018a2:	b950      	cbnz	r0, 80018ba <HAL_UART_Transmit+0x6c>
    huart->gState = HAL_UART_STATE_READY;
 80018a4:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 80018a8:	e00a      	b.n	80018c0 <HAL_UART_Transmit+0x72>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80018aa:	4643      	mov	r3, r8
 80018ac:	464a      	mov	r2, r9
 80018ae:	2180      	movs	r1, #128	@ 0x80
 80018b0:	4620      	mov	r0, r4
 80018b2:	f7ff ff6b 	bl	800178c <UART_WaitOnFlagUntilTimeout.constprop.0>
 80018b6:	b128      	cbz	r0, 80018c4 <HAL_UART_Transmit+0x76>
        huart->gState = HAL_UART_STATE_READY;
 80018b8:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 80018ba:	2003      	movs	r0, #3
        huart->gState = HAL_UART_STATE_READY;
 80018bc:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
}
 80018c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80018c4:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 80018c6:	b94e      	cbnz	r6, 80018dc <HAL_UART_Transmit+0x8e>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80018c8:	f835 3b02 	ldrh.w	r3, [r5], #2
 80018cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80018d0:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 80018d2:	8ce1      	ldrh	r1, [r4, #38]	@ 0x26
 80018d4:	3901      	subs	r1, #1
 80018d6:	b289      	uxth	r1, r1
 80018d8:	84e1      	strh	r1, [r4, #38]	@ 0x26
 80018da:	e7d8      	b.n	800188e <HAL_UART_Transmit+0x40>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80018dc:	f816 3b01 	ldrb.w	r3, [r6], #1
 80018e0:	e7f6      	b.n	80018d0 <HAL_UART_Transmit+0x82>
    return HAL_BUSY;
 80018e2:	2002      	movs	r0, #2
 80018e4:	e7ec      	b.n	80018c0 <HAL_UART_Transmit+0x72>
      return  HAL_ERROR;
 80018e6:	2001      	movs	r0, #1
 80018e8:	e7ea      	b.n	80018c0 <HAL_UART_Transmit+0x72>

080018ea <HAL_UART_Receive>:
{
 80018ea:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80018ee:	461f      	mov	r7, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 80018f0:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
{
 80018f4:	4604      	mov	r4, r0
  if (huart->RxState == HAL_UART_STATE_READY)
 80018f6:	2b20      	cmp	r3, #32
{
 80018f8:	460e      	mov	r6, r1
 80018fa:	4691      	mov	r9, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 80018fc:	d148      	bne.n	8001990 <HAL_UART_Receive+0xa6>
    if ((pData == NULL) || (Size == 0U))
 80018fe:	2900      	cmp	r1, #0
 8001900:	d048      	beq.n	8001994 <HAL_UART_Receive+0xaa>
 8001902:	2a00      	cmp	r2, #0
 8001904:	d046      	beq.n	8001994 <HAL_UART_Receive+0xaa>
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001906:	2322      	movs	r3, #34	@ 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001908:	2500      	movs	r5, #0
 800190a:	6445      	str	r5, [r0, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800190c:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001910:	6305      	str	r5, [r0, #48]	@ 0x30
    tickstart = HAL_GetTick();
 8001912:	f7ff f9d5 	bl	8000cc0 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001916:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8001918:	4680      	mov	r8, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800191a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    huart->RxXferSize = Size;
 800191e:	f8a4 902c 	strh.w	r9, [r4, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8001922:	f8a4 902e 	strh.w	r9, [r4, #46]	@ 0x2e
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001926:	d103      	bne.n	8001930 <HAL_UART_Receive+0x46>
 8001928:	6923      	ldr	r3, [r4, #16]
 800192a:	b90b      	cbnz	r3, 8001930 <HAL_UART_Receive+0x46>
 800192c:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 800192e:	461e      	mov	r6, r3
    while (huart->RxXferCount > 0U)
 8001930:	8de0      	ldrh	r0, [r4, #46]	@ 0x2e
 8001932:	b280      	uxth	r0, r0
 8001934:	b918      	cbnz	r0, 800193e <HAL_UART_Receive+0x54>
    huart->RxState = HAL_UART_STATE_READY;
 8001936:	2320      	movs	r3, #32
 8001938:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    return HAL_OK;
 800193c:	e00a      	b.n	8001954 <HAL_UART_Receive+0x6a>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800193e:	463b      	mov	r3, r7
 8001940:	4642      	mov	r2, r8
 8001942:	2120      	movs	r1, #32
 8001944:	4620      	mov	r0, r4
 8001946:	f7ff ff21 	bl	800178c <UART_WaitOnFlagUntilTimeout.constprop.0>
 800194a:	b128      	cbz	r0, 8001958 <HAL_UART_Receive+0x6e>
        huart->RxState = HAL_UART_STATE_READY;
 800194c:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 800194e:	2003      	movs	r0, #3
        huart->RxState = HAL_UART_STATE_READY;
 8001950:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
}
 8001954:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8001958:	6823      	ldr	r3, [r4, #0]
      if (pdata8bits == NULL)
 800195a:	b94e      	cbnz	r6, 8001970 <HAL_UART_Receive+0x86>
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001962:	f825 3b02 	strh.w	r3, [r5], #2
      huart->RxXferCount--;
 8001966:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8001968:	3b01      	subs	r3, #1
 800196a:	b29b      	uxth	r3, r3
 800196c:	85e3      	strh	r3, [r4, #46]	@ 0x2e
 800196e:	e7df      	b.n	8001930 <HAL_UART_Receive+0x46>
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001970:	68a2      	ldr	r2, [r4, #8]
 8001972:	f5b2 5f80 	cmp.w	r2, #4096	@ 0x1000
 8001976:	d002      	beq.n	800197e <HAL_UART_Receive+0x94>
 8001978:	b932      	cbnz	r2, 8001988 <HAL_UART_Receive+0x9e>
 800197a:	6922      	ldr	r2, [r4, #16]
 800197c:	b922      	cbnz	r2, 8001988 <HAL_UART_Receive+0x9e>
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800197e:	6859      	ldr	r1, [r3, #4]
 8001980:	b2c9      	uxtb	r1, r1
 8001982:	f806 1b01 	strb.w	r1, [r6], #1
        pdata8bits++;
 8001986:	e7ee      	b.n	8001966 <HAL_UART_Receive+0x7c>
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001988:	6859      	ldr	r1, [r3, #4]
 800198a:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 800198e:	e7f8      	b.n	8001982 <HAL_UART_Receive+0x98>
    return HAL_BUSY;
 8001990:	2002      	movs	r0, #2
 8001992:	e7df      	b.n	8001954 <HAL_UART_Receive+0x6a>
      return  HAL_ERROR;
 8001994:	2001      	movs	r0, #1
 8001996:	e7dd      	b.n	8001954 <HAL_UART_Receive+0x6a>

08001998 <aes_gen_tables>:
#define MUL(x,y) ( ( (x) && (y) ) ? pow[(log[(x)]+log[(y)]) % 255] : 0 )

static int aes_init_done = 0;

static void aes_gen_tables( void )
{
 8001998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800199c:	f6ad 0d1c 	subw	sp, sp, #2076	@ 0x81c
 80019a0:	ad06      	add	r5, sp, #24
    int log[256];

    /*
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
 80019a2:	2301      	movs	r3, #1
 80019a4:	2200      	movs	r2, #0
 80019a6:	462c      	mov	r4, r5
    {
        pow[i] = x;
        log[x] = i;
 80019a8:	f50d 6083 	add.w	r0, sp, #1048	@ 0x418
        x = MBEDTLS_BYTE_0( x ^ XTIME( x ) );
 80019ac:	f013 0f80 	tst.w	r3, #128	@ 0x80
        log[x] = i;
 80019b0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        x = MBEDTLS_BYTE_0( x ^ XTIME( x ) );
 80019b4:	b259      	sxtb	r1, r3
 80019b6:	f343 0606 	sbfx	r6, r3, #0, #7
        pow[i] = x;
 80019ba:	f845 3b04 	str.w	r3, [r5], #4
        x = MBEDTLS_BYTE_0( x ^ XTIME( x ) );
 80019be:	bf0c      	ite	eq
 80019c0:	2300      	moveq	r3, #0
 80019c2:	231b      	movne	r3, #27
 80019c4:	ea81 0146 	eor.w	r1, r1, r6, lsl #1
    for( i = 0, x = 1; i < 256; i++ )
 80019c8:	3201      	adds	r2, #1
        x = MBEDTLS_BYTE_0( x ^ XTIME( x ) );
 80019ca:	404b      	eors	r3, r1
    for( i = 0, x = 1; i < 256; i++ )
 80019cc:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
        x = MBEDTLS_BYTE_0( x ^ XTIME( x ) );
 80019d0:	b2db      	uxtb	r3, r3
    for( i = 0, x = 1; i < 256; i++ )
 80019d2:	d1eb      	bne.n	80019ac <aes_gen_tables+0x14>
    }

    /*
     * calculate the round constants
     */
    for( i = 0, x = 1; i < 10; i++ )
 80019d4:	2301      	movs	r3, #1
 80019d6:	2200      	movs	r2, #0
 80019d8:	496c      	ldr	r1, [pc, #432]	@ (8001b8c <aes_gen_tables+0x1f4>)
    {
        RCON[i] = (uint32_t) x;
        x = MBEDTLS_BYTE_0( XTIME( x ) );
 80019da:	f013 0f80 	tst.w	r3, #128	@ 0x80
        RCON[i] = (uint32_t) x;
 80019de:	f841 3b04 	str.w	r3, [r1], #4
        x = MBEDTLS_BYTE_0( XTIME( x ) );
 80019e2:	f343 0506 	sbfx	r5, r3, #0, #7
 80019e6:	bf0c      	ite	eq
 80019e8:	2300      	moveq	r3, #0
 80019ea:	231b      	movne	r3, #27
    for( i = 0, x = 1; i < 10; i++ )
 80019ec:	3201      	adds	r2, #1
        x = MBEDTLS_BYTE_0( XTIME( x ) );
 80019ee:	ea83 0345 	eor.w	r3, r3, r5, lsl #1
    for( i = 0, x = 1; i < 10; i++ )
 80019f2:	2a0a      	cmp	r2, #10
        x = MBEDTLS_BYTE_0( XTIME( x ) );
 80019f4:	b2db      	uxtb	r3, r3
    for( i = 0, x = 1; i < 10; i++ )
 80019f6:	d1f0      	bne.n	80019da <aes_gen_tables+0x42>
    }

    /*
     * generate the forward and reverse S-boxes
     */
    FSb[0x00] = 0x63;
 80019f8:	2363      	movs	r3, #99	@ 0x63
 80019fa:	4a65      	ldr	r2, [pc, #404]	@ (8001b90 <aes_gen_tables+0x1f8>)
 80019fc:	4686      	mov	lr, r0
 80019fe:	7013      	strb	r3, [r2, #0]
    RSb[0x63] = 0x00;
 8001a00:	2300      	movs	r3, #0
 8001a02:	4694      	mov	ip, r2

    for( i = 1; i < 256; i++ )
 8001a04:	2601      	movs	r6, #1
    RSb[0x63] = 0x00;
 8001a06:	4f63      	ldr	r7, [pc, #396]	@ (8001b94 <aes_gen_tables+0x1fc>)
 8001a08:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
    {
        x = pow[255 - log[i]];
 8001a0c:	f85e 3f04 	ldr.w	r3, [lr, #4]!
 8001a10:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8001a14:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]

        y  = x; y = MBEDTLS_BYTE_0( ( y << 1 ) | ( y >> 7 ) );
 8001a18:	11eb      	asrs	r3, r5, #7
 8001a1a:	ea43 0345 	orr.w	r3, r3, r5, lsl #1
 8001a1e:	b2db      	uxtb	r3, r3
        x ^= y; y = MBEDTLS_BYTE_0( ( y << 1 ) | ( y >> 7 ) );
 8001a20:	09d9      	lsrs	r1, r3, #7
 8001a22:	ea41 0143 	orr.w	r1, r1, r3, lsl #1
 8001a26:	405d      	eors	r5, r3
 8001a28:	b2c9      	uxtb	r1, r1
        x ^= y; y = MBEDTLS_BYTE_0( ( y << 1 ) | ( y >> 7 ) );
 8001a2a:	4069      	eors	r1, r5
 8001a2c:	099d      	lsrs	r5, r3, #6
 8001a2e:	ea45 0583 	orr.w	r5, r5, r3, lsl #2
 8001a32:	b2ed      	uxtb	r5, r5
        x ^= y; y = MBEDTLS_BYTE_0( ( y << 1 ) | ( y >> 7 ) );
 8001a34:	404d      	eors	r5, r1
        x ^= y ^ 0x63;
 8001a36:	0959      	lsrs	r1, r3, #5
 8001a38:	ea41 03c3 	orr.w	r3, r1, r3, lsl #3
 8001a3c:	f083 0363 	eor.w	r3, r3, #99	@ 0x63
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	406b      	eors	r3, r5

        FSb[i] = (unsigned char) x;
        RSb[x] = (unsigned char) i;
 8001a44:	54fe      	strb	r6, [r7, r3]
    for( i = 1; i < 256; i++ )
 8001a46:	3601      	adds	r6, #1
 8001a48:	f5b6 7f80 	cmp.w	r6, #256	@ 0x100
        FSb[i] = (unsigned char) x;
 8001a4c:	f80c 3f01 	strb.w	r3, [ip, #1]!
    for( i = 1; i < 256; i++ )
 8001a50:	d1dc      	bne.n	8001a0c <aes_gen_tables+0x74>
        FT3[i] = ROTL8( FT2[i] );
#endif /* !MBEDTLS_AES_FEWER_TABLES */

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 8001a52:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8001a54:	f8df c140 	ldr.w	ip, [pc, #320]	@ 8001b98 <aes_gen_tables+0x200>
 8001a58:	9302      	str	r3, [sp, #8]
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 8001a5a:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8001a5c:	4f4f      	ldr	r7, [pc, #316]	@ (8001b9c <aes_gen_tables+0x204>)
 8001a5e:	9303      	str	r3, [sp, #12]
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 8001a60:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8001a62:	4e4f      	ldr	r6, [pc, #316]	@ (8001ba0 <aes_gen_tables+0x208>)
 8001a64:	9304      	str	r3, [sp, #16]
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
 8001a66:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 8001a68:	20ff      	movs	r0, #255	@ 0xff
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
 8001a6a:	9305      	str	r3, [sp, #20]
 8001a6c:	4b4d      	ldr	r3, [pc, #308]	@ (8001ba4 <aes_gen_tables+0x20c>)
 8001a6e:	f8df a138 	ldr.w	sl, [pc, #312]	@ 8001ba8 <aes_gen_tables+0x210>
 8001a72:	9301      	str	r3, [sp, #4]
 8001a74:	4b4d      	ldr	r3, [pc, #308]	@ (8001bac <aes_gen_tables+0x214>)
 8001a76:	f8df 9138 	ldr.w	r9, [pc, #312]	@ 8001bb0 <aes_gen_tables+0x218>
 8001a7a:	f8df 8138 	ldr.w	r8, [pc, #312]	@ 8001bb4 <aes_gen_tables+0x21c>
 8001a7e:	f8df e114 	ldr.w	lr, [pc, #276]	@ 8001b94 <aes_gen_tables+0x1fc>
 8001a82:	9300      	str	r3, [sp, #0]
        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 8001a84:	f50d 6583 	add.w	r5, sp, #1048	@ 0x418
        x = FSb[i];
 8001a88:	f812 3b01 	ldrb.w	r3, [r2], #1
        y = MBEDTLS_BYTE_0( XTIME( x ) );
 8001a8c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001a90:	bf14      	ite	ne
 8001a92:	211b      	movne	r1, #27
 8001a94:	2100      	moveq	r1, #0
 8001a96:	f343 0406 	sbfx	r4, r3, #0, #7
 8001a9a:	ea81 0144 	eor.w	r1, r1, r4, lsl #1
 8001a9e:	b2c9      	uxtb	r1, r1
                 ( (uint32_t) x <<  8 ) ^
 8001aa0:	eb03 2403 	add.w	r4, r3, r3, lsl #8
 8001aa4:	ea41 2404 	orr.w	r4, r1, r4, lsl #8
                 ( (uint32_t) z << 24 );
 8001aa8:	404b      	eors	r3, r1
        FT0[i] = ( (uint32_t) y       ) ^
 8001aaa:	9900      	ldr	r1, [sp, #0]
                 ( (uint32_t) x << 16 ) ^
 8001aac:	ea84 6303 	eor.w	r3, r4, r3, lsl #24
        FT0[i] = ( (uint32_t) y       ) ^
 8001ab0:	f841 3b04 	str.w	r3, [r1], #4
 8001ab4:	9100      	str	r1, [sp, #0]
        FT1[i] = ROTL8( FT0[i] );
 8001ab6:	ea4f 6133 	mov.w	r1, r3, ror #24
 8001aba:	f84a 1b04 	str.w	r1, [sl], #4
        FT2[i] = ROTL8( FT1[i] );
 8001abe:	ea4f 4133 	mov.w	r1, r3, ror #16
        FT3[i] = ROTL8( FT2[i] );
 8001ac2:	ea4f 2333 	mov.w	r3, r3, ror #8
 8001ac6:	f848 3b04 	str.w	r3, [r8], #4
        x = RSb[i];
 8001aca:	f81e 3b01 	ldrb.w	r3, [lr], #1
        FT2[i] = ROTL8( FT1[i] );
 8001ace:	f849 1b04 	str.w	r1, [r9], #4
        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d054      	beq.n	8001b80 <aes_gen_tables+0x1e8>
 8001ad6:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 8001ada:	9c02      	ldr	r4, [sp, #8]
 8001adc:	440c      	add	r4, r1
 8001ade:	fb94 fbf0 	sdiv	fp, r4, r0
 8001ae2:	ebcb 2b0b 	rsb	fp, fp, fp, lsl #8
 8001ae6:	eba4 040b 	sub.w	r4, r4, fp
 8001aea:	f10d 0b18 	add.w	fp, sp, #24
 8001aee:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 8001af2:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8001af6:	4459      	add	r1, fp
 8001af8:	fb91 fbf0 	sdiv	fp, r1, r0
 8001afc:	ebcb 2b0b 	rsb	fp, fp, fp, lsl #8
 8001b00:	eba1 010b 	sub.w	r1, r1, fp
 8001b04:	f10d 0b18 	add.w	fp, sp, #24
 8001b08:	f85b 1021 	ldr.w	r1, [fp, r1, lsl #2]
 8001b0c:	0209      	lsls	r1, r1, #8
        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 8001b0e:	404c      	eors	r4, r1
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 8001b10:	b3cb      	cbz	r3, 8001b86 <aes_gen_tables+0x1ee>
 8001b12:	f8dd b010 	ldr.w	fp, [sp, #16]
 8001b16:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 8001b1a:	4459      	add	r1, fp
 8001b1c:	fb91 fbf0 	sdiv	fp, r1, r0
 8001b20:	ebcb 2b0b 	rsb	fp, fp, fp, lsl #8
 8001b24:	eba1 010b 	sub.w	r1, r1, fp
 8001b28:	f10d 0b18 	add.w	fp, sp, #24
 8001b2c:	f85b 1021 	ldr.w	r1, [fp, r1, lsl #2]
 8001b30:	0409      	lsls	r1, r1, #16
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 8001b32:	4061      	eors	r1, r4
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
 8001b34:	b163      	cbz	r3, 8001b50 <aes_gen_tables+0x1b8>
 8001b36:	9c05      	ldr	r4, [sp, #20]
 8001b38:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8001b3c:	4423      	add	r3, r4
 8001b3e:	fb93 f4f0 	sdiv	r4, r3, r0
 8001b42:	ebc4 2404 	rsb	r4, r4, r4, lsl #8
 8001b46:	1b1b      	subs	r3, r3, r4
 8001b48:	ac06      	add	r4, sp, #24
 8001b4a:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8001b4e:	061b      	lsls	r3, r3, #24
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 8001b50:	404b      	eors	r3, r1
        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 8001b52:	9901      	ldr	r1, [sp, #4]
 8001b54:	f841 3b04 	str.w	r3, [r1], #4
 8001b58:	9101      	str	r1, [sp, #4]

#if !defined(MBEDTLS_AES_FEWER_TABLES)
        RT1[i] = ROTL8( RT0[i] );
 8001b5a:	ea4f 6133 	mov.w	r1, r3, ror #24
 8001b5e:	f84c 1b04 	str.w	r1, [ip], #4
        RT2[i] = ROTL8( RT1[i] );
 8001b62:	ea4f 4133 	mov.w	r1, r3, ror #16
        RT3[i] = ROTL8( RT2[i] );
 8001b66:	ea4f 2333 	mov.w	r3, r3, ror #8
 8001b6a:	f846 3b04 	str.w	r3, [r6], #4
    for( i = 0; i < 256; i++ )
 8001b6e:	4b12      	ldr	r3, [pc, #72]	@ (8001bb8 <aes_gen_tables+0x220>)
        RT2[i] = ROTL8( RT1[i] );
 8001b70:	f847 1b04 	str.w	r1, [r7], #4
    for( i = 0; i < 256; i++ )
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d187      	bne.n	8001a88 <aes_gen_tables+0xf0>
#endif /* !MBEDTLS_AES_FEWER_TABLES */
    }
}
 8001b78:	f60d 0d1c 	addw	sp, sp, #2076	@ 0x81c
 8001b7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 8001b80:	461c      	mov	r4, r3
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 8001b82:	4619      	mov	r1, r3
 8001b84:	e7c3      	b.n	8001b0e <aes_gen_tables+0x176>
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 8001b86:	4619      	mov	r1, r3
 8001b88:	e7d3      	b.n	8001b32 <aes_gen_tables+0x19a>
 8001b8a:	bf00      	nop
 8001b8c:	20000184 	.word	0x20000184
 8001b90:	200022ac 	.word	0x200022ac
 8001b94:	200011ac 	.word	0x200011ac
 8001b98:	200009ac 	.word	0x200009ac
 8001b9c:	200005ac 	.word	0x200005ac
 8001ba0:	200001ac 	.word	0x200001ac
 8001ba4:	20000dac 	.word	0x20000dac
 8001ba8:	20001aac 	.word	0x20001aac
 8001bac:	20001eac 	.word	0x20001eac
 8001bb0:	200016ac 	.word	0x200016ac
 8001bb4:	200012ac 	.word	0x200012ac
 8001bb8:	200023ac 	.word	0x200023ac

08001bbc <mbedtls_aes_init>:

void mbedtls_aes_init( mbedtls_aes_context *ctx )
{
    AES_VALIDATE( ctx != NULL );

    memset( ctx, 0, sizeof( mbedtls_aes_context ) );
 8001bbc:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8001bc0:	2100      	movs	r1, #0
 8001bc2:	f001 b9d1 	b.w	8002f68 <memset>

08001bc6 <mbedtls_aes_free>:
}

void mbedtls_aes_free( mbedtls_aes_context *ctx )
{
    if( ctx == NULL )
 8001bc6:	b118      	cbz	r0, 8001bd0 <mbedtls_aes_free+0xa>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_aes_context ) );
 8001bc8:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8001bcc:	f000 bcea 	b.w	80025a4 <mbedtls_platform_zeroize>
}
 8001bd0:	4770      	bx	lr
	...

08001bd4 <mbedtls_aes_setkey_enc>:
    uint32_t *RK;

    AES_VALIDATE_RET( ctx != NULL );
    AES_VALIDATE_RET( key != NULL );

    switch( keybits )
 8001bd4:	2ac0      	cmp	r2, #192	@ 0xc0
{
 8001bd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bd8:	4604      	mov	r4, r0
 8001bda:	460d      	mov	r5, r1
 8001bdc:	4616      	mov	r6, r2
    switch( keybits )
 8001bde:	d04a      	beq.n	8001c76 <mbedtls_aes_setkey_enc+0xa2>
 8001be0:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 8001be4:	d049      	beq.n	8001c7a <mbedtls_aes_setkey_enc+0xa6>
 8001be6:	2a80      	cmp	r2, #128	@ 0x80
 8001be8:	f040 80d1 	bne.w	8001d8e <mbedtls_aes_setkey_enc+0x1ba>
 8001bec:	230a      	movs	r3, #10
        case 256: ctx->nr = 14; break;
        default : return( MBEDTLS_ERR_AES_INVALID_KEY_LENGTH );
    }

#if !defined(MBEDTLS_AES_ROM_TABLES)
    if( aes_init_done == 0 )
 8001bee:	4f69      	ldr	r7, [pc, #420]	@ (8001d94 <mbedtls_aes_setkey_enc+0x1c0>)
        case 128: ctx->nr = 10; break;
 8001bf0:	6023      	str	r3, [r4, #0]
    if( aes_init_done == 0 )
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	b91b      	cbnz	r3, 8001bfe <mbedtls_aes_setkey_enc+0x2a>
    {
        aes_gen_tables();
 8001bf6:	f7ff fecf 	bl	8001998 <aes_gen_tables>
        aes_init_done = 1;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	603b      	str	r3, [r7, #0]

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
 8001bfe:	4622      	mov	r2, r4
 8001c00:	4629      	mov	r1, r5
 8001c02:	f104 0308 	add.w	r3, r4, #8
#if defined(MBEDTLS_AESNI_C) && defined(MBEDTLS_HAVE_X86_64)
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_AES ) )
        return( mbedtls_aesni_setkey_enc( (unsigned char *) ctx->rk, key, keybits ) );
#endif

    for( i = 0; i < ( keybits >> 5 ); i++ )
 8001c06:	0976      	lsrs	r6, r6, #5
    ctx->rk = RK = ctx->buf;
 8001c08:	f842 3f04 	str.w	r3, [r2, #4]!
    for( i = 0; i < ( keybits >> 5 ); i++ )
 8001c0c:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 8001c10:	428e      	cmp	r6, r1
 8001c12:	d134      	bne.n	8001c7e <mbedtls_aes_setkey_enc+0xaa>
    {
        RK[i] = MBEDTLS_GET_UINT32_LE( key, i << 2 );
    }

    switch( ctx->nr )
 8001c14:	6823      	ldr	r3, [r4, #0]
 8001c16:	2b0c      	cmp	r3, #12
 8001c18:	d040      	beq.n	8001c9c <mbedtls_aes_setkey_enc+0xc8>
 8001c1a:	2b0e      	cmp	r3, #14
 8001c1c:	d06f      	beq.n	8001cfe <mbedtls_aes_setkey_enc+0x12a>
 8001c1e:	2b0a      	cmp	r3, #10
 8001c20:	d127      	bne.n	8001c72 <mbedtls_aes_setkey_enc+0x9e>
 8001c22:	4620      	mov	r0, r4
 8001c24:	4d5c      	ldr	r5, [pc, #368]	@ (8001d98 <mbedtls_aes_setkey_enc+0x1c4>)
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
            {
                RK[4]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ MBEDTLS_BYTE_1( RK[3] ) ]       ) ^
 8001c26:	495d      	ldr	r1, [pc, #372]	@ (8001d9c <mbedtls_aes_setkey_enc+0x1c8>)
 8001c28:	f104 06a0 	add.w	r6, r4, #160	@ 0xa0
 8001c2c:	6942      	ldr	r2, [r0, #20]
                RK[4]  = RK[0] ^ RCON[i] ^
 8001c2e:	f855 4b04 	ldr.w	r4, [r5], #4
                ( (uint32_t) FSb[ MBEDTLS_BYTE_2( RK[3] ) ] <<  8 ) ^
                ( (uint32_t) FSb[ MBEDTLS_BYTE_3( RK[3] ) ] << 16 ) ^
 8001c32:	6887      	ldr	r7, [r0, #8]
                ( (uint32_t) FSb[ MBEDTLS_BYTE_1( RK[3] ) ]       ) ^
 8001c34:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8001c38:	5ccb      	ldrb	r3, [r1, r3]
                ( (uint32_t) FSb[ MBEDTLS_BYTE_3( RK[3] ) ] << 16 ) ^
 8001c3a:	407c      	eors	r4, r7
 8001c3c:	4063      	eors	r3, r4
 8001c3e:	0e14      	lsrs	r4, r2, #24
 8001c40:	5d0c      	ldrb	r4, [r1, r4]
            for( i = 0; i < 10; i++, RK += 4 )
 8001c42:	3010      	adds	r0, #16
                ( (uint32_t) FSb[ MBEDTLS_BYTE_3( RK[3] ) ] << 16 ) ^
 8001c44:	ea83 4304 	eor.w	r3, r3, r4, lsl #16
                ( (uint32_t) FSb[ MBEDTLS_BYTE_0( RK[3] ) ] << 24 );
 8001c48:	b2d4      	uxtb	r4, r2
 8001c4a:	5d0c      	ldrb	r4, [r1, r4]
                ( (uint32_t) FSb[ MBEDTLS_BYTE_3( RK[3] ) ] << 16 ) ^
 8001c4c:	ea83 6304 	eor.w	r3, r3, r4, lsl #24
                ( (uint32_t) FSb[ MBEDTLS_BYTE_2( RK[3] ) ] <<  8 ) ^
 8001c50:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8001c54:	5d0c      	ldrb	r4, [r1, r4]
                ( (uint32_t) FSb[ MBEDTLS_BYTE_3( RK[3] ) ] << 16 ) ^
 8001c56:	ea83 2304 	eor.w	r3, r3, r4, lsl #8

                RK[5]  = RK[1] ^ RK[4];
 8001c5a:	f850 4c04 	ldr.w	r4, [r0, #-4]
                RK[4]  = RK[0] ^ RCON[i] ^
 8001c5e:	6083      	str	r3, [r0, #8]
                RK[5]  = RK[1] ^ RK[4];
 8001c60:	4063      	eors	r3, r4
                RK[6]  = RK[2] ^ RK[5];
 8001c62:	6804      	ldr	r4, [r0, #0]
                RK[5]  = RK[1] ^ RK[4];
 8001c64:	60c3      	str	r3, [r0, #12]
                RK[6]  = RK[2] ^ RK[5];
 8001c66:	4063      	eors	r3, r4
                RK[7]  = RK[3] ^ RK[6];
 8001c68:	405a      	eors	r2, r3
                RK[6]  = RK[2] ^ RK[5];
 8001c6a:	6103      	str	r3, [r0, #16]
                RK[7]  = RK[3] ^ RK[6];
 8001c6c:	6142      	str	r2, [r0, #20]
            for( i = 0; i < 10; i++, RK += 4 )
 8001c6e:	4286      	cmp	r6, r0
 8001c70:	d1dc      	bne.n	8001c2c <mbedtls_aes_setkey_enc+0x58>
                RK[15] = RK[7] ^ RK[14];
            }
            break;
    }

    return( 0 );
 8001c72:	2000      	movs	r0, #0
}
 8001c74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch( keybits )
 8001c76:	230c      	movs	r3, #12
 8001c78:	e7b9      	b.n	8001bee <mbedtls_aes_setkey_enc+0x1a>
 8001c7a:	230e      	movs	r3, #14
 8001c7c:	e7b7      	b.n	8001bee <mbedtls_aes_setkey_enc+0x1a>
        RK[i] = MBEDTLS_GET_UINT32_LE( key, i << 2 );
 8001c7e:	788b      	ldrb	r3, [r1, #2]
 8001c80:	7848      	ldrb	r0, [r1, #1]
 8001c82:	041b      	lsls	r3, r3, #16
 8001c84:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8001c88:	7808      	ldrb	r0, [r1, #0]
 8001c8a:	3104      	adds	r1, #4
 8001c8c:	4303      	orrs	r3, r0
 8001c8e:	f811 0c01 	ldrb.w	r0, [r1, #-1]
 8001c92:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8001c96:	f842 3f04 	str.w	r3, [r2, #4]!
    for( i = 0; i < ( keybits >> 5 ); i++ )
 8001c9a:	e7b9      	b.n	8001c10 <mbedtls_aes_setkey_enc+0x3c>
 8001c9c:	4620      	mov	r0, r4
                ( (uint32_t) FSb[ MBEDTLS_BYTE_1( RK[5] ) ]       ) ^
 8001c9e:	493f      	ldr	r1, [pc, #252]	@ (8001d9c <mbedtls_aes_setkey_enc+0x1c8>)
 8001ca0:	4c3d      	ldr	r4, [pc, #244]	@ (8001d98 <mbedtls_aes_setkey_enc+0x1c4>)
 8001ca2:	f100 05c0 	add.w	r5, r0, #192	@ 0xc0
 8001ca6:	69c2      	ldr	r2, [r0, #28]
                RK[6]  = RK[0] ^ RCON[i] ^
 8001ca8:	f854 6b04 	ldr.w	r6, [r4], #4
                ( (uint32_t) FSb[ MBEDTLS_BYTE_3( RK[5] ) ] << 16 ) ^
 8001cac:	6887      	ldr	r7, [r0, #8]
                ( (uint32_t) FSb[ MBEDTLS_BYTE_1( RK[5] ) ]       ) ^
 8001cae:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8001cb2:	5ccb      	ldrb	r3, [r1, r3]
                ( (uint32_t) FSb[ MBEDTLS_BYTE_3( RK[5] ) ] << 16 ) ^
 8001cb4:	407e      	eors	r6, r7
 8001cb6:	4073      	eors	r3, r6
 8001cb8:	0e16      	lsrs	r6, r2, #24
 8001cba:	5d8e      	ldrb	r6, [r1, r6]
            for( i = 0; i < 8; i++, RK += 6 )
 8001cbc:	3018      	adds	r0, #24
                ( (uint32_t) FSb[ MBEDTLS_BYTE_3( RK[5] ) ] << 16 ) ^
 8001cbe:	ea83 4306 	eor.w	r3, r3, r6, lsl #16
                ( (uint32_t) FSb[ MBEDTLS_BYTE_0( RK[5] ) ] << 24 );
 8001cc2:	b2d6      	uxtb	r6, r2
 8001cc4:	5d8e      	ldrb	r6, [r1, r6]
                ( (uint32_t) FSb[ MBEDTLS_BYTE_3( RK[5] ) ] << 16 ) ^
 8001cc6:	ea83 6306 	eor.w	r3, r3, r6, lsl #24
                ( (uint32_t) FSb[ MBEDTLS_BYTE_2( RK[5] ) ] <<  8 ) ^
 8001cca:	f3c2 4607 	ubfx	r6, r2, #16, #8
 8001cce:	5d8e      	ldrb	r6, [r1, r6]
                ( (uint32_t) FSb[ MBEDTLS_BYTE_3( RK[5] ) ] << 16 ) ^
 8001cd0:	ea83 2306 	eor.w	r3, r3, r6, lsl #8
                RK[7]  = RK[1] ^ RK[6];
 8001cd4:	f850 6c0c 	ldr.w	r6, [r0, #-12]
                RK[6]  = RK[0] ^ RCON[i] ^
 8001cd8:	6083      	str	r3, [r0, #8]
                RK[7]  = RK[1] ^ RK[6];
 8001cda:	4073      	eors	r3, r6
                RK[8]  = RK[2] ^ RK[7];
 8001cdc:	f850 6c08 	ldr.w	r6, [r0, #-8]
                RK[7]  = RK[1] ^ RK[6];
 8001ce0:	60c3      	str	r3, [r0, #12]
                RK[8]  = RK[2] ^ RK[7];
 8001ce2:	4073      	eors	r3, r6
                RK[9]  = RK[3] ^ RK[8];
 8001ce4:	f850 6c04 	ldr.w	r6, [r0, #-4]
                RK[8]  = RK[2] ^ RK[7];
 8001ce8:	6103      	str	r3, [r0, #16]
                RK[9]  = RK[3] ^ RK[8];
 8001cea:	4073      	eors	r3, r6
                RK[10] = RK[4] ^ RK[9];
 8001cec:	6806      	ldr	r6, [r0, #0]
                RK[9]  = RK[3] ^ RK[8];
 8001cee:	6143      	str	r3, [r0, #20]
                RK[10] = RK[4] ^ RK[9];
 8001cf0:	4073      	eors	r3, r6
                RK[11] = RK[5] ^ RK[10];
 8001cf2:	405a      	eors	r2, r3
                RK[10] = RK[4] ^ RK[9];
 8001cf4:	6183      	str	r3, [r0, #24]
                RK[11] = RK[5] ^ RK[10];
 8001cf6:	61c2      	str	r2, [r0, #28]
            for( i = 0; i < 8; i++, RK += 6 )
 8001cf8:	4285      	cmp	r5, r0
 8001cfa:	d1d4      	bne.n	8001ca6 <mbedtls_aes_setkey_enc+0xd2>
 8001cfc:	e7b9      	b.n	8001c72 <mbedtls_aes_setkey_enc+0x9e>
 8001cfe:	4620      	mov	r0, r4
 8001d00:	4d25      	ldr	r5, [pc, #148]	@ (8001d98 <mbedtls_aes_setkey_enc+0x1c4>)
                ( (uint32_t) FSb[ MBEDTLS_BYTE_1( RK[7] ) ]       ) ^
 8001d02:	4926      	ldr	r1, [pc, #152]	@ (8001d9c <mbedtls_aes_setkey_enc+0x1c8>)
 8001d04:	f104 06e0 	add.w	r6, r4, #224	@ 0xe0
 8001d08:	6a44      	ldr	r4, [r0, #36]	@ 0x24
                RK[8]  = RK[0] ^ RCON[i] ^
 8001d0a:	f855 2b04 	ldr.w	r2, [r5], #4
                ( (uint32_t) FSb[ MBEDTLS_BYTE_3( RK[7] ) ] << 16 ) ^
 8001d0e:	6887      	ldr	r7, [r0, #8]
                ( (uint32_t) FSb[ MBEDTLS_BYTE_1( RK[7] ) ]       ) ^
 8001d10:	f3c4 2307 	ubfx	r3, r4, #8, #8
 8001d14:	5ccb      	ldrb	r3, [r1, r3]
                ( (uint32_t) FSb[ MBEDTLS_BYTE_3( RK[7] ) ] << 16 ) ^
 8001d16:	407a      	eors	r2, r7
 8001d18:	4053      	eors	r3, r2
 8001d1a:	0e22      	lsrs	r2, r4, #24
 8001d1c:	5c8a      	ldrb	r2, [r1, r2]
                ( (uint32_t) FSb[ MBEDTLS_BYTE_2( RK[11] ) ] << 16 ) ^
 8001d1e:	6987      	ldr	r7, [r0, #24]
                ( (uint32_t) FSb[ MBEDTLS_BYTE_3( RK[7] ) ] << 16 ) ^
 8001d20:	ea83 4302 	eor.w	r3, r3, r2, lsl #16
                ( (uint32_t) FSb[ MBEDTLS_BYTE_0( RK[7] ) ] << 24 );
 8001d24:	b2e2      	uxtb	r2, r4
 8001d26:	5c8a      	ldrb	r2, [r1, r2]
            for( i = 0; i < 7; i++, RK += 8 )
 8001d28:	3020      	adds	r0, #32
                ( (uint32_t) FSb[ MBEDTLS_BYTE_3( RK[7] ) ] << 16 ) ^
 8001d2a:	ea83 6302 	eor.w	r3, r3, r2, lsl #24
                ( (uint32_t) FSb[ MBEDTLS_BYTE_2( RK[7] ) ] <<  8 ) ^
 8001d2e:	f3c4 4207 	ubfx	r2, r4, #16, #8
 8001d32:	5c8a      	ldrb	r2, [r1, r2]
                ( (uint32_t) FSb[ MBEDTLS_BYTE_3( RK[7] ) ] << 16 ) ^
 8001d34:	ea83 2302 	eor.w	r3, r3, r2, lsl #8
                RK[9]  = RK[1] ^ RK[8];
 8001d38:	f850 2c14 	ldr.w	r2, [r0, #-20]
                RK[8]  = RK[0] ^ RCON[i] ^
 8001d3c:	6083      	str	r3, [r0, #8]
                RK[9]  = RK[1] ^ RK[8];
 8001d3e:	4053      	eors	r3, r2
                RK[10] = RK[2] ^ RK[9];
 8001d40:	f850 2c10 	ldr.w	r2, [r0, #-16]
                RK[9]  = RK[1] ^ RK[8];
 8001d44:	60c3      	str	r3, [r0, #12]
                RK[10] = RK[2] ^ RK[9];
 8001d46:	4053      	eors	r3, r2
                RK[11] = RK[3] ^ RK[10];
 8001d48:	f850 2c0c 	ldr.w	r2, [r0, #-12]
                RK[10] = RK[2] ^ RK[9];
 8001d4c:	6103      	str	r3, [r0, #16]
                RK[11] = RK[3] ^ RK[10];
 8001d4e:	4053      	eors	r3, r2
 8001d50:	6143      	str	r3, [r0, #20]
                ( (uint32_t) FSb[ MBEDTLS_BYTE_0( RK[11] ) ]       ) ^
 8001d52:	b2da      	uxtb	r2, r3
 8001d54:	5c8a      	ldrb	r2, [r1, r2]
                ( (uint32_t) FSb[ MBEDTLS_BYTE_2( RK[11] ) ] << 16 ) ^
 8001d56:	407a      	eors	r2, r7
                ( (uint32_t) FSb[ MBEDTLS_BYTE_3( RK[11] ) ] << 24 );
 8001d58:	0e1f      	lsrs	r7, r3, #24
 8001d5a:	5dcf      	ldrb	r7, [r1, r7]
                ( (uint32_t) FSb[ MBEDTLS_BYTE_2( RK[11] ) ] << 16 ) ^
 8001d5c:	ea82 6207 	eor.w	r2, r2, r7, lsl #24
                ( (uint32_t) FSb[ MBEDTLS_BYTE_1( RK[11] ) ] <<  8 ) ^
 8001d60:	f3c3 2707 	ubfx	r7, r3, #8, #8
 8001d64:	5dcf      	ldrb	r7, [r1, r7]
                ( (uint32_t) FSb[ MBEDTLS_BYTE_2( RK[11] ) ] << 16 ) ^
 8001d66:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8001d6a:	5ccb      	ldrb	r3, [r1, r3]
 8001d6c:	ea82 2207 	eor.w	r2, r2, r7, lsl #8
 8001d70:	ea82 4303 	eor.w	r3, r2, r3, lsl #16
                RK[13] = RK[5] ^ RK[12];
 8001d74:	f850 2c04 	ldr.w	r2, [r0, #-4]
                RK[12] = RK[4] ^
 8001d78:	6183      	str	r3, [r0, #24]
                RK[13] = RK[5] ^ RK[12];
 8001d7a:	4053      	eors	r3, r2
                RK[14] = RK[6] ^ RK[13];
 8001d7c:	6802      	ldr	r2, [r0, #0]
                RK[13] = RK[5] ^ RK[12];
 8001d7e:	61c3      	str	r3, [r0, #28]
                RK[14] = RK[6] ^ RK[13];
 8001d80:	4053      	eors	r3, r2
                RK[15] = RK[7] ^ RK[14];
 8001d82:	405c      	eors	r4, r3
                RK[14] = RK[6] ^ RK[13];
 8001d84:	6203      	str	r3, [r0, #32]
                RK[15] = RK[7] ^ RK[14];
 8001d86:	6244      	str	r4, [r0, #36]	@ 0x24
            for( i = 0; i < 7; i++, RK += 8 )
 8001d88:	4286      	cmp	r6, r0
 8001d8a:	d1bd      	bne.n	8001d08 <mbedtls_aes_setkey_enc+0x134>
 8001d8c:	e771      	b.n	8001c72 <mbedtls_aes_setkey_enc+0x9e>
    switch( keybits )
 8001d8e:	f06f 001f 	mvn.w	r0, #31
 8001d92:	e76f      	b.n	8001c74 <mbedtls_aes_setkey_enc+0xa0>
 8001d94:	20000180 	.word	0x20000180
 8001d98:	20000184 	.word	0x20000184
 8001d9c:	200022ac 	.word	0x200022ac

08001da0 <mbedtls_aes_setkey_dec>:
 * AES key schedule (decryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_DEC_ALT)
int mbedtls_aes_setkey_dec( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
 8001da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001da4:	4604      	mov	r4, r0
 8001da6:	460d      	mov	r5, r1
 8001da8:	4616      	mov	r6, r2
 8001daa:	b0c9      	sub	sp, #292	@ 0x124
    uint32_t *SK;

    AES_VALIDATE_RET( ctx != NULL );
    AES_VALIDATE_RET( key != NULL );

    mbedtls_aes_init( &cty );
 8001dac:	a802      	add	r0, sp, #8
 8001dae:	f7ff ff05 	bl	8001bbc <mbedtls_aes_init>

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
 8001db2:	f104 0308 	add.w	r3, r4, #8

    /* Also checks keybits */
    if( ( ret = mbedtls_aes_setkey_enc( &cty, key, keybits ) ) != 0 )
 8001db6:	4632      	mov	r2, r6
 8001db8:	4629      	mov	r1, r5
    ctx->rk = RK = ctx->buf;
 8001dba:	6063      	str	r3, [r4, #4]
    if( ( ret = mbedtls_aes_setkey_enc( &cty, key, keybits ) ) != 0 )
 8001dbc:	a802      	add	r0, sp, #8
 8001dbe:	f7ff ff09 	bl	8001bd4 <mbedtls_aes_setkey_enc>
 8001dc2:	4680      	mov	r8, r0
 8001dc4:	2800      	cmp	r0, #0
 8001dc6:	d163      	bne.n	8001e90 <mbedtls_aes_setkey_dec+0xf0>
        goto exit;

    ctx->nr = cty.nr;
 8001dc8:	9e02      	ldr	r6, [sp, #8]
                           (const unsigned char *) cty.rk, ctx->nr );
        goto exit;
    }
#endif

    SK = cty.rk + cty.nr * 4;
 8001dca:	9a03      	ldr	r2, [sp, #12]
 8001dcc:	0131      	lsls	r1, r6, #4
 8001dce:	eb02 1306 	add.w	r3, r2, r6, lsl #4

    *RK++ = *SK++;
 8001dd2:	5852      	ldr	r2, [r2, r1]
    *RK++ = *SK++;
    *RK++ = *SK++;
    *RK++ = *SK++;
 8001dd4:	f104 0c18 	add.w	ip, r4, #24
    *RK++ = *SK++;
 8001dd8:	60a2      	str	r2, [r4, #8]
    *RK++ = *SK++;
 8001dda:	685a      	ldr	r2, [r3, #4]
    ctx->nr = cty.nr;
 8001ddc:	6026      	str	r6, [r4, #0]
    *RK++ = *SK++;
 8001dde:	60e2      	str	r2, [r4, #12]
    *RK++ = *SK++;
 8001de0:	689a      	ldr	r2, [r3, #8]

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
 8001de2:	3b10      	subs	r3, #16
    *RK++ = *SK++;
 8001de4:	6122      	str	r2, [r4, #16]
    *RK++ = *SK++;
 8001de6:	69da      	ldr	r2, [r3, #28]
    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
 8001de8:	469e      	mov	lr, r3
    *RK++ = *SK++;
 8001dea:	6162      	str	r2, [r4, #20]
    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
 8001dec:	1e74      	subs	r4, r6, #1
    *RK++ = *SK++;
 8001dee:	4662      	mov	r2, ip
    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
 8001df0:	46a1      	mov	r9, r4
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = AES_RT0( FSb[ MBEDTLS_BYTE_0( *SK ) ] ) ^
 8001df2:	482c      	ldr	r0, [pc, #176]	@ (8001ea4 <mbedtls_aes_setkey_dec+0x104>)
    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
 8001df4:	f1b9 0f00 	cmp.w	r9, #0
 8001df8:	dd33      	ble.n	8001e62 <mbedtls_aes_setkey_dec+0xc2>
        for( j = 0; j < 4; j++, SK++ )
 8001dfa:	f1ae 0504 	sub.w	r5, lr, #4
 8001dfe:	9500      	str	r5, [sp, #0]
 8001e00:	f102 0510 	add.w	r5, r2, #16
 8001e04:	9501      	str	r5, [sp, #4]
            *RK++ = AES_RT0( FSb[ MBEDTLS_BYTE_0( *SK ) ] ) ^
 8001e06:	9f00      	ldr	r7, [sp, #0]
                    AES_RT1( FSb[ MBEDTLS_BYTE_1( *SK ) ] ) ^
                    AES_RT2( FSb[ MBEDTLS_BYTE_2( *SK ) ] ) ^
 8001e08:	f8df b09c 	ldr.w	fp, [pc, #156]	@ 8001ea8 <mbedtls_aes_setkey_dec+0x108>
            *RK++ = AES_RT0( FSb[ MBEDTLS_BYTE_0( *SK ) ] ) ^
 8001e0c:	f857 5f04 	ldr.w	r5, [r7, #4]!
 8001e10:	9700      	str	r7, [sp, #0]
 8001e12:	b2ef      	uxtb	r7, r5
 8001e14:	f810 a007 	ldrb.w	sl, [r0, r7]
                    AES_RT3( FSb[ MBEDTLS_BYTE_3( *SK ) ] );
 8001e18:	0e2f      	lsrs	r7, r5, #24
                    AES_RT2( FSb[ MBEDTLS_BYTE_2( *SK ) ] ) ^
 8001e1a:	f85b a02a 	ldr.w	sl, [fp, sl, lsl #2]
                    AES_RT3( FSb[ MBEDTLS_BYTE_3( *SK ) ] );
 8001e1e:	5dc7      	ldrb	r7, [r0, r7]
                    AES_RT2( FSb[ MBEDTLS_BYTE_2( *SK ) ] ) ^
 8001e20:	f8df b088 	ldr.w	fp, [pc, #136]	@ 8001eac <mbedtls_aes_setkey_dec+0x10c>
 8001e24:	f85b 7027 	ldr.w	r7, [fp, r7, lsl #2]
 8001e28:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8001eb0 <mbedtls_aes_setkey_dec+0x110>
 8001e2c:	ea8a 0a07 	eor.w	sl, sl, r7
                    AES_RT1( FSb[ MBEDTLS_BYTE_1( *SK ) ] ) ^
 8001e30:	f3c5 2707 	ubfx	r7, r5, #8, #8
 8001e34:	5dc7      	ldrb	r7, [r0, r7]
                    AES_RT2( FSb[ MBEDTLS_BYTE_2( *SK ) ] ) ^
 8001e36:	f3c5 4507 	ubfx	r5, r5, #16, #8
 8001e3a:	f85b 7027 	ldr.w	r7, [fp, r7, lsl #2]
 8001e3e:	5d45      	ldrb	r5, [r0, r5]
 8001e40:	ea8a 0707 	eor.w	r7, sl, r7
 8001e44:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 8001eb4 <mbedtls_aes_setkey_dec+0x114>
 8001e48:	f85a 5025 	ldr.w	r5, [sl, r5, lsl #2]
 8001e4c:	406f      	eors	r7, r5
        for( j = 0; j < 4; j++, SK++ )
 8001e4e:	9d01      	ldr	r5, [sp, #4]
            *RK++ = AES_RT0( FSb[ MBEDTLS_BYTE_0( *SK ) ] ) ^
 8001e50:	f842 7b04 	str.w	r7, [r2], #4
        for( j = 0; j < 4; j++, SK++ )
 8001e54:	42aa      	cmp	r2, r5
 8001e56:	d1d6      	bne.n	8001e06 <mbedtls_aes_setkey_dec+0x66>
    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
 8001e58:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 8001e5c:	f1ae 0e10 	sub.w	lr, lr, #16
 8001e60:	e7c8      	b.n	8001df4 <mbedtls_aes_setkey_dec+0x54>
 8001e62:	f06f 000f 	mvn.w	r0, #15
 8001e66:	2e00      	cmp	r6, #0
 8001e68:	fb00 f404 	mul.w	r4, r0, r4
 8001e6c:	bfd8      	it	le
 8001e6e:	2400      	movle	r4, #0
 8001e70:	f1a1 0110 	sub.w	r1, r1, #16
 8001e74:	bfd8      	it	le
 8001e76:	2100      	movle	r1, #0
 8001e78:	1918      	adds	r0, r3, r4
        }
    }

    *RK++ = *SK++;
 8001e7a:	591b      	ldr	r3, [r3, r4]
 8001e7c:	eb0c 0201 	add.w	r2, ip, r1
 8001e80:	f84c 3001 	str.w	r3, [ip, r1]
    *RK++ = *SK++;
 8001e84:	6843      	ldr	r3, [r0, #4]
 8001e86:	6053      	str	r3, [r2, #4]
    *RK++ = *SK++;
 8001e88:	6883      	ldr	r3, [r0, #8]
 8001e8a:	6093      	str	r3, [r2, #8]
    *RK++ = *SK++;
 8001e8c:	68c3      	ldr	r3, [r0, #12]
 8001e8e:	60d3      	str	r3, [r2, #12]
    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_aes_context ) );
 8001e90:	a802      	add	r0, sp, #8
 8001e92:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8001e96:	f000 fb85 	bl	80025a4 <mbedtls_platform_zeroize>

exit:
    mbedtls_aes_free( &cty );

    return( ret );
}
 8001e9a:	4640      	mov	r0, r8
 8001e9c:	b049      	add	sp, #292	@ 0x124
 8001e9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001ea2:	bf00      	nop
 8001ea4:	200022ac 	.word	0x200022ac
 8001ea8:	20000dac 	.word	0x20000dac
 8001eac:	200001ac 	.word	0x200001ac
 8001eb0:	200009ac 	.word	0x200009ac
 8001eb4:	200005ac 	.word	0x200005ac

08001eb8 <mbedtls_internal_aes_encrypt>:
 */
#if !defined(MBEDTLS_AES_ENCRYPT_ALT)
int mbedtls_internal_aes_encrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
 8001eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    {
        uint32_t X[4];
        uint32_t Y[4];
    } t;

    t.X[0] = MBEDTLS_GET_UINT32_LE( input,  0 ); t.X[0] ^= *RK++;
 8001ebc:	680c      	ldr	r4, [r1, #0]
{
 8001ebe:	b091      	sub	sp, #68	@ 0x44
    uint32_t *RK = ctx->rk;
 8001ec0:	f8d0 c004 	ldr.w	ip, [r0, #4]
    t.X[0] = MBEDTLS_GET_UINT32_LE( input,  0 ); t.X[0] ^= *RK++;
 8001ec4:	9408      	str	r4, [sp, #32]
 8001ec6:	f8dc 3000 	ldr.w	r3, [ip]
    t.X[2] = MBEDTLS_GET_UINT32_LE( input,  8 ); t.X[2] ^= *RK++;
    t.X[3] = MBEDTLS_GET_UINT32_LE( input, 12 ); t.X[3] ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    {
        AES_FROUND( t.Y[0], t.Y[1], t.Y[2], t.Y[3], t.X[0], t.X[1], t.X[2], t.X[3] );
 8001eca:	4fd1      	ldr	r7, [pc, #836]	@ (8002210 <mbedtls_internal_aes_encrypt+0x358>)
    t.X[0] = MBEDTLS_GET_UINT32_LE( input,  0 ); t.X[0] ^= *RK++;
 8001ecc:	4063      	eors	r3, r4
    t.X[1] = MBEDTLS_GET_UINT32_LE( input,  4 ); t.X[1] ^= *RK++;
 8001ece:	684c      	ldr	r4, [r1, #4]
    t.X[0] = MBEDTLS_GET_UINT32_LE( input,  0 ); t.X[0] ^= *RK++;
 8001ed0:	9308      	str	r3, [sp, #32]
    t.X[1] = MBEDTLS_GET_UINT32_LE( input,  4 ); t.X[1] ^= *RK++;
 8001ed2:	9409      	str	r4, [sp, #36]	@ 0x24
 8001ed4:	f8dc 3004 	ldr.w	r3, [ip, #4]
        AES_FROUND( t.Y[0], t.Y[1], t.Y[2], t.Y[3], t.X[0], t.X[1], t.X[2], t.X[3] );
 8001ed8:	4ece      	ldr	r6, [pc, #824]	@ (8002214 <mbedtls_internal_aes_encrypt+0x35c>)
    t.X[1] = MBEDTLS_GET_UINT32_LE( input,  4 ); t.X[1] ^= *RK++;
 8001eda:	4063      	eors	r3, r4
    t.X[2] = MBEDTLS_GET_UINT32_LE( input,  8 ); t.X[2] ^= *RK++;
 8001edc:	688c      	ldr	r4, [r1, #8]
    t.X[1] = MBEDTLS_GET_UINT32_LE( input,  4 ); t.X[1] ^= *RK++;
 8001ede:	9309      	str	r3, [sp, #36]	@ 0x24
    t.X[2] = MBEDTLS_GET_UINT32_LE( input,  8 ); t.X[2] ^= *RK++;
 8001ee0:	940a      	str	r4, [sp, #40]	@ 0x28
 8001ee2:	f8dc 3008 	ldr.w	r3, [ip, #8]
    t.X[3] = MBEDTLS_GET_UINT32_LE( input, 12 ); t.X[3] ^= *RK++;
 8001ee6:	68c9      	ldr	r1, [r1, #12]
    t.X[2] = MBEDTLS_GET_UINT32_LE( input,  8 ); t.X[2] ^= *RK++;
 8001ee8:	4063      	eors	r3, r4
    t.X[3] = MBEDTLS_GET_UINT32_LE( input, 12 ); t.X[3] ^= *RK++;
 8001eea:	910b      	str	r1, [sp, #44]	@ 0x2c
    t.X[2] = MBEDTLS_GET_UINT32_LE( input,  8 ); t.X[2] ^= *RK++;
 8001eec:	930a      	str	r3, [sp, #40]	@ 0x28
    t.X[3] = MBEDTLS_GET_UINT32_LE( input, 12 ); t.X[3] ^= *RK++;
 8001eee:	f8dc 300c 	ldr.w	r3, [ip, #12]
        AES_FROUND( t.Y[0], t.Y[1], t.Y[2], t.Y[3], t.X[0], t.X[1], t.X[2], t.X[3] );
 8001ef2:	4dc9      	ldr	r5, [pc, #804]	@ (8002218 <mbedtls_internal_aes_encrypt+0x360>)
    t.X[3] = MBEDTLS_GET_UINT32_LE( input, 12 ); t.X[3] ^= *RK++;
 8001ef4:	404b      	eors	r3, r1
 8001ef6:	930b      	str	r3, [sp, #44]	@ 0x2c
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8001ef8:	6803      	ldr	r3, [r0, #0]
        AES_FROUND( t.Y[0], t.Y[1], t.Y[2], t.Y[3], t.X[0], t.X[1], t.X[2], t.X[3] );
 8001efa:	4cc8      	ldr	r4, [pc, #800]	@ (800221c <mbedtls_internal_aes_encrypt+0x364>)
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8001efc:	105b      	asrs	r3, r3, #1
 8001efe:	9302      	str	r3, [sp, #8]
 8001f00:	3b01      	subs	r3, #1
 8001f02:	9303      	str	r3, [sp, #12]
 8001f04:	f10c 0130 	add.w	r1, ip, #48	@ 0x30
 8001f08:	9301      	str	r3, [sp, #4]
        AES_FROUND( t.Y[0], t.Y[1], t.Y[2], t.Y[3], t.X[0], t.X[1], t.X[2], t.X[3] );
 8001f0a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8001f0c:	e9dd ab08 	ldrd	sl, fp, [sp, #32]
 8001f10:	0e00      	lsrs	r0, r0, #24
 8001f12:	fa5f f38a 	uxtb.w	r3, sl
 8001f16:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8001f1a:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8001f1e:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8001f22:	4043      	eors	r3, r0
 8001f24:	f3cb 2007 	ubfx	r0, fp, #8, #8
 8001f28:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8001f2c:	3120      	adds	r1, #32
        AES_FROUND( t.Y[0], t.Y[1], t.Y[2], t.Y[3], t.X[0], t.X[1], t.X[2], t.X[3] );
 8001f2e:	4043      	eors	r3, r0
 8001f30:	f3c9 4007 	ubfx	r0, r9, #16, #8
 8001f34:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8001f38:	4058      	eors	r0, r3
 8001f3a:	f851 3c40 	ldr.w	r3, [r1, #-64]
 8001f3e:	4058      	eors	r0, r3
        AES_FROUND( t.X[0], t.X[1], t.X[2], t.X[3], t.Y[0], t.Y[1], t.Y[2], t.Y[3] );
 8001f40:	b2c3      	uxtb	r3, r0
 8001f42:	9304      	str	r3, [sp, #16]
 8001f44:	0e03      	lsrs	r3, r0, #24
 8001f46:	9305      	str	r3, [sp, #20]
 8001f48:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8001f4c:	9306      	str	r3, [sp, #24]
 8001f4e:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8001f52:	9307      	str	r3, [sp, #28]
        AES_FROUND( t.Y[0], t.Y[1], t.Y[2], t.Y[3], t.X[0], t.X[1], t.X[2], t.X[3] );
 8001f54:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8001f56:	fa5f fe83 	uxtb.w	lr, r3
 8001f5a:	ea4f 6319 	mov.w	r3, r9, lsr #24
 8001f5e:	f857 802e 	ldr.w	r8, [r7, lr, lsl #2]
 8001f62:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8001f66:	fa5f fe89 	uxtb.w	lr, r9
 8001f6a:	ea88 0803 	eor.w	r8, r8, r3
 8001f6e:	f3ca 2307 	ubfx	r3, sl, #8, #8
 8001f72:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8001f76:	f857 e02e 	ldr.w	lr, [r7, lr, lsl #2]
 8001f7a:	ea88 0803 	eor.w	r8, r8, r3
 8001f7e:	f3cb 4307 	ubfx	r3, fp, #16, #8
 8001f82:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8001f86:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8001f8a:	ea88 0803 	eor.w	r8, r8, r3
 8001f8e:	ea4f 631b 	mov.w	r3, fp, lsr #24
 8001f92:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8001f96:	fa5f fb8b 	uxtb.w	fp, fp
 8001f9a:	ea8e 0e03 	eor.w	lr, lr, r3
 8001f9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8001fa0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8001fa4:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8001fa8:	ea8e 0e03 	eor.w	lr, lr, r3
 8001fac:	f3ca 4307 	ubfx	r3, sl, #16, #8
 8001fb0:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8001fb4:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 8001fb8:	f856 a02a 	ldr.w	sl, [r6, sl, lsl #2]
 8001fbc:	ea8e 0e03 	eor.w	lr, lr, r3
 8001fc0:	f857 302b 	ldr.w	r3, [r7, fp, lsl #2]
 8001fc4:	ea83 0a0a 	eor.w	sl, r3, sl
 8001fc8:	f855 3029 	ldr.w	r3, [r5, r9, lsl #2]
 8001fcc:	ea8a 0903 	eor.w	r9, sl, r3
 8001fd0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8001fd2:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8001fd6:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8001fda:	ea89 0903 	eor.w	r9, r9, r3
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8001fde:	9b01      	ldr	r3, [sp, #4]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	f300 8093 	bgt.w	800210c <mbedtls_internal_aes_encrypt+0x254>
 8001fe6:	9b03      	ldr	r3, [sp, #12]
    }

    AES_FROUND( t.Y[0], t.Y[1], t.Y[2], t.Y[3], t.X[0], t.X[1], t.X[2], t.X[3] );
 8001fe8:	900c      	str	r0, [sp, #48]	@ 0x30
 8001fea:	015c      	lsls	r4, r3, #5
 8001fec:	9b02      	ldr	r3, [sp, #8]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	bfd8      	it	le
 8001ff2:	2400      	movle	r4, #0
 8001ff4:	3410      	adds	r4, #16
 8001ff6:	4464      	add	r4, ip
 8001ff8:	6861      	ldr	r1, [r4, #4]
 8001ffa:	ea89 0601 	eor.w	r6, r9, r1
 8001ffe:	960d      	str	r6, [sp, #52]	@ 0x34
 8002000:	68a3      	ldr	r3, [r4, #8]
 8002002:	ea8e 0703 	eor.w	r7, lr, r3
 8002006:	970e      	str	r7, [sp, #56]	@ 0x38
 8002008:	68e0      	ldr	r0, [r4, #12]

    t.X[0] = *RK++ ^ \
            ( (uint32_t) FSb[ MBEDTLS_BYTE_0( t.Y[0] ) ]       ) ^
            ( (uint32_t) FSb[ MBEDTLS_BYTE_1( t.Y[1] ) ] <<  8 ) ^
            ( (uint32_t) FSb[ MBEDTLS_BYTE_2( t.Y[2] ) ] << 16 ) ^
            ( (uint32_t) FSb[ MBEDTLS_BYTE_3( t.Y[3] ) ] << 24 );
 800200a:	4b85      	ldr	r3, [pc, #532]	@ (8002220 <mbedtls_internal_aes_encrypt+0x368>)
    AES_FROUND( t.Y[0], t.Y[1], t.Y[2], t.Y[3], t.X[0], t.X[1], t.X[2], t.X[3] );
 800200c:	ea88 0500 	eor.w	r5, r8, r0
 8002010:	950f      	str	r5, [sp, #60]	@ 0x3c
            ( (uint32_t) FSb[ MBEDTLS_BYTE_3( t.Y[3] ) ] << 24 );
 8002012:	0e29      	lsrs	r1, r5, #24
 8002014:	5c59      	ldrb	r1, [r3, r1]
            ( (uint32_t) FSb[ MBEDTLS_BYTE_2( t.Y[2] ) ] << 16 ) ^
 8002016:	6920      	ldr	r0, [r4, #16]
 8002018:	ea80 6001 	eor.w	r0, r0, r1, lsl #24
            ( (uint32_t) FSb[ MBEDTLS_BYTE_1( t.Y[1] ) ] <<  8 ) ^
 800201c:	f3c6 2107 	ubfx	r1, r6, #8, #8
 8002020:	5c59      	ldrb	r1, [r3, r1]
            ( (uint32_t) FSb[ MBEDTLS_BYTE_2( t.Y[2] ) ] << 16 ) ^
 8002022:	ea80 2001 	eor.w	r0, r0, r1, lsl #8
 8002026:	f3c7 4107 	ubfx	r1, r7, #16, #8
 800202a:	5c59      	ldrb	r1, [r3, r1]
 800202c:	ea80 4001 	eor.w	r0, r0, r1, lsl #16
            ( (uint32_t) FSb[ MBEDTLS_BYTE_0( t.Y[0] ) ]       ) ^
 8002030:	9904      	ldr	r1, [sp, #16]
 8002032:	5c59      	ldrb	r1, [r3, r1]
            ( (uint32_t) FSb[ MBEDTLS_BYTE_2( t.Y[2] ) ] << 16 ) ^
 8002034:	4048      	eors	r0, r1

    t.X[1] = *RK++ ^ \
            ( (uint32_t) FSb[ MBEDTLS_BYTE_0( t.Y[1] ) ]       ) ^
 8002036:	b2f1      	uxtb	r1, r6
 8002038:	f813 c001 	ldrb.w	ip, [r3, r1]
            ( (uint32_t) FSb[ MBEDTLS_BYTE_1( t.Y[2] ) ] <<  8 ) ^
            ( (uint32_t) FSb[ MBEDTLS_BYTE_2( t.Y[3] ) ] << 16 ) ^
 800203c:	6961      	ldr	r1, [r4, #20]
    t.X[0] = *RK++ ^ \
 800203e:	9008      	str	r0, [sp, #32]
            ( (uint32_t) FSb[ MBEDTLS_BYTE_2( t.Y[3] ) ] << 16 ) ^
 8002040:	ea8c 0c01 	eor.w	ip, ip, r1
            ( (uint32_t) FSb[ MBEDTLS_BYTE_1( t.Y[2] ) ] <<  8 ) ^
 8002044:	f3c7 2107 	ubfx	r1, r7, #8, #8
 8002048:	5c59      	ldrb	r1, [r3, r1]
            ( (uint32_t) FSb[ MBEDTLS_BYTE_2( t.Y[3] ) ] << 16 ) ^
 800204a:	ea8c 2c01 	eor.w	ip, ip, r1, lsl #8
 800204e:	f3c5 4107 	ubfx	r1, r5, #16, #8
 8002052:	5c59      	ldrb	r1, [r3, r1]
 8002054:	ea8c 4c01 	eor.w	ip, ip, r1, lsl #16
            ( (uint32_t) FSb[ MBEDTLS_BYTE_3( t.Y[0] ) ] << 24 );
 8002058:	9905      	ldr	r1, [sp, #20]
 800205a:	5c59      	ldrb	r1, [r3, r1]
            ( (uint32_t) FSb[ MBEDTLS_BYTE_2( t.Y[3] ) ] << 16 ) ^
 800205c:	ea8c 6c01 	eor.w	ip, ip, r1, lsl #24

    t.X[2] = *RK++ ^ \
            ( (uint32_t) FSb[ MBEDTLS_BYTE_0( t.Y[2] ) ]       ) ^
 8002060:	b2f9      	uxtb	r1, r7
 8002062:	f813 e001 	ldrb.w	lr, [r3, r1]
            ( (uint32_t) FSb[ MBEDTLS_BYTE_1( t.Y[3] ) ] <<  8 ) ^
            ( (uint32_t) FSb[ MBEDTLS_BYTE_2( t.Y[0] ) ] << 16 ) ^
 8002066:	69a1      	ldr	r1, [r4, #24]
            ( (uint32_t) FSb[ MBEDTLS_BYTE_3( t.Y[1] ) ] << 24 );

    t.X[3] = *RK++ ^ \
            ( (uint32_t) FSb[ MBEDTLS_BYTE_0( t.Y[3] ) ]       ) ^
            ( (uint32_t) FSb[ MBEDTLS_BYTE_1( t.Y[0] ) ] <<  8 ) ^
            ( (uint32_t) FSb[ MBEDTLS_BYTE_2( t.Y[1] ) ] << 16 ) ^
 8002068:	69e4      	ldr	r4, [r4, #28]
            ( (uint32_t) FSb[ MBEDTLS_BYTE_2( t.Y[0] ) ] << 16 ) ^
 800206a:	ea8e 0101 	eor.w	r1, lr, r1
            ( (uint32_t) FSb[ MBEDTLS_BYTE_3( t.Y[1] ) ] << 24 );
 800206e:	ea4f 6e16 	mov.w	lr, r6, lsr #24
 8002072:	f813 e00e 	ldrb.w	lr, [r3, lr]
            ( (uint32_t) FSb[ MBEDTLS_BYTE_3( t.Y[2] ) ] << 24 );
 8002076:	0e3f      	lsrs	r7, r7, #24
            ( (uint32_t) FSb[ MBEDTLS_BYTE_2( t.Y[0] ) ] << 16 ) ^
 8002078:	ea81 610e 	eor.w	r1, r1, lr, lsl #24
            ( (uint32_t) FSb[ MBEDTLS_BYTE_1( t.Y[3] ) ] <<  8 ) ^
 800207c:	f3c5 2e07 	ubfx	lr, r5, #8, #8
 8002080:	f813 e00e 	ldrb.w	lr, [r3, lr]
            ( (uint32_t) FSb[ MBEDTLS_BYTE_0( t.Y[3] ) ]       ) ^
 8002084:	b2ed      	uxtb	r5, r5
            ( (uint32_t) FSb[ MBEDTLS_BYTE_2( t.Y[0] ) ] << 16 ) ^
 8002086:	ea81 210e 	eor.w	r1, r1, lr, lsl #8
 800208a:	f8dd e018 	ldr.w	lr, [sp, #24]
            ( (uint32_t) FSb[ MBEDTLS_BYTE_0( t.Y[3] ) ]       ) ^
 800208e:	5d5d      	ldrb	r5, [r3, r5]
            ( (uint32_t) FSb[ MBEDTLS_BYTE_2( t.Y[0] ) ] << 16 ) ^
 8002090:	f813 e00e 	ldrb.w	lr, [r3, lr]
    t.X[1] = *RK++ ^ \
 8002094:	f8cd c024 	str.w	ip, [sp, #36]	@ 0x24
            ( (uint32_t) FSb[ MBEDTLS_BYTE_2( t.Y[0] ) ] << 16 ) ^
 8002098:	ea81 410e 	eor.w	r1, r1, lr, lsl #16
    t.X[2] = *RK++ ^ \
 800209c:	910a      	str	r1, [sp, #40]	@ 0x28
            ( (uint32_t) FSb[ MBEDTLS_BYTE_2( t.Y[1] ) ] << 16 ) ^
 800209e:	4065      	eors	r5, r4
            ( (uint32_t) FSb[ MBEDTLS_BYTE_3( t.Y[2] ) ] << 24 );
 80020a0:	5ddc      	ldrb	r4, [r3, r7]
            ( (uint32_t) FSb[ MBEDTLS_BYTE_2( t.Y[1] ) ] << 16 ) ^
 80020a2:	f3c6 4607 	ubfx	r6, r6, #16, #8
 80020a6:	ea85 6504 	eor.w	r5, r5, r4, lsl #24
 80020aa:	5d9c      	ldrb	r4, [r3, r6]
 80020ac:	ea85 4504 	eor.w	r5, r5, r4, lsl #16
            ( (uint32_t) FSb[ MBEDTLS_BYTE_1( t.Y[0] ) ] <<  8 ) ^
 80020b0:	9c07      	ldr	r4, [sp, #28]
 80020b2:	5d1b      	ldrb	r3, [r3, r4]

    MBEDTLS_PUT_UINT32_LE( t.X[0], output,  0 );
 80020b4:	0a04      	lsrs	r4, r0, #8
 80020b6:	7054      	strb	r4, [r2, #1]
 80020b8:	0c04      	lsrs	r4, r0, #16
 80020ba:	7010      	strb	r0, [r2, #0]
 80020bc:	7094      	strb	r4, [r2, #2]
 80020be:	0e04      	lsrs	r4, r0, #24
    MBEDTLS_PUT_UINT32_LE( t.X[1], output,  4 );
 80020c0:	ea4f 201c 	mov.w	r0, ip, lsr #8
 80020c4:	7150      	strb	r0, [r2, #5]
 80020c6:	ea4f 401c 	mov.w	r0, ip, lsr #16
 80020ca:	7190      	strb	r0, [r2, #6]
 80020cc:	ea4f 601c 	mov.w	r0, ip, lsr #24
 80020d0:	71d0      	strb	r0, [r2, #7]
    MBEDTLS_PUT_UINT32_LE( t.X[2], output,  8 );
 80020d2:	0a08      	lsrs	r0, r1, #8
            ( (uint32_t) FSb[ MBEDTLS_BYTE_2( t.Y[1] ) ] << 16 ) ^
 80020d4:	ea85 2303 	eor.w	r3, r5, r3, lsl #8
    MBEDTLS_PUT_UINT32_LE( t.X[2], output,  8 );
 80020d8:	7211      	strb	r1, [r2, #8]
 80020da:	7250      	strb	r0, [r2, #9]
 80020dc:	0c08      	lsrs	r0, r1, #16
 80020de:	0e09      	lsrs	r1, r1, #24
 80020e0:	72d1      	strb	r1, [r2, #11]
    MBEDTLS_PUT_UINT32_LE( t.X[3], output, 12 );
 80020e2:	0a19      	lsrs	r1, r3, #8
 80020e4:	7351      	strb	r1, [r2, #13]
 80020e6:	0c19      	lsrs	r1, r3, #16
 80020e8:	7391      	strb	r1, [r2, #14]

    mbedtls_platform_zeroize( &t, sizeof( t ) );
 80020ea:	2120      	movs	r1, #32
    t.X[3] = *RK++ ^ \
 80020ec:	930b      	str	r3, [sp, #44]	@ 0x2c
    MBEDTLS_PUT_UINT32_LE( t.X[3], output, 12 );
 80020ee:	7313      	strb	r3, [r2, #12]
 80020f0:	0e1b      	lsrs	r3, r3, #24
    MBEDTLS_PUT_UINT32_LE( t.X[2], output,  8 );
 80020f2:	7290      	strb	r0, [r2, #10]
    MBEDTLS_PUT_UINT32_LE( t.X[0], output,  0 );
 80020f4:	70d4      	strb	r4, [r2, #3]
    mbedtls_platform_zeroize( &t, sizeof( t ) );
 80020f6:	eb0d 0001 	add.w	r0, sp, r1
    MBEDTLS_PUT_UINT32_LE( t.X[1], output,  4 );
 80020fa:	f882 c004 	strb.w	ip, [r2, #4]
    MBEDTLS_PUT_UINT32_LE( t.X[3], output, 12 );
 80020fe:	73d3      	strb	r3, [r2, #15]
    mbedtls_platform_zeroize( &t, sizeof( t ) );
 8002100:	f000 fa50 	bl	80025a4 <mbedtls_platform_zeroize>

    return( 0 );
}
 8002104:	2000      	movs	r0, #0
 8002106:	b011      	add	sp, #68	@ 0x44
 8002108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        AES_FROUND( t.Y[0], t.Y[1], t.Y[2], t.Y[3], t.X[0], t.X[1], t.X[2], t.X[3] );
 800210c:	900c      	str	r0, [sp, #48]	@ 0x30
 800210e:	f851 0c3c 	ldr.w	r0, [r1, #-60]
 8002112:	ea89 0300 	eor.w	r3, r9, r0
 8002116:	930d      	str	r3, [sp, #52]	@ 0x34
 8002118:	f851 0c38 	ldr.w	r0, [r1, #-56]
 800211c:	ea8e 0e00 	eor.w	lr, lr, r0
 8002120:	f8cd e038 	str.w	lr, [sp, #56]	@ 0x38
 8002124:	f851 0c34 	ldr.w	r0, [r1, #-52]
 8002128:	ea88 0000 	eor.w	r0, r8, r0
        AES_FROUND( t.X[0], t.X[1], t.X[2], t.X[3], t.Y[0], t.Y[1], t.Y[2], t.Y[3] );
 800212c:	f8dd 8010 	ldr.w	r8, [sp, #16]
        AES_FROUND( t.Y[0], t.Y[1], t.Y[2], t.Y[3], t.X[0], t.X[1], t.X[2], t.X[3] );
 8002130:	900f      	str	r0, [sp, #60]	@ 0x3c
        AES_FROUND( t.X[0], t.X[1], t.X[2], t.X[3], t.Y[0], t.Y[1], t.Y[2], t.Y[3] );
 8002132:	f851 9c30 	ldr.w	r9, [r1, #-48]
 8002136:	f857 8028 	ldr.w	r8, [r7, r8, lsl #2]
 800213a:	ea89 0808 	eor.w	r8, r9, r8
 800213e:	ea4f 6910 	mov.w	r9, r0, lsr #24
 8002142:	f856 9029 	ldr.w	r9, [r6, r9, lsl #2]
 8002146:	ea88 0809 	eor.w	r8, r8, r9
 800214a:	f3c3 2907 	ubfx	r9, r3, #8, #8
 800214e:	f855 9029 	ldr.w	r9, [r5, r9, lsl #2]
 8002152:	ea88 0809 	eor.w	r8, r8, r9
 8002156:	f3ce 4907 	ubfx	r9, lr, #16, #8
 800215a:	f854 9029 	ldr.w	r9, [r4, r9, lsl #2]
 800215e:	ea88 0809 	eor.w	r8, r8, r9
 8002162:	f8cd 8020 	str.w	r8, [sp, #32]
 8002166:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800216a:	f851 9c2c 	ldr.w	r9, [r1, #-44]
 800216e:	f856 8028 	ldr.w	r8, [r6, r8, lsl #2]
 8002172:	ea89 0808 	eor.w	r8, r9, r8
 8002176:	fa5f f983 	uxtb.w	r9, r3
 800217a:	f857 9029 	ldr.w	r9, [r7, r9, lsl #2]
 800217e:	ea88 0809 	eor.w	r8, r8, r9
 8002182:	f3ce 2907 	ubfx	r9, lr, #8, #8
 8002186:	f855 9029 	ldr.w	r9, [r5, r9, lsl #2]
 800218a:	ea88 0809 	eor.w	r8, r8, r9
 800218e:	f3c0 4907 	ubfx	r9, r0, #16, #8
 8002192:	f854 9029 	ldr.w	r9, [r4, r9, lsl #2]
 8002196:	ea88 0809 	eor.w	r8, r8, r9
 800219a:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 800219e:	fa5f f88e 	uxtb.w	r8, lr
 80021a2:	f857 9028 	ldr.w	r9, [r7, r8, lsl #2]
 80021a6:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80021aa:	ea4f 6e1e 	mov.w	lr, lr, lsr #24
 80021ae:	f854 8028 	ldr.w	r8, [r4, r8, lsl #2]
 80021b2:	ea89 0808 	eor.w	r8, r9, r8
 80021b6:	f851 9c28 	ldr.w	r9, [r1, #-40]
 80021ba:	ea88 0809 	eor.w	r8, r8, r9
 80021be:	ea4f 6913 	mov.w	r9, r3, lsr #24
 80021c2:	f856 9029 	ldr.w	r9, [r6, r9, lsl #2]
 80021c6:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80021ca:	ea88 0809 	eor.w	r8, r8, r9
 80021ce:	f3c0 2907 	ubfx	r9, r0, #8, #8
 80021d2:	f855 9029 	ldr.w	r9, [r5, r9, lsl #2]
 80021d6:	b2c0      	uxtb	r0, r0
 80021d8:	ea88 0809 	eor.w	r8, r8, r9
 80021dc:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80021e0:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80021e4:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 80021e8:	f855 8028 	ldr.w	r8, [r5, r8, lsl #2]
 80021ec:	ea80 0808 	eor.w	r8, r0, r8
 80021f0:	f851 0c24 	ldr.w	r0, [r1, #-36]
 80021f4:	f856 e02e 	ldr.w	lr, [r6, lr, lsl #2]
 80021f8:	ea88 0000 	eor.w	r0, r8, r0
 80021fc:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8002200:	ea80 000e 	eor.w	r0, r0, lr
 8002204:	4043      	eors	r3, r0
 8002206:	930b      	str	r3, [sp, #44]	@ 0x2c
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8002208:	9b01      	ldr	r3, [sp, #4]
 800220a:	3b01      	subs	r3, #1
 800220c:	9301      	str	r3, [sp, #4]
 800220e:	e67c      	b.n	8001f0a <mbedtls_internal_aes_encrypt+0x52>
 8002210:	20001eac 	.word	0x20001eac
 8002214:	200012ac 	.word	0x200012ac
 8002218:	20001aac 	.word	0x20001aac
 800221c:	200016ac 	.word	0x200016ac
 8002220:	200022ac 	.word	0x200022ac

08002224 <mbedtls_internal_aes_decrypt>:
 */
#if !defined(MBEDTLS_AES_DECRYPT_ALT)
int mbedtls_internal_aes_decrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
 8002224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    {
        uint32_t X[4];
        uint32_t Y[4];
    } t;

    t.X[0] = MBEDTLS_GET_UINT32_LE( input,  0 ); t.X[0] ^= *RK++;
 8002228:	680c      	ldr	r4, [r1, #0]
{
 800222a:	b091      	sub	sp, #68	@ 0x44
    uint32_t *RK = ctx->rk;
 800222c:	f8d0 c004 	ldr.w	ip, [r0, #4]
    t.X[0] = MBEDTLS_GET_UINT32_LE( input,  0 ); t.X[0] ^= *RK++;
 8002230:	9408      	str	r4, [sp, #32]
 8002232:	f8dc 3000 	ldr.w	r3, [ip]
    t.X[2] = MBEDTLS_GET_UINT32_LE( input,  8 ); t.X[2] ^= *RK++;
    t.X[3] = MBEDTLS_GET_UINT32_LE( input, 12 ); t.X[3] ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    {
        AES_RROUND( t.Y[0], t.Y[1], t.Y[2], t.Y[3], t.X[0], t.X[1], t.X[2], t.X[3] );
 8002236:	4fd0      	ldr	r7, [pc, #832]	@ (8002578 <mbedtls_internal_aes_decrypt+0x354>)
    t.X[0] = MBEDTLS_GET_UINT32_LE( input,  0 ); t.X[0] ^= *RK++;
 8002238:	4063      	eors	r3, r4
    t.X[1] = MBEDTLS_GET_UINT32_LE( input,  4 ); t.X[1] ^= *RK++;
 800223a:	684c      	ldr	r4, [r1, #4]
    t.X[0] = MBEDTLS_GET_UINT32_LE( input,  0 ); t.X[0] ^= *RK++;
 800223c:	9308      	str	r3, [sp, #32]
    t.X[1] = MBEDTLS_GET_UINT32_LE( input,  4 ); t.X[1] ^= *RK++;
 800223e:	9409      	str	r4, [sp, #36]	@ 0x24
 8002240:	f8dc 3004 	ldr.w	r3, [ip, #4]
        AES_RROUND( t.Y[0], t.Y[1], t.Y[2], t.Y[3], t.X[0], t.X[1], t.X[2], t.X[3] );
 8002244:	4ecd      	ldr	r6, [pc, #820]	@ (800257c <mbedtls_internal_aes_decrypt+0x358>)
    t.X[1] = MBEDTLS_GET_UINT32_LE( input,  4 ); t.X[1] ^= *RK++;
 8002246:	4063      	eors	r3, r4
    t.X[2] = MBEDTLS_GET_UINT32_LE( input,  8 ); t.X[2] ^= *RK++;
 8002248:	688c      	ldr	r4, [r1, #8]
    t.X[1] = MBEDTLS_GET_UINT32_LE( input,  4 ); t.X[1] ^= *RK++;
 800224a:	9309      	str	r3, [sp, #36]	@ 0x24
    t.X[2] = MBEDTLS_GET_UINT32_LE( input,  8 ); t.X[2] ^= *RK++;
 800224c:	940a      	str	r4, [sp, #40]	@ 0x28
 800224e:	f8dc 3008 	ldr.w	r3, [ip, #8]
    t.X[3] = MBEDTLS_GET_UINT32_LE( input, 12 ); t.X[3] ^= *RK++;
 8002252:	68c9      	ldr	r1, [r1, #12]
    t.X[2] = MBEDTLS_GET_UINT32_LE( input,  8 ); t.X[2] ^= *RK++;
 8002254:	4063      	eors	r3, r4
    t.X[3] = MBEDTLS_GET_UINT32_LE( input, 12 ); t.X[3] ^= *RK++;
 8002256:	910b      	str	r1, [sp, #44]	@ 0x2c
    t.X[2] = MBEDTLS_GET_UINT32_LE( input,  8 ); t.X[2] ^= *RK++;
 8002258:	930a      	str	r3, [sp, #40]	@ 0x28
    t.X[3] = MBEDTLS_GET_UINT32_LE( input, 12 ); t.X[3] ^= *RK++;
 800225a:	f8dc 300c 	ldr.w	r3, [ip, #12]
        AES_RROUND( t.Y[0], t.Y[1], t.Y[2], t.Y[3], t.X[0], t.X[1], t.X[2], t.X[3] );
 800225e:	4dc8      	ldr	r5, [pc, #800]	@ (8002580 <mbedtls_internal_aes_decrypt+0x35c>)
    t.X[3] = MBEDTLS_GET_UINT32_LE( input, 12 ); t.X[3] ^= *RK++;
 8002260:	404b      	eors	r3, r1
 8002262:	930b      	str	r3, [sp, #44]	@ 0x2c
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8002264:	6803      	ldr	r3, [r0, #0]
        AES_RROUND( t.Y[0], t.Y[1], t.Y[2], t.Y[3], t.X[0], t.X[1], t.X[2], t.X[3] );
 8002266:	4cc7      	ldr	r4, [pc, #796]	@ (8002584 <mbedtls_internal_aes_decrypt+0x360>)
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8002268:	105b      	asrs	r3, r3, #1
 800226a:	9302      	str	r3, [sp, #8]
 800226c:	3b01      	subs	r3, #1
 800226e:	9303      	str	r3, [sp, #12]
 8002270:	f10c 0130 	add.w	r1, ip, #48	@ 0x30
 8002274:	9301      	str	r3, [sp, #4]
        AES_RROUND( t.Y[0], t.Y[1], t.Y[2], t.Y[3], t.X[0], t.X[1], t.X[2], t.X[3] );
 8002276:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800227a:	e9dd ba09 	ldrd	fp, sl, [sp, #36]	@ 0x24
 800227e:	fa5f f389 	uxtb.w	r3, r9
 8002282:	ea4f 601b 	mov.w	r0, fp, lsr #24
 8002286:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 800228a:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 800228e:	3120      	adds	r1, #32
        AES_RROUND( t.Y[0], t.Y[1], t.Y[2], t.Y[3], t.X[0], t.X[1], t.X[2], t.X[3] );
 8002290:	4043      	eors	r3, r0
 8002292:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8002294:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8002298:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 800229c:	4043      	eors	r3, r0
 800229e:	f3ca 4007 	ubfx	r0, sl, #16, #8
 80022a2:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 80022a6:	4058      	eors	r0, r3
 80022a8:	f851 3c40 	ldr.w	r3, [r1, #-64]
 80022ac:	4058      	eors	r0, r3
        AES_RROUND( t.X[0], t.X[1], t.X[2], t.X[3], t.Y[0], t.Y[1], t.Y[2], t.Y[3] );
 80022ae:	b2c3      	uxtb	r3, r0
 80022b0:	9304      	str	r3, [sp, #16]
 80022b2:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80022b6:	9305      	str	r3, [sp, #20]
 80022b8:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80022bc:	9306      	str	r3, [sp, #24]
 80022be:	0e03      	lsrs	r3, r0, #24
 80022c0:	9307      	str	r3, [sp, #28]
        AES_RROUND( t.Y[0], t.Y[1], t.Y[2], t.Y[3], t.X[0], t.X[1], t.X[2], t.X[3] );
 80022c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80022c4:	fa5f fe83 	uxtb.w	lr, r3
 80022c8:	ea4f 6319 	mov.w	r3, r9, lsr #24
 80022cc:	f857 802e 	ldr.w	r8, [r7, lr, lsl #2]
 80022d0:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80022d4:	fa5f fe8a 	uxtb.w	lr, sl
 80022d8:	ea88 0803 	eor.w	r8, r8, r3
 80022dc:	f3ca 2307 	ubfx	r3, sl, #8, #8
 80022e0:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80022e4:	f857 e02e 	ldr.w	lr, [r7, lr, lsl #2]
 80022e8:	ea88 0803 	eor.w	r8, r8, r3
 80022ec:	f3cb 4307 	ubfx	r3, fp, #16, #8
 80022f0:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80022f4:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 80022f8:	ea88 0803 	eor.w	r8, r8, r3
 80022fc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80022fe:	f856 a02a 	ldr.w	sl, [r6, sl, lsl #2]
 8002302:	0e1b      	lsrs	r3, r3, #24
 8002304:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8002308:	ea8e 0e03 	eor.w	lr, lr, r3
 800230c:	f3cb 2307 	ubfx	r3, fp, #8, #8
 8002310:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8002314:	fa5f fb8b 	uxtb.w	fp, fp
 8002318:	ea8e 0e03 	eor.w	lr, lr, r3
 800231c:	f3c9 4307 	ubfx	r3, r9, #16, #8
 8002320:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8002324:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8002328:	ea8e 0e03 	eor.w	lr, lr, r3
 800232c:	f857 302b 	ldr.w	r3, [r7, fp, lsl #2]
 8002330:	ea83 0a0a 	eor.w	sl, r3, sl
 8002334:	f855 3029 	ldr.w	r3, [r5, r9, lsl #2]
 8002338:	ea8a 0903 	eor.w	r9, sl, r3
 800233c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800233e:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8002342:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8002346:	ea89 0903 	eor.w	r9, r9, r3
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 800234a:	9b01      	ldr	r3, [sp, #4]
 800234c:	2b00      	cmp	r3, #0
 800234e:	f300 8090 	bgt.w	8002472 <mbedtls_internal_aes_decrypt+0x24e>
 8002352:	9b03      	ldr	r3, [sp, #12]
    }

    AES_RROUND( t.Y[0], t.Y[1], t.Y[2], t.Y[3], t.X[0], t.X[1], t.X[2], t.X[3] );
 8002354:	900c      	str	r0, [sp, #48]	@ 0x30
 8002356:	015c      	lsls	r4, r3, #5
 8002358:	9b02      	ldr	r3, [sp, #8]
 800235a:	2b00      	cmp	r3, #0
 800235c:	bfd8      	it	le
 800235e:	2400      	movle	r4, #0
 8002360:	3410      	adds	r4, #16
 8002362:	4464      	add	r4, ip
 8002364:	6861      	ldr	r1, [r4, #4]
 8002366:	ea89 0601 	eor.w	r6, r9, r1
 800236a:	960d      	str	r6, [sp, #52]	@ 0x34
 800236c:	68a3      	ldr	r3, [r4, #8]

    t.X[0] = *RK++ ^ \
            ( (uint32_t) RSb[ MBEDTLS_BYTE_0( t.Y[0] ) ]       ) ^
            ( (uint32_t) RSb[ MBEDTLS_BYTE_1( t.Y[3] ) ] <<  8 ) ^
            ( (uint32_t) RSb[ MBEDTLS_BYTE_2( t.Y[2] ) ] << 16 ) ^
            ( (uint32_t) RSb[ MBEDTLS_BYTE_3( t.Y[1] ) ] << 24 );
 800236e:	0e31      	lsrs	r1, r6, #24
    AES_RROUND( t.Y[0], t.Y[1], t.Y[2], t.Y[3], t.X[0], t.X[1], t.X[2], t.X[3] );
 8002370:	ea8e 0503 	eor.w	r5, lr, r3
 8002374:	950e      	str	r5, [sp, #56]	@ 0x38
 8002376:	68e0      	ldr	r0, [r4, #12]
            ( (uint32_t) RSb[ MBEDTLS_BYTE_3( t.Y[1] ) ] << 24 );
 8002378:	4b83      	ldr	r3, [pc, #524]	@ (8002588 <mbedtls_internal_aes_decrypt+0x364>)
    AES_RROUND( t.Y[0], t.Y[1], t.Y[2], t.Y[3], t.X[0], t.X[1], t.X[2], t.X[3] );
 800237a:	ea88 0c00 	eor.w	ip, r8, r0
 800237e:	f8cd c03c 	str.w	ip, [sp, #60]	@ 0x3c
            ( (uint32_t) RSb[ MBEDTLS_BYTE_3( t.Y[1] ) ] << 24 );
 8002382:	5c59      	ldrb	r1, [r3, r1]
            ( (uint32_t) RSb[ MBEDTLS_BYTE_2( t.Y[2] ) ] << 16 ) ^
 8002384:	6920      	ldr	r0, [r4, #16]
 8002386:	ea80 6701 	eor.w	r7, r0, r1, lsl #24
            ( (uint32_t) RSb[ MBEDTLS_BYTE_1( t.Y[3] ) ] <<  8 ) ^
 800238a:	f3cc 2107 	ubfx	r1, ip, #8, #8
 800238e:	5c59      	ldrb	r1, [r3, r1]
            ( (uint32_t) RSb[ MBEDTLS_BYTE_2( t.Y[2] ) ] << 16 ) ^
 8002390:	ea87 2701 	eor.w	r7, r7, r1, lsl #8
 8002394:	f3c5 4107 	ubfx	r1, r5, #16, #8
 8002398:	5c59      	ldrb	r1, [r3, r1]
 800239a:	ea87 4701 	eor.w	r7, r7, r1, lsl #16
            ( (uint32_t) RSb[ MBEDTLS_BYTE_0( t.Y[0] ) ]       ) ^
 800239e:	9904      	ldr	r1, [sp, #16]
 80023a0:	5c59      	ldrb	r1, [r3, r1]
            ( (uint32_t) RSb[ MBEDTLS_BYTE_2( t.Y[2] ) ] << 16 ) ^
 80023a2:	404f      	eors	r7, r1

    t.X[1] = *RK++ ^ \
            ( (uint32_t) RSb[ MBEDTLS_BYTE_0( t.Y[1] ) ]       ) ^
 80023a4:	b2f1      	uxtb	r1, r6
 80023a6:	5c58      	ldrb	r0, [r3, r1]
            ( (uint32_t) RSb[ MBEDTLS_BYTE_1( t.Y[0] ) ] <<  8 ) ^
            ( (uint32_t) RSb[ MBEDTLS_BYTE_2( t.Y[3] ) ] << 16 ) ^
 80023a8:	6961      	ldr	r1, [r4, #20]
    t.X[0] = *RK++ ^ \
 80023aa:	9708      	str	r7, [sp, #32]
            ( (uint32_t) RSb[ MBEDTLS_BYTE_2( t.Y[3] ) ] << 16 ) ^
 80023ac:	4048      	eors	r0, r1
            ( (uint32_t) RSb[ MBEDTLS_BYTE_3( t.Y[2] ) ] << 24 );
 80023ae:	0e29      	lsrs	r1, r5, #24
 80023b0:	5c59      	ldrb	r1, [r3, r1]
            ( (uint32_t) RSb[ MBEDTLS_BYTE_2( t.Y[3] ) ] << 16 ) ^
 80023b2:	ea80 6001 	eor.w	r0, r0, r1, lsl #24
 80023b6:	f3cc 4107 	ubfx	r1, ip, #16, #8
 80023ba:	5c59      	ldrb	r1, [r3, r1]
 80023bc:	ea80 4001 	eor.w	r0, r0, r1, lsl #16
            ( (uint32_t) RSb[ MBEDTLS_BYTE_1( t.Y[0] ) ] <<  8 ) ^
 80023c0:	9905      	ldr	r1, [sp, #20]
 80023c2:	5c59      	ldrb	r1, [r3, r1]
            ( (uint32_t) RSb[ MBEDTLS_BYTE_2( t.Y[3] ) ] << 16 ) ^
 80023c4:	ea80 2001 	eor.w	r0, r0, r1, lsl #8

    t.X[2] = *RK++ ^ \
            ( (uint32_t) RSb[ MBEDTLS_BYTE_0( t.Y[2] ) ]       ) ^
 80023c8:	b2e9      	uxtb	r1, r5
 80023ca:	f813 e001 	ldrb.w	lr, [r3, r1]
            ( (uint32_t) RSb[ MBEDTLS_BYTE_1( t.Y[1] ) ] <<  8 ) ^
            ( (uint32_t) RSb[ MBEDTLS_BYTE_2( t.Y[0] ) ] << 16 ) ^
 80023ce:	69a1      	ldr	r1, [r4, #24]
            ( (uint32_t) RSb[ MBEDTLS_BYTE_3( t.Y[3] ) ] << 24 );

    t.X[3] = *RK++ ^ \
            ( (uint32_t) RSb[ MBEDTLS_BYTE_0( t.Y[3] ) ]       ) ^
            ( (uint32_t) RSb[ MBEDTLS_BYTE_1( t.Y[2] ) ] <<  8 ) ^
 80023d0:	f3c5 2507 	ubfx	r5, r5, #8, #8
            ( (uint32_t) RSb[ MBEDTLS_BYTE_2( t.Y[0] ) ] << 16 ) ^
 80023d4:	ea8e 0101 	eor.w	r1, lr, r1
            ( (uint32_t) RSb[ MBEDTLS_BYTE_3( t.Y[3] ) ] << 24 );
 80023d8:	ea4f 6e1c 	mov.w	lr, ip, lsr #24
 80023dc:	f813 e00e 	ldrb.w	lr, [r3, lr]
            ( (uint32_t) RSb[ MBEDTLS_BYTE_0( t.Y[3] ) ]       ) ^
 80023e0:	fa5f fc8c 	uxtb.w	ip, ip
            ( (uint32_t) RSb[ MBEDTLS_BYTE_2( t.Y[0] ) ] << 16 ) ^
 80023e4:	ea81 610e 	eor.w	r1, r1, lr, lsl #24
            ( (uint32_t) RSb[ MBEDTLS_BYTE_1( t.Y[1] ) ] <<  8 ) ^
 80023e8:	f3c6 2e07 	ubfx	lr, r6, #8, #8
 80023ec:	f813 e00e 	ldrb.w	lr, [r3, lr]
    t.X[1] = *RK++ ^ \
 80023f0:	9009      	str	r0, [sp, #36]	@ 0x24
            ( (uint32_t) RSb[ MBEDTLS_BYTE_2( t.Y[0] ) ] << 16 ) ^
 80023f2:	ea81 210e 	eor.w	r1, r1, lr, lsl #8
 80023f6:	f8dd e018 	ldr.w	lr, [sp, #24]
            ( (uint32_t) RSb[ MBEDTLS_BYTE_2( t.Y[1] ) ] << 16 ) ^
 80023fa:	f3c6 4607 	ubfx	r6, r6, #16, #8
            ( (uint32_t) RSb[ MBEDTLS_BYTE_2( t.Y[0] ) ] << 16 ) ^
 80023fe:	f813 e00e 	ldrb.w	lr, [r3, lr]
 8002402:	ea81 410e 	eor.w	r1, r1, lr, lsl #16
    t.X[2] = *RK++ ^ \
 8002406:	910a      	str	r1, [sp, #40]	@ 0x28
            ( (uint32_t) RSb[ MBEDTLS_BYTE_1( t.Y[2] ) ] <<  8 ) ^
 8002408:	f813 e005 	ldrb.w	lr, [r3, r5]
            ( (uint32_t) RSb[ MBEDTLS_BYTE_0( t.Y[3] ) ]       ) ^
 800240c:	f813 500c 	ldrb.w	r5, [r3, ip]
            ( (uint32_t) RSb[ MBEDTLS_BYTE_2( t.Y[1] ) ] << 16 ) ^
 8002410:	69e4      	ldr	r4, [r4, #28]
 8002412:	4065      	eors	r5, r4
 8002414:	5d9c      	ldrb	r4, [r3, r6]
 8002416:	ea85 250e 	eor.w	r5, r5, lr, lsl #8
 800241a:	ea85 4504 	eor.w	r5, r5, r4, lsl #16
            ( (uint32_t) RSb[ MBEDTLS_BYTE_3( t.Y[0] ) ] << 24 );
 800241e:	9c07      	ldr	r4, [sp, #28]
 8002420:	5d1b      	ldrb	r3, [r3, r4]

    MBEDTLS_PUT_UINT32_LE( t.X[0], output,  0 );
 8002422:	0a3c      	lsrs	r4, r7, #8
 8002424:	7054      	strb	r4, [r2, #1]
 8002426:	0c3c      	lsrs	r4, r7, #16
 8002428:	7094      	strb	r4, [r2, #2]
 800242a:	0e3c      	lsrs	r4, r7, #24
 800242c:	70d4      	strb	r4, [r2, #3]
    MBEDTLS_PUT_UINT32_LE( t.X[1], output,  4 );
 800242e:	0a04      	lsrs	r4, r0, #8
 8002430:	7110      	strb	r0, [r2, #4]
 8002432:	7154      	strb	r4, [r2, #5]
 8002434:	0c04      	lsrs	r4, r0, #16
 8002436:	0e00      	lsrs	r0, r0, #24
 8002438:	71d0      	strb	r0, [r2, #7]
    MBEDTLS_PUT_UINT32_LE( t.X[2], output,  8 );
 800243a:	0a08      	lsrs	r0, r1, #8
            ( (uint32_t) RSb[ MBEDTLS_BYTE_2( t.Y[1] ) ] << 16 ) ^
 800243c:	ea85 6303 	eor.w	r3, r5, r3, lsl #24
    MBEDTLS_PUT_UINT32_LE( t.X[2], output,  8 );
 8002440:	7211      	strb	r1, [r2, #8]
 8002442:	7250      	strb	r0, [r2, #9]
 8002444:	0c08      	lsrs	r0, r1, #16
 8002446:	0e09      	lsrs	r1, r1, #24
 8002448:	72d1      	strb	r1, [r2, #11]
    MBEDTLS_PUT_UINT32_LE( t.X[3], output, 12 );
 800244a:	0a19      	lsrs	r1, r3, #8
 800244c:	7351      	strb	r1, [r2, #13]
 800244e:	0c19      	lsrs	r1, r3, #16
 8002450:	7391      	strb	r1, [r2, #14]

    mbedtls_platform_zeroize( &t, sizeof( t ) );
 8002452:	2120      	movs	r1, #32
    t.X[3] = *RK++ ^ \
 8002454:	930b      	str	r3, [sp, #44]	@ 0x2c
    MBEDTLS_PUT_UINT32_LE( t.X[3], output, 12 );
 8002456:	7313      	strb	r3, [r2, #12]
 8002458:	0e1b      	lsrs	r3, r3, #24
    MBEDTLS_PUT_UINT32_LE( t.X[2], output,  8 );
 800245a:	7290      	strb	r0, [r2, #10]
    MBEDTLS_PUT_UINT32_LE( t.X[0], output,  0 );
 800245c:	7017      	strb	r7, [r2, #0]
    mbedtls_platform_zeroize( &t, sizeof( t ) );
 800245e:	eb0d 0001 	add.w	r0, sp, r1
    MBEDTLS_PUT_UINT32_LE( t.X[1], output,  4 );
 8002462:	7194      	strb	r4, [r2, #6]
    MBEDTLS_PUT_UINT32_LE( t.X[3], output, 12 );
 8002464:	73d3      	strb	r3, [r2, #15]
    mbedtls_platform_zeroize( &t, sizeof( t ) );
 8002466:	f000 f89d 	bl	80025a4 <mbedtls_platform_zeroize>

    return( 0 );
}
 800246a:	2000      	movs	r0, #0
 800246c:	b011      	add	sp, #68	@ 0x44
 800246e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        AES_RROUND( t.Y[0], t.Y[1], t.Y[2], t.Y[3], t.X[0], t.X[1], t.X[2], t.X[3] );
 8002472:	900c      	str	r0, [sp, #48]	@ 0x30
 8002474:	f851 0c3c 	ldr.w	r0, [r1, #-60]
 8002478:	ea89 0300 	eor.w	r3, r9, r0
 800247c:	930d      	str	r3, [sp, #52]	@ 0x34
 800247e:	f851 0c38 	ldr.w	r0, [r1, #-56]
 8002482:	ea8e 0e00 	eor.w	lr, lr, r0
 8002486:	f8cd e038 	str.w	lr, [sp, #56]	@ 0x38
 800248a:	f851 0c34 	ldr.w	r0, [r1, #-52]
 800248e:	ea88 0000 	eor.w	r0, r8, r0
        AES_RROUND( t.X[0], t.X[1], t.X[2], t.X[3], t.Y[0], t.Y[1], t.Y[2], t.Y[3] );
 8002492:	f8dd 8010 	ldr.w	r8, [sp, #16]
        AES_RROUND( t.Y[0], t.Y[1], t.Y[2], t.Y[3], t.X[0], t.X[1], t.X[2], t.X[3] );
 8002496:	900f      	str	r0, [sp, #60]	@ 0x3c
        AES_RROUND( t.X[0], t.X[1], t.X[2], t.X[3], t.Y[0], t.Y[1], t.Y[2], t.Y[3] );
 8002498:	f851 9c30 	ldr.w	r9, [r1, #-48]
 800249c:	f857 8028 	ldr.w	r8, [r7, r8, lsl #2]
 80024a0:	ea89 0808 	eor.w	r8, r9, r8
 80024a4:	ea4f 6913 	mov.w	r9, r3, lsr #24
 80024a8:	f856 9029 	ldr.w	r9, [r6, r9, lsl #2]
 80024ac:	ea88 0809 	eor.w	r8, r8, r9
 80024b0:	f3c0 2907 	ubfx	r9, r0, #8, #8
 80024b4:	f855 9029 	ldr.w	r9, [r5, r9, lsl #2]
 80024b8:	ea88 0809 	eor.w	r8, r8, r9
 80024bc:	f3ce 4907 	ubfx	r9, lr, #16, #8
 80024c0:	f854 9029 	ldr.w	r9, [r4, r9, lsl #2]
 80024c4:	ea88 0809 	eor.w	r8, r8, r9
 80024c8:	f8cd 8020 	str.w	r8, [sp, #32]
 80024cc:	fa5f f883 	uxtb.w	r8, r3
 80024d0:	f857 9028 	ldr.w	r9, [r7, r8, lsl #2]
 80024d4:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80024d8:	f855 8028 	ldr.w	r8, [r5, r8, lsl #2]
 80024dc:	ea89 0808 	eor.w	r8, r9, r8
 80024e0:	f851 9c2c 	ldr.w	r9, [r1, #-44]
 80024e4:	ea88 0809 	eor.w	r8, r8, r9
 80024e8:	ea4f 691e 	mov.w	r9, lr, lsr #24
 80024ec:	f856 9029 	ldr.w	r9, [r6, r9, lsl #2]
 80024f0:	ea88 0809 	eor.w	r8, r8, r9
 80024f4:	f3c0 4907 	ubfx	r9, r0, #16, #8
 80024f8:	f854 9029 	ldr.w	r9, [r4, r9, lsl #2]
 80024fc:	ea88 0809 	eor.w	r8, r8, r9
 8002500:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 8002504:	fa5f f88e 	uxtb.w	r8, lr
 8002508:	f857 9028 	ldr.w	r9, [r7, r8, lsl #2]
 800250c:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8002510:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 8002514:	f854 8028 	ldr.w	r8, [r4, r8, lsl #2]
 8002518:	ea89 0808 	eor.w	r8, r9, r8
 800251c:	f851 9c28 	ldr.w	r9, [r1, #-40]
 8002520:	ea88 0809 	eor.w	r8, r8, r9
 8002524:	ea4f 6910 	mov.w	r9, r0, lsr #24
 8002528:	f856 9029 	ldr.w	r9, [r6, r9, lsl #2]
 800252c:	b2c0      	uxtb	r0, r0
 800252e:	ea88 0809 	eor.w	r8, r8, r9
 8002532:	f3c3 2907 	ubfx	r9, r3, #8, #8
 8002536:	f855 9029 	ldr.w	r9, [r5, r9, lsl #2]
 800253a:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 800253e:	ea88 0809 	eor.w	r8, r8, r9
 8002542:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8002546:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800254a:	f851 9c24 	ldr.w	r9, [r1, #-36]
 800254e:	f856 8028 	ldr.w	r8, [r6, r8, lsl #2]
 8002552:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8002556:	f855 e02e 	ldr.w	lr, [r5, lr, lsl #2]
 800255a:	ea89 0808 	eor.w	r8, r9, r8
 800255e:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8002562:	ea88 0000 	eor.w	r0, r8, r0
 8002566:	ea80 000e 	eor.w	r0, r0, lr
 800256a:	4043      	eors	r3, r0
 800256c:	930b      	str	r3, [sp, #44]	@ 0x2c
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 800256e:	9b01      	ldr	r3, [sp, #4]
 8002570:	3b01      	subs	r3, #1
 8002572:	9301      	str	r3, [sp, #4]
 8002574:	e67f      	b.n	8002276 <mbedtls_internal_aes_decrypt+0x52>
 8002576:	bf00      	nop
 8002578:	20000dac 	.word	0x20000dac
 800257c:	200001ac 	.word	0x200001ac
 8002580:	200009ac 	.word	0x200009ac
 8002584:	200005ac 	.word	0x200005ac
 8002588:	200011ac 	.word	0x200011ac

0800258c <mbedtls_aes_crypt_ecb>:
 */
int mbedtls_aes_crypt_ecb( mbedtls_aes_context *ctx,
                           int mode,
                           const unsigned char input[16],
                           unsigned char output[16] )
{
 800258c:	b410      	push	{r4}
 800258e:	460c      	mov	r4, r1
        // unaccelerated mode
        //
    }
#endif

    if( mode == MBEDTLS_AES_ENCRYPT )
 8002590:	2c01      	cmp	r4, #1
{
 8002592:	4611      	mov	r1, r2
 8002594:	461a      	mov	r2, r3
    if( mode == MBEDTLS_AES_ENCRYPT )
 8002596:	d102      	bne.n	800259e <mbedtls_aes_crypt_ecb+0x12>
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
    else
        return( mbedtls_internal_aes_decrypt( ctx, input, output ) );
}
 8002598:	bc10      	pop	{r4}
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
 800259a:	f7ff bc8d 	b.w	8001eb8 <mbedtls_internal_aes_encrypt>
}
 800259e:	bc10      	pop	{r4}
        return( mbedtls_internal_aes_decrypt( ctx, input, output ) );
 80025a0:	f7ff be40 	b.w	8002224 <mbedtls_internal_aes_decrypt>

080025a4 <mbedtls_platform_zeroize>:

void mbedtls_platform_zeroize( void *buf, size_t len )
{
    MBEDTLS_INTERNAL_VALIDATE( len == 0 || buf != NULL );

    if( len > 0 )
 80025a4:	460a      	mov	r2, r1
 80025a6:	b119      	cbz	r1, 80025b0 <mbedtls_platform_zeroize+0xc>
        memset_func( buf, 0, len );
 80025a8:	4b02      	ldr	r3, [pc, #8]	@ (80025b4 <mbedtls_platform_zeroize+0x10>)
 80025aa:	2100      	movs	r1, #0
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4718      	bx	r3
}
 80025b0:	4770      	bx	lr
 80025b2:	bf00      	nop
 80025b4:	20000030 	.word	0x20000030

080025b8 <mbedtls_sha256_init>:

void mbedtls_sha256_init( mbedtls_sha256_context *ctx )
{
    SHA256_VALIDATE( ctx != NULL );

    memset( ctx, 0, sizeof( mbedtls_sha256_context ) );
 80025b8:	226c      	movs	r2, #108	@ 0x6c
 80025ba:	2100      	movs	r1, #0
 80025bc:	f000 bcd4 	b.w	8002f68 <memset>

080025c0 <mbedtls_sha256_free>:
}

void mbedtls_sha256_free( mbedtls_sha256_context *ctx )
{
    if( ctx == NULL )
 80025c0:	b110      	cbz	r0, 80025c8 <mbedtls_sha256_free+0x8>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_sha256_context ) );
 80025c2:	216c      	movs	r1, #108	@ 0x6c
 80025c4:	f7ff bfee 	b.w	80025a4 <mbedtls_platform_zeroize>
}
 80025c8:	4770      	bx	lr
	...

080025cc <mbedtls_sha256_starts_ret>:
    SHA256_VALIDATE_RET( is224 == 0 || is224 == 1 );

    ctx->total[0] = 0;
    ctx->total[1] = 0;

    if( is224 == 0 )
 80025cc:	4a23      	ldr	r2, [pc, #140]	@ (800265c <mbedtls_sha256_starts_ret+0x90>)
{
 80025ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if( is224 == 0 )
 80025d2:	f1b1 0800 	subs.w	r8, r1, #0
 80025d6:	bf18      	it	ne
 80025d8:	4696      	movne	lr, r2
 80025da:	4a21      	ldr	r2, [pc, #132]	@ (8002660 <mbedtls_sha256_starts_ret+0x94>)
 80025dc:	4921      	ldr	r1, [pc, #132]	@ (8002664 <mbedtls_sha256_starts_ret+0x98>)
 80025de:	bf18      	it	ne
 80025e0:	4694      	movne	ip, r2
 80025e2:	f102 4279 	add.w	r2, r2, #4177526784	@ 0xf9000000
 80025e6:	bf08      	it	eq
 80025e8:	468e      	moveq	lr, r1
 80025ea:	f502 0274 	add.w	r2, r2, #15990784	@ 0xf40000
 80025ee:	491e      	ldr	r1, [pc, #120]	@ (8002668 <mbedtls_sha256_starts_ret+0x9c>)
 80025f0:	f502 6201 	add.w	r2, r2, #2064	@ 0x810
 80025f4:	bf08      	it	eq
 80025f6:	468c      	moveq	ip, r1
 80025f8:	491c      	ldr	r1, [pc, #112]	@ (800266c <mbedtls_sha256_starts_ret+0xa0>)
 80025fa:	bf18      	it	ne
 80025fc:	4611      	movne	r1, r2
 80025fe:	4a1c      	ldr	r2, [pc, #112]	@ (8002670 <mbedtls_sha256_starts_ret+0xa4>)
 8002600:	4f1c      	ldr	r7, [pc, #112]	@ (8002674 <mbedtls_sha256_starts_ret+0xa8>)
 8002602:	bf18      	it	ne
 8002604:	4617      	movne	r7, r2
 8002606:	4a1c      	ldr	r2, [pc, #112]	@ (8002678 <mbedtls_sha256_starts_ret+0xac>)
 8002608:	4e1c      	ldr	r6, [pc, #112]	@ (800267c <mbedtls_sha256_starts_ret+0xb0>)
 800260a:	bf18      	it	ne
 800260c:	4616      	movne	r6, r2
 800260e:	f102 42d1 	add.w	r2, r2, #1753219072	@ 0x68800000
 8002612:	f502 12c0 	add.w	r2, r2, #1572864	@ 0x180000
 8002616:	f502 621e 	add.w	r2, r2, #2528	@ 0x9e0
 800261a:	4d19      	ldr	r5, [pc, #100]	@ (8002680 <mbedtls_sha256_starts_ret+0xb4>)
 800261c:	bf18      	it	ne
 800261e:	4615      	movne	r5, r2
 8002620:	4a18      	ldr	r2, [pc, #96]	@ (8002684 <mbedtls_sha256_starts_ret+0xb8>)
{
 8002622:	4603      	mov	r3, r0
    if( is224 == 0 )
 8002624:	4c18      	ldr	r4, [pc, #96]	@ (8002688 <mbedtls_sha256_starts_ret+0xbc>)
 8002626:	4819      	ldr	r0, [pc, #100]	@ (800268c <mbedtls_sha256_starts_ret+0xc0>)
 8002628:	bf18      	it	ne
 800262a:	4614      	movne	r4, r2
 800262c:	f1a2 6211 	sub.w	r2, r2, #152043520	@ 0x9100000
 8002630:	f5a2 220c 	sub.w	r2, r2, #573440	@ 0x8c000
 8002634:	f2a2 228e 	subw	r2, r2, #654	@ 0x28e
 8002638:	bf18      	it	ne
 800263a:	4602      	movne	r2, r0
    ctx->total[0] = 0;
 800263c:	2000      	movs	r0, #0
    {
        /* SHA-256 */
        ctx->state[0] = 0x6A09E667;
        ctx->state[1] = 0xBB67AE85;
 800263e:	e9c3 ec02 	strd	lr, ip, [r3, #8]
    ctx->total[1] = 0;
 8002642:	e9c3 0000 	strd	r0, r0, [r3]
        ctx->state[2] = 0x3C6EF372;
        ctx->state[3] = 0xA54FF53A;
 8002646:	e9c3 1704 	strd	r1, r7, [r3, #16]
        ctx->state[4] = 0x510E527F;
        ctx->state[5] = 0x9B05688C;
 800264a:	e9c3 6506 	strd	r6, r5, [r3, #24]
        ctx->state[6] = 0x1F83D9AB;
        ctx->state[7] = 0x5BE0CD19;
 800264e:	e9c3 4208 	strd	r4, r2, [r3, #32]
        ctx->state[5] = 0x68581511;
        ctx->state[6] = 0x64F98FA7;
        ctx->state[7] = 0xBEFA4FA4;
    }

    ctx->is224 = is224;
 8002652:	f8c3 8068 	str.w	r8, [r3, #104]	@ 0x68

    return( 0 );
}
 8002656:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800265a:	bf00      	nop
 800265c:	c1059ed8 	.word	0xc1059ed8
 8002660:	367cd507 	.word	0x367cd507
 8002664:	6a09e667 	.word	0x6a09e667
 8002668:	bb67ae85 	.word	0xbb67ae85
 800266c:	3c6ef372 	.word	0x3c6ef372
 8002670:	f70e5939 	.word	0xf70e5939
 8002674:	a54ff53a 	.word	0xa54ff53a
 8002678:	ffc00b31 	.word	0xffc00b31
 800267c:	510e527f 	.word	0x510e527f
 8002680:	9b05688c 	.word	0x9b05688c
 8002684:	64f98fa7 	.word	0x64f98fa7
 8002688:	1f83d9ab 	.word	0x1f83d9ab
 800268c:	befa4fa4 	.word	0xbefa4fa4

08002690 <mbedtls_internal_sha256_process>:

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( (const unsigned char *)data != NULL );

    for( i = 0; i < 8; i++ )
        local.A[i] = ctx->state[i];
 8002690:	4602      	mov	r2, r0
{
 8002692:	460b      	mov	r3, r1
 8002694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002698:	b0d1      	sub	sp, #324	@ 0x144
 800269a:	9004      	str	r0, [sp, #16]
        local.A[i] = ctx->state[i];
 800269c:	3208      	adds	r2, #8
 800269e:	ad48      	add	r5, sp, #288	@ 0x120
 80026a0:	f100 0628 	add.w	r6, r0, #40	@ 0x28
 80026a4:	462c      	mov	r4, r5
 80026a6:	6810      	ldr	r0, [r2, #0]
 80026a8:	6851      	ldr	r1, [r2, #4]
 80026aa:	3208      	adds	r2, #8
 80026ac:	c403      	stmia	r4!, {r0, r1}
 80026ae:	42b2      	cmp	r2, r6
 80026b0:	4625      	mov	r5, r4
 80026b2:	d1f7      	bne.n	80026a4 <mbedtls_internal_sha256_process+0x14>
 80026b4:	4619      	mov	r1, r3
 80026b6:	aa07      	add	r2, sp, #28
 80026b8:	f103 0040 	add.w	r0, r3, #64	@ 0x40
        local.A[2] = local.A[1]; local.A[1] = local.A[0];
        local.A[0] = local.temp1;
    }
#else /* MBEDTLS_SHA256_SMALLER */
    for( i = 0; i < 16; i++ )
        local.W[i] = MBEDTLS_GET_UINT32_BE( data, 4 * i );
 80026bc:	784b      	ldrb	r3, [r1, #1]
 80026be:	780c      	ldrb	r4, [r1, #0]
 80026c0:	041b      	lsls	r3, r3, #16
 80026c2:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
 80026c6:	78cc      	ldrb	r4, [r1, #3]
    for( i = 0; i < 16; i++ )
 80026c8:	3104      	adds	r1, #4
        local.W[i] = MBEDTLS_GET_UINT32_BE( data, 4 * i );
 80026ca:	4323      	orrs	r3, r4
 80026cc:	f811 4c02 	ldrb.w	r4, [r1, #-2]
    for( i = 0; i < 16; i++ )
 80026d0:	4288      	cmp	r0, r1
        local.W[i] = MBEDTLS_GET_UINT32_BE( data, 4 * i );
 80026d2:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 80026d6:	f842 3f04 	str.w	r3, [r2, #4]!
    for( i = 0; i < 16; i++ )
 80026da:	d1ef      	bne.n	80026bc <mbedtls_internal_sha256_process+0x2c>
 80026dc:	4997      	ldr	r1, [pc, #604]	@ (800293c <mbedtls_internal_sha256_process+0x2ac>)
 80026de:	f10d 0a18 	add.w	sl, sp, #24
 80026e2:	4655      	mov	r5, sl
 80026e4:	e9dd eb4d 	ldrd	lr, fp, [sp, #308]	@ 0x134
 80026e8:	e9dd 7648 	ldrd	r7, r6, [sp, #288]	@ 0x120
 80026ec:	e9dd 324a 	ldrd	r3, r2, [sp, #296]	@ 0x128
 80026f0:	468c      	mov	ip, r1
 80026f2:	f8dd 813c 	ldr.w	r8, [sp, #316]	@ 0x13c
 80026f6:	f8dd 9130 	ldr.w	r9, [sp, #304]	@ 0x130
 80026fa:	9101      	str	r1, [sp, #4]

    for( i = 0; i < 16; i += 8 )
    {
        P( local.A[0], local.A[1], local.A[2], local.A[3], local.A[4],
 80026fc:	68a8      	ldr	r0, [r5, #8]
 80026fe:	f8dc 1000 	ldr.w	r1, [ip]
 8002702:	ea4f 24f9 	mov.w	r4, r9, ror #11
 8002706:	ea84 14b9 	eor.w	r4, r4, r9, ror #6
 800270a:	4401      	add	r1, r0
 800270c:	ea8b 000e 	eor.w	r0, fp, lr
 8002710:	ea84 6479 	eor.w	r4, r4, r9, ror #25
 8002714:	ea00 0009 	and.w	r0, r0, r9
 8002718:	ea80 000b 	eor.w	r0, r0, fp
 800271c:	4421      	add	r1, r4
 800271e:	4401      	add	r1, r0
 8002720:	4441      	add	r1, r8
 8002722:	ea4f 3877 	mov.w	r8, r7, ror #13
 8002726:	ea88 08b7 	eor.w	r8, r8, r7, ror #2
 800272a:	ea88 58b7 	eor.w	r8, r8, r7, ror #22
 800272e:	440a      	add	r2, r1
 8002730:	4488      	add	r8, r1
 8002732:	ea47 0106 	orr.w	r1, r7, r6
 8002736:	ea07 0006 	and.w	r0, r7, r6
 800273a:	4019      	ands	r1, r3
 800273c:	4301      	orrs	r1, r0
 800273e:	4488      	add	r8, r1
           local.A[5], local.A[6], local.A[7], local.W[i+0], K[i+0] );
        P( local.A[7], local.A[0], local.A[1], local.A[2], local.A[3],
 8002740:	68e8      	ldr	r0, [r5, #12]
 8002742:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8002746:	ea4f 3478 	mov.w	r4, r8, ror #13
 800274a:	4401      	add	r1, r0
 800274c:	ea89 000e 	eor.w	r0, r9, lr
 8002750:	4010      	ands	r0, r2
 8002752:	ea80 000e 	eor.w	r0, r0, lr
 8002756:	4459      	add	r1, fp
 8002758:	4401      	add	r1, r0
 800275a:	ea4f 20f2 	mov.w	r0, r2, ror #11
 800275e:	ea80 10b2 	eor.w	r0, r0, r2, ror #6
 8002762:	ea80 6072 	eor.w	r0, r0, r2, ror #25
 8002766:	ea84 04b8 	eor.w	r4, r4, r8, ror #2
 800276a:	4401      	add	r1, r0
 800276c:	ea84 54b8 	eor.w	r4, r4, r8, ror #22
 8002770:	440b      	add	r3, r1
 8002772:	440c      	add	r4, r1
 8002774:	ea48 0107 	orr.w	r1, r8, r7
 8002778:	ea08 0007 	and.w	r0, r8, r7
 800277c:	4031      	ands	r1, r6
 800277e:	4301      	orrs	r1, r0
 8002780:	440c      	add	r4, r1
           local.A[4], local.A[5], local.A[6], local.W[i+1], K[i+1] );
        P( local.A[6], local.A[7], local.A[0], local.A[1], local.A[2],
 8002782:	6928      	ldr	r0, [r5, #16]
 8002784:	f8dc 1008 	ldr.w	r1, [ip, #8]
    for( i = 0; i < 16; i += 8 )
 8002788:	3520      	adds	r5, #32
        P( local.A[6], local.A[7], local.A[0], local.A[1], local.A[2],
 800278a:	4401      	add	r1, r0
 800278c:	ea82 0009 	eor.w	r0, r2, r9
 8002790:	4018      	ands	r0, r3
 8002792:	ea80 0009 	eor.w	r0, r0, r9
 8002796:	4471      	add	r1, lr
 8002798:	4401      	add	r1, r0
 800279a:	ea4f 20f3 	mov.w	r0, r3, ror #11
 800279e:	ea80 10b3 	eor.w	r0, r0, r3, ror #6
 80027a2:	ea80 6073 	eor.w	r0, r0, r3, ror #25
 80027a6:	4401      	add	r1, r0
 80027a8:	ea4f 3074 	mov.w	r0, r4, ror #13
 80027ac:	ea80 00b4 	eor.w	r0, r0, r4, ror #2
 80027b0:	ea80 50b4 	eor.w	r0, r0, r4, ror #22
 80027b4:	eb01 0e06 	add.w	lr, r1, r6
 80027b8:	4408      	add	r0, r1
 80027ba:	ea48 0104 	orr.w	r1, r8, r4
 80027be:	ea08 0604 	and.w	r6, r8, r4
 80027c2:	4039      	ands	r1, r7
 80027c4:	4331      	orrs	r1, r6
 80027c6:	4408      	add	r0, r1
           local.A[3], local.A[4], local.A[5], local.W[i+2], K[i+2] );
        P( local.A[5], local.A[6], local.A[7], local.A[0], local.A[1],
 80027c8:	f855 6c0c 	ldr.w	r6, [r5, #-12]
 80027cc:	f8dc 100c 	ldr.w	r1, [ip, #12]
    for( i = 0; i < 16; i += 8 )
 80027d0:	f10c 0c20 	add.w	ip, ip, #32
        P( local.A[5], local.A[6], local.A[7], local.A[0], local.A[1],
 80027d4:	440e      	add	r6, r1
 80027d6:	444e      	add	r6, r9
 80027d8:	ea82 0903 	eor.w	r9, r2, r3
 80027dc:	ea09 090e 	and.w	r9, r9, lr
 80027e0:	ea4f 21fe 	mov.w	r1, lr, ror #11
 80027e4:	ea89 0902 	eor.w	r9, r9, r2
 80027e8:	ea81 11be 	eor.w	r1, r1, lr, ror #6
 80027ec:	ea81 617e 	eor.w	r1, r1, lr, ror #25
 80027f0:	444e      	add	r6, r9
 80027f2:	440e      	add	r6, r1
 80027f4:	ea4f 3170 	mov.w	r1, r0, ror #13
 80027f8:	ea81 01b0 	eor.w	r1, r1, r0, ror #2
 80027fc:	ea81 51b0 	eor.w	r1, r1, r0, ror #22
 8002800:	eb06 0907 	add.w	r9, r6, r7
 8002804:	4431      	add	r1, r6
 8002806:	ea44 0600 	orr.w	r6, r4, r0
 800280a:	ea04 0700 	and.w	r7, r4, r0
 800280e:	ea06 0608 	and.w	r6, r6, r8
 8002812:	433e      	orrs	r6, r7
 8002814:	4431      	add	r1, r6
           local.A[2], local.A[3], local.A[4], local.W[i+3], K[i+3] );
        P( local.A[4], local.A[5], local.A[6], local.A[7], local.A[0],
 8002816:	f855 7c08 	ldr.w	r7, [r5, #-8]
 800281a:	f85c 6c10 	ldr.w	r6, [ip, #-16]
 800281e:	443e      	add	r6, r7
 8002820:	4416      	add	r6, r2
 8002822:	ea83 020e 	eor.w	r2, r3, lr
 8002826:	ea02 0209 	and.w	r2, r2, r9
 800282a:	405a      	eors	r2, r3
 800282c:	4416      	add	r6, r2
 800282e:	ea4f 22f9 	mov.w	r2, r9, ror #11
 8002832:	ea82 12b9 	eor.w	r2, r2, r9, ror #6
 8002836:	ea82 6279 	eor.w	r2, r2, r9, ror #25
 800283a:	4416      	add	r6, r2
 800283c:	ea4f 3271 	mov.w	r2, r1, ror #13
 8002840:	ea82 02b1 	eor.w	r2, r2, r1, ror #2
 8002844:	ea82 52b1 	eor.w	r2, r2, r1, ror #22
 8002848:	44b0      	add	r8, r6
 800284a:	4432      	add	r2, r6
 800284c:	ea40 0601 	orr.w	r6, r0, r1
 8002850:	ea00 0701 	and.w	r7, r0, r1
 8002854:	4026      	ands	r6, r4
 8002856:	433e      	orrs	r6, r7
 8002858:	4432      	add	r2, r6
           local.A[1], local.A[2], local.A[3], local.W[i+4], K[i+4] );
        P( local.A[3], local.A[4], local.A[5], local.A[6], local.A[7],
 800285a:	f855 7c04 	ldr.w	r7, [r5, #-4]
 800285e:	f85c 6c0c 	ldr.w	r6, [ip, #-12]
 8002862:	443e      	add	r6, r7
 8002864:	441e      	add	r6, r3
 8002866:	ea8e 0309 	eor.w	r3, lr, r9
 800286a:	ea03 0308 	and.w	r3, r3, r8
 800286e:	ea83 030e 	eor.w	r3, r3, lr
 8002872:	441e      	add	r6, r3
 8002874:	ea4f 23f8 	mov.w	r3, r8, ror #11
 8002878:	ea83 13b8 	eor.w	r3, r3, r8, ror #6
 800287c:	ea83 6378 	eor.w	r3, r3, r8, ror #25
 8002880:	441e      	add	r6, r3
 8002882:	ea4f 3372 	mov.w	r3, r2, ror #13
 8002886:	ea83 03b2 	eor.w	r3, r3, r2, ror #2
 800288a:	eb04 0b06 	add.w	fp, r4, r6
 800288e:	ea83 53b2 	eor.w	r3, r3, r2, ror #22
 8002892:	ea41 0402 	orr.w	r4, r1, r2
 8002896:	4433      	add	r3, r6
 8002898:	4004      	ands	r4, r0
 800289a:	ea01 0602 	and.w	r6, r1, r2
 800289e:	4334      	orrs	r4, r6
 80028a0:	4423      	add	r3, r4
           local.A[0], local.A[1], local.A[2], local.W[i+5], K[i+5] );
        P( local.A[2], local.A[3], local.A[4], local.A[5], local.A[6],
 80028a2:	682e      	ldr	r6, [r5, #0]
 80028a4:	f85c 4c08 	ldr.w	r4, [ip, #-8]
 80028a8:	4434      	add	r4, r6
 80028aa:	ea89 0608 	eor.w	r6, r9, r8
 80028ae:	ea06 060b 	and.w	r6, r6, fp
 80028b2:	ea86 0609 	eor.w	r6, r6, r9
 80028b6:	4474      	add	r4, lr
 80028b8:	4434      	add	r4, r6
 80028ba:	ea4f 26fb 	mov.w	r6, fp, ror #11
 80028be:	ea86 16bb 	eor.w	r6, r6, fp, ror #6
 80028c2:	ea86 667b 	eor.w	r6, r6, fp, ror #25
 80028c6:	4434      	add	r4, r6
 80028c8:	eb00 0e04 	add.w	lr, r0, r4
 80028cc:	ea4f 3073 	mov.w	r0, r3, ror #13
 80028d0:	ea80 00b3 	eor.w	r0, r0, r3, ror #2
 80028d4:	ea80 50b3 	eor.w	r0, r0, r3, ror #22
 80028d8:	4420      	add	r0, r4
 80028da:	ea42 0403 	orr.w	r4, r2, r3
 80028de:	400c      	ands	r4, r1
 80028e0:	ea02 0603 	and.w	r6, r2, r3
 80028e4:	4334      	orrs	r4, r6
 80028e6:	1906      	adds	r6, r0, r4
           local.A[7], local.A[0], local.A[1], local.W[i+6], K[i+6] );
        P( local.A[1], local.A[2], local.A[3], local.A[4], local.A[5],
 80028e8:	686c      	ldr	r4, [r5, #4]
 80028ea:	f85c 0c04 	ldr.w	r0, [ip, #-4]
 80028ee:	4420      	add	r0, r4
 80028f0:	ea88 040b 	eor.w	r4, r8, fp
 80028f4:	ea04 040e 	and.w	r4, r4, lr
 80028f8:	4448      	add	r0, r9
 80028fa:	ea84 0408 	eor.w	r4, r4, r8
 80028fe:	4420      	add	r0, r4
 8002900:	ea4f 24fe 	mov.w	r4, lr, ror #11
 8002904:	ea84 14be 	eor.w	r4, r4, lr, ror #6
 8002908:	ea84 647e 	eor.w	r4, r4, lr, ror #25
 800290c:	4420      	add	r0, r4
 800290e:	eb01 0900 	add.w	r9, r1, r0
 8002912:	ea4f 3176 	mov.w	r1, r6, ror #13
 8002916:	ea81 01b6 	eor.w	r1, r1, r6, ror #2
 800291a:	ea81 51b6 	eor.w	r1, r1, r6, ror #22
 800291e:	4401      	add	r1, r0
 8002920:	ea43 0006 	orr.w	r0, r3, r6
 8002924:	4010      	ands	r0, r2
 8002926:	ea03 0406 	and.w	r4, r3, r6
 800292a:	4320      	orrs	r0, r4
 800292c:	180f      	adds	r7, r1, r0
    for( i = 0; i < 16; i += 8 )
 800292e:	a916      	add	r1, sp, #88	@ 0x58
 8002930:	42a9      	cmp	r1, r5
 8002932:	f47f aee3 	bne.w	80026fc <mbedtls_internal_sha256_process+0x6c>
 8002936:	a936      	add	r1, sp, #216	@ 0xd8
 8002938:	9105      	str	r1, [sp, #20]
 800293a:	e001      	b.n	8002940 <mbedtls_internal_sha256_process+0x2b0>
 800293c:	08003a68 	.word	0x08003a68
           local.A[6], local.A[7], local.A[0], local.W[i+7], K[i+7] );
    }

    for( i = 16; i < 64; i += 8 )
    {
        P( local.A[0], local.A[1], local.A[2], local.A[3], local.A[4],
 8002940:	f8da 1040 	ldr.w	r1, [sl, #64]	@ 0x40
 8002944:	f8da 400c 	ldr.w	r4, [sl, #12]
 8002948:	ea4f 45f1 	mov.w	r5, r1, ror #19
 800294c:	ea85 4571 	eor.w	r5, r5, r1, ror #17
 8002950:	f8da 0008 	ldr.w	r0, [sl, #8]
 8002954:	ea85 2591 	eor.w	r5, r5, r1, lsr #10
 8002958:	f8da 102c 	ldr.w	r1, [sl, #44]	@ 0x2c
    for( i = 16; i < 64; i += 8 )
 800295c:	f10a 0a20 	add.w	sl, sl, #32
        P( local.A[0], local.A[1], local.A[2], local.A[3], local.A[4],
 8002960:	4401      	add	r1, r0
 8002962:	ea4f 40b4 	mov.w	r0, r4, ror #18
 8002966:	ea80 10f4 	eor.w	r0, r0, r4, ror #7
 800296a:	ea80 00d4 	eor.w	r0, r0, r4, lsr #3
 800296e:	4429      	add	r1, r5
 8002970:	4401      	add	r1, r0
 8002972:	9103      	str	r1, [sp, #12]
 8002974:	ea8b 000e 	eor.w	r0, fp, lr
 8002978:	ea4f 21f9 	mov.w	r1, r9, ror #11
 800297c:	ea81 11b9 	eor.w	r1, r1, r9, ror #6
 8002980:	ea00 0009 	and.w	r0, r0, r9
 8002984:	ea81 6179 	eor.w	r1, r1, r9, ror #25
 8002988:	ea80 000b 	eor.w	r0, r0, fp
 800298c:	4408      	add	r0, r1
 800298e:	9901      	ldr	r1, [sp, #4]
 8002990:	ea07 0506 	and.w	r5, r7, r6
 8002994:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002996:	4408      	add	r0, r1
 8002998:	9903      	ldr	r1, [sp, #12]
 800299a:	4408      	add	r0, r1
 800299c:	4440      	add	r0, r8
 800299e:	4402      	add	r2, r0
 80029a0:	9202      	str	r2, [sp, #8]
 80029a2:	f8ca 1028 	str.w	r1, [sl, #40]	@ 0x28
 80029a6:	ea47 0206 	orr.w	r2, r7, r6
 80029aa:	ea4f 3177 	mov.w	r1, r7, ror #13
 80029ae:	ea81 01b7 	eor.w	r1, r1, r7, ror #2
 80029b2:	401a      	ands	r2, r3
 80029b4:	432a      	orrs	r2, r5
 80029b6:	ea81 51b7 	eor.w	r1, r1, r7, ror #22
 80029ba:	4411      	add	r1, r2
           local.A[5], local.A[6], local.A[7], R(i+0), K[i+0] );
        P( local.A[7], local.A[0], local.A[1], local.A[2], local.A[3],
 80029bc:	f8da 2024 	ldr.w	r2, [sl, #36]	@ 0x24
        P( local.A[0], local.A[1], local.A[2], local.A[3], local.A[4],
 80029c0:	4401      	add	r1, r0
        P( local.A[7], local.A[0], local.A[1], local.A[2], local.A[3],
 80029c2:	ea4f 45f2 	mov.w	r5, r2, ror #19
 80029c6:	ea85 4572 	eor.w	r5, r5, r2, ror #17
 80029ca:	f85a 0c10 	ldr.w	r0, [sl, #-16]
 80029ce:	ea85 2592 	eor.w	r5, r5, r2, lsr #10
 80029d2:	f8da 2010 	ldr.w	r2, [sl, #16]
 80029d6:	f8dd c008 	ldr.w	ip, [sp, #8]
 80029da:	4414      	add	r4, r2
 80029dc:	ea4f 42b0 	mov.w	r2, r0, ror #18
 80029e0:	ea82 12f0 	eor.w	r2, r2, r0, ror #7
 80029e4:	ea82 02d0 	eor.w	r2, r2, r0, lsr #3
 80029e8:	442c      	add	r4, r5
 80029ea:	4414      	add	r4, r2
 80029ec:	9a02      	ldr	r2, [sp, #8]
 80029ee:	ea89 050e 	eor.w	r5, r9, lr
 80029f2:	4015      	ands	r5, r2
 80029f4:	9a01      	ldr	r2, [sp, #4]
 80029f6:	ea85 050e 	eor.w	r5, r5, lr
 80029fa:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80029fc:	f8ca 402c 	str.w	r4, [sl, #44]	@ 0x2c
 8002a00:	445a      	add	r2, fp
 8002a02:	4422      	add	r2, r4
 8002a04:	4415      	add	r5, r2
 8002a06:	9a02      	ldr	r2, [sp, #8]
 8002a08:	ea4f 22f2 	mov.w	r2, r2, ror #11
 8002a0c:	ea82 12bc 	eor.w	r2, r2, ip, ror #6
 8002a10:	ea82 627c 	eor.w	r2, r2, ip, ror #25
 8002a14:	442a      	add	r2, r5
 8002a16:	eb03 0b02 	add.w	fp, r3, r2
 8002a1a:	ea47 0501 	orr.w	r5, r7, r1
 8002a1e:	ea4f 3371 	mov.w	r3, r1, ror #13
 8002a22:	ea07 0c01 	and.w	ip, r7, r1
 8002a26:	ea83 03b1 	eor.w	r3, r3, r1, ror #2
 8002a2a:	4035      	ands	r5, r6
 8002a2c:	ea45 050c 	orr.w	r5, r5, ip
 8002a30:	ea83 53b1 	eor.w	r3, r3, r1, ror #22
 8002a34:	442b      	add	r3, r5
 8002a36:	4413      	add	r3, r2
           local.A[4], local.A[5], local.A[6], R(i+1), K[i+1] );
        P( local.A[6], local.A[7], local.A[0], local.A[1], local.A[2],
 8002a38:	9a03      	ldr	r2, [sp, #12]
 8002a3a:	f85a cc0c 	ldr.w	ip, [sl, #-12]
 8002a3e:	ea4f 45f2 	mov.w	r5, r2, ror #19
 8002a42:	ea85 4572 	eor.w	r5, r5, r2, ror #17
 8002a46:	ea85 2592 	eor.w	r5, r5, r2, lsr #10
 8002a4a:	f8da 2014 	ldr.w	r2, [sl, #20]
 8002a4e:	eb00 0802 	add.w	r8, r0, r2
 8002a52:	ea4f 42bc 	mov.w	r2, ip, ror #18
 8002a56:	ea82 12fc 	eor.w	r2, r2, ip, ror #7
 8002a5a:	ea82 02dc 	eor.w	r2, r2, ip, lsr #3
 8002a5e:	44a8      	add	r8, r5
 8002a60:	4490      	add	r8, r2
 8002a62:	9a02      	ldr	r2, [sp, #8]
 8002a64:	ea4f 3573 	mov.w	r5, r3, ror #13
 8002a68:	ea89 0002 	eor.w	r0, r9, r2
 8002a6c:	9a01      	ldr	r2, [sp, #4]
 8002a6e:	ea00 000b 	and.w	r0, r0, fp
 8002a72:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002a74:	ea80 0009 	eor.w	r0, r0, r9
 8002a78:	4472      	add	r2, lr
 8002a7a:	4442      	add	r2, r8
 8002a7c:	4410      	add	r0, r2
 8002a7e:	ea4f 22fb 	mov.w	r2, fp, ror #11
 8002a82:	ea82 12bb 	eor.w	r2, r2, fp, ror #6
 8002a86:	ea82 627b 	eor.w	r2, r2, fp, ror #25
 8002a8a:	4402      	add	r2, r0
 8002a8c:	ea41 0003 	orr.w	r0, r1, r3
 8002a90:	eb06 0e02 	add.w	lr, r6, r2
 8002a94:	ea85 05b3 	eor.w	r5, r5, r3, ror #2
 8002a98:	ea01 0603 	and.w	r6, r1, r3
 8002a9c:	4038      	ands	r0, r7
 8002a9e:	4330      	orrs	r0, r6
 8002aa0:	ea85 55b3 	eor.w	r5, r5, r3, ror #22
 8002aa4:	4405      	add	r5, r0
 8002aa6:	4415      	add	r5, r2
           local.A[3], local.A[4], local.A[5], R(i+2), K[i+2] );
        P( local.A[5], local.A[6], local.A[7], local.A[0], local.A[1],
 8002aa8:	f85a 6c08 	ldr.w	r6, [sl, #-8]
 8002aac:	f8da 2018 	ldr.w	r2, [sl, #24]
 8002ab0:	ea4f 40f4 	mov.w	r0, r4, ror #19
 8002ab4:	ea80 4074 	eor.w	r0, r0, r4, ror #17
 8002ab8:	ea80 2094 	eor.w	r0, r0, r4, lsr #10
 8002abc:	eb0c 0402 	add.w	r4, ip, r2
 8002ac0:	ea4f 42b6 	mov.w	r2, r6, ror #18
 8002ac4:	ea82 12f6 	eor.w	r2, r2, r6, ror #7
 8002ac8:	ea82 02d6 	eor.w	r2, r2, r6, lsr #3
 8002acc:	4404      	add	r4, r0
 8002ace:	4414      	add	r4, r2
 8002ad0:	9a02      	ldr	r2, [sp, #8]
 8002ad2:	ea03 0c05 	and.w	ip, r3, r5
 8002ad6:	ea82 000b 	eor.w	r0, r2, fp
 8002ada:	ea00 000e 	and.w	r0, r0, lr
 8002ade:	4050      	eors	r0, r2
 8002ae0:	9a01      	ldr	r2, [sp, #4]
        P( local.A[6], local.A[7], local.A[0], local.A[1], local.A[2],
 8002ae2:	f8ca 8030 	str.w	r8, [sl, #48]	@ 0x30
 8002ae6:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
        P( local.A[5], local.A[6], local.A[7], local.A[0], local.A[1],
 8002ae8:	f8ca 4034 	str.w	r4, [sl, #52]	@ 0x34
 8002aec:	444a      	add	r2, r9
 8002aee:	4422      	add	r2, r4
 8002af0:	4410      	add	r0, r2
 8002af2:	ea4f 22fe 	mov.w	r2, lr, ror #11
 8002af6:	ea82 12be 	eor.w	r2, r2, lr, ror #6
 8002afa:	ea82 627e 	eor.w	r2, r2, lr, ror #25
 8002afe:	4402      	add	r2, r0
 8002b00:	eb07 0902 	add.w	r9, r7, r2
 8002b04:	ea4f 3075 	mov.w	r0, r5, ror #13
 8002b08:	ea43 0705 	orr.w	r7, r3, r5
 8002b0c:	ea80 00b5 	eor.w	r0, r0, r5, ror #2
 8002b10:	400f      	ands	r7, r1
 8002b12:	ea47 070c 	orr.w	r7, r7, ip
 8002b16:	ea80 50b5 	eor.w	r0, r0, r5, ror #22
 8002b1a:	4438      	add	r0, r7
 8002b1c:	4410      	add	r0, r2
           local.A[2], local.A[3], local.A[4], R(i+3), K[i+3] );
        P( local.A[4], local.A[5], local.A[6], local.A[7], local.A[0],
 8002b1e:	f85a 7c04 	ldr.w	r7, [sl, #-4]
 8002b22:	f8da 201c 	ldr.w	r2, [sl, #28]
 8002b26:	ea4f 4cf8 	mov.w	ip, r8, ror #19
 8002b2a:	ea8c 4c78 	eor.w	ip, ip, r8, ror #17
 8002b2e:	4416      	add	r6, r2
 8002b30:	ea4f 42b7 	mov.w	r2, r7, ror #18
 8002b34:	ea8c 2c98 	eor.w	ip, ip, r8, lsr #10
 8002b38:	ea82 12f7 	eor.w	r2, r2, r7, ror #7
 8002b3c:	ea82 02d7 	eor.w	r2, r2, r7, lsr #3
 8002b40:	4466      	add	r6, ip
 8002b42:	4416      	add	r6, r2
 8002b44:	9a01      	ldr	r2, [sp, #4]
 8002b46:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8002b4a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002b4c:	ea8b 0c0e 	eor.w	ip, fp, lr
 8002b50:	ea0c 0c09 	and.w	ip, ip, r9
 8002b54:	4432      	add	r2, r6
 8002b56:	ea8c 0c0b 	eor.w	ip, ip, fp
 8002b5a:	4442      	add	r2, r8
 8002b5c:	4462      	add	r2, ip
 8002b5e:	ea4f 2cf9 	mov.w	ip, r9, ror #11
 8002b62:	ea8c 1cb9 	eor.w	ip, ip, r9, ror #6
 8002b66:	ea8c 6c79 	eor.w	ip, ip, r9, ror #25
 8002b6a:	4494      	add	ip, r2
 8002b6c:	ea4f 3270 	mov.w	r2, r0, ror #13
 8002b70:	ea82 02b0 	eor.w	r2, r2, r0, ror #2
 8002b74:	eb01 080c 	add.w	r8, r1, ip
 8002b78:	ea82 52b0 	eor.w	r2, r2, r0, ror #22
 8002b7c:	ea45 0100 	orr.w	r1, r5, r0
 8002b80:	9202      	str	r2, [sp, #8]
 8002b82:	4019      	ands	r1, r3
 8002b84:	ea05 0200 	and.w	r2, r5, r0
 8002b88:	4311      	orrs	r1, r2
 8002b8a:	9a02      	ldr	r2, [sp, #8]
 8002b8c:	f8ca 6038 	str.w	r6, [sl, #56]	@ 0x38
 8002b90:	440a      	add	r2, r1
           local.A[1], local.A[2], local.A[3], R(i+4), K[i+4] );
        P( local.A[3], local.A[4], local.A[5], local.A[6], local.A[7],
 8002b92:	ea4f 41f4 	mov.w	r1, r4, ror #19
 8002b96:	ea81 4174 	eor.w	r1, r1, r4, ror #17
 8002b9a:	ea81 2194 	eor.w	r1, r1, r4, lsr #10
 8002b9e:	f8da 4020 	ldr.w	r4, [sl, #32]
        P( local.A[4], local.A[5], local.A[6], local.A[7], local.A[0],
 8002ba2:	4462      	add	r2, ip
        P( local.A[3], local.A[4], local.A[5], local.A[6], local.A[7],
 8002ba4:	f8da c000 	ldr.w	ip, [sl]
 8002ba8:	443c      	add	r4, r7
 8002baa:	440c      	add	r4, r1
 8002bac:	ea4f 41bc 	mov.w	r1, ip, ror #18
 8002bb0:	ea81 11fc 	eor.w	r1, r1, ip, ror #7
 8002bb4:	ea81 01dc 	eor.w	r1, r1, ip, lsr #3
 8002bb8:	440c      	add	r4, r1
 8002bba:	9901      	ldr	r1, [sp, #4]
 8002bbc:	ea8e 0709 	eor.w	r7, lr, r9
 8002bc0:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8002bc2:	ea07 0708 	and.w	r7, r7, r8
 8002bc6:	4421      	add	r1, r4
 8002bc8:	4459      	add	r1, fp
 8002bca:	ea87 070e 	eor.w	r7, r7, lr
 8002bce:	440f      	add	r7, r1
 8002bd0:	ea4f 21f8 	mov.w	r1, r8, ror #11
 8002bd4:	ea81 11b8 	eor.w	r1, r1, r8, ror #6
 8002bd8:	ea81 6178 	eor.w	r1, r1, r8, ror #25
 8002bdc:	4439      	add	r1, r7
 8002bde:	eb03 0b01 	add.w	fp, r3, r1
 8002be2:	ea4f 3372 	mov.w	r3, r2, ror #13
 8002be6:	ea83 03b2 	eor.w	r3, r3, r2, ror #2
 8002bea:	ea83 53b2 	eor.w	r3, r3, r2, ror #22
 8002bee:	ea40 0702 	orr.w	r7, r0, r2
 8002bf2:	9302      	str	r3, [sp, #8]
 8002bf4:	402f      	ands	r7, r5
 8002bf6:	ea00 0302 	and.w	r3, r0, r2
 8002bfa:	431f      	orrs	r7, r3
 8002bfc:	9b02      	ldr	r3, [sp, #8]
 8002bfe:	f8ca 403c 	str.w	r4, [sl, #60]	@ 0x3c
 8002c02:	443b      	add	r3, r7
 8002c04:	440b      	add	r3, r1
           local.A[0], local.A[1], local.A[2], R(i+5), K[i+5] );
        P( local.A[2], local.A[3], local.A[4], local.A[5], local.A[6],
 8002c06:	ea4f 41f6 	mov.w	r1, r6, ror #19
 8002c0a:	ea81 4176 	eor.w	r1, r1, r6, ror #17
 8002c0e:	ea81 2196 	eor.w	r1, r1, r6, lsr #10
 8002c12:	f8da 6024 	ldr.w	r6, [sl, #36]	@ 0x24
 8002c16:	f8da 7004 	ldr.w	r7, [sl, #4]
 8002c1a:	4466      	add	r6, ip
 8002c1c:	4431      	add	r1, r6
 8002c1e:	ea4f 46b7 	mov.w	r6, r7, ror #18
 8002c22:	ea86 16f7 	eor.w	r6, r6, r7, ror #7
 8002c26:	ea86 06d7 	eor.w	r6, r6, r7, lsr #3
 8002c2a:	4431      	add	r1, r6
 8002c2c:	9102      	str	r1, [sp, #8]
 8002c2e:	9901      	ldr	r1, [sp, #4]
 8002c30:	f8dd c008 	ldr.w	ip, [sp, #8]
 8002c34:	6d89      	ldr	r1, [r1, #88]	@ 0x58
 8002c36:	ea89 0608 	eor.w	r6, r9, r8
 8002c3a:	4461      	add	r1, ip
 8002c3c:	ea06 060b 	and.w	r6, r6, fp
 8002c40:	4471      	add	r1, lr
 8002c42:	ea86 0609 	eor.w	r6, r6, r9
 8002c46:	440e      	add	r6, r1
 8002c48:	ea4f 21fb 	mov.w	r1, fp, ror #11
 8002c4c:	ea81 11bb 	eor.w	r1, r1, fp, ror #6
 8002c50:	ea81 617b 	eor.w	r1, r1, fp, ror #25
 8002c54:	4431      	add	r1, r6
 8002c56:	eb05 0e01 	add.w	lr, r5, r1
 8002c5a:	ea42 0603 	orr.w	r6, r2, r3
 8002c5e:	ea4f 3573 	mov.w	r5, r3, ror #13
 8002c62:	f8ca c040 	str.w	ip, [sl, #64]	@ 0x40
 8002c66:	4006      	ands	r6, r0
 8002c68:	ea02 0c03 	and.w	ip, r2, r3
 8002c6c:	ea85 05b3 	eor.w	r5, r5, r3, ror #2
 8002c70:	ea46 060c 	orr.w	r6, r6, ip
 8002c74:	ea85 55b3 	eor.w	r5, r5, r3, ror #22
 8002c78:	4435      	add	r5, r6
 8002c7a:	186e      	adds	r6, r5, r1
           local.A[7], local.A[0], local.A[1], R(i+6), K[i+6] );
        P( local.A[1], local.A[2], local.A[3], local.A[4], local.A[5],
 8002c7c:	f8da 1008 	ldr.w	r1, [sl, #8]
 8002c80:	9d03      	ldr	r5, [sp, #12]
 8002c82:	ea4f 4cf4 	mov.w	ip, r4, ror #19
 8002c86:	443d      	add	r5, r7
 8002c88:	ea4f 47b1 	mov.w	r7, r1, ror #18
 8002c8c:	ea87 17f1 	eor.w	r7, r7, r1, ror #7
 8002c90:	ea87 07d1 	eor.w	r7, r7, r1, lsr #3
 8002c94:	ea8c 4c74 	eor.w	ip, ip, r4, ror #17
 8002c98:	9901      	ldr	r1, [sp, #4]
 8002c9a:	ea8c 2c94 	eor.w	ip, ip, r4, lsr #10
 8002c9e:	4465      	add	r5, ip
 8002ca0:	6dc9      	ldr	r1, [r1, #92]	@ 0x5c
 8002ca2:	443d      	add	r5, r7
 8002ca4:	ea88 070b 	eor.w	r7, r8, fp
 8002ca8:	ea07 070e 	and.w	r7, r7, lr
 8002cac:	4429      	add	r1, r5
 8002cae:	4449      	add	r1, r9
 8002cb0:	ea87 0708 	eor.w	r7, r7, r8
 8002cb4:	440f      	add	r7, r1
 8002cb6:	ea4f 21fe 	mov.w	r1, lr, ror #11
 8002cba:	ea81 11be 	eor.w	r1, r1, lr, ror #6
 8002cbe:	ea81 617e 	eor.w	r1, r1, lr, ror #25
 8002cc2:	ea43 0c06 	orr.w	ip, r3, r6
 8002cc6:	4439      	add	r1, r7
 8002cc8:	ea03 0906 	and.w	r9, r3, r6
 8002ccc:	ea0c 0c02 	and.w	ip, ip, r2
 8002cd0:	ea4c 0c09 	orr.w	ip, ip, r9
 8002cd4:	eb00 0901 	add.w	r9, r0, r1
    for( i = 16; i < 64; i += 8 )
 8002cd8:	9801      	ldr	r0, [sp, #4]
        P( local.A[1], local.A[2], local.A[3], local.A[4], local.A[5],
 8002cda:	ea4f 3776 	mov.w	r7, r6, ror #13
    for( i = 16; i < 64; i += 8 )
 8002cde:	3020      	adds	r0, #32
        P( local.A[1], local.A[2], local.A[3], local.A[4], local.A[5],
 8002ce0:	ea87 07b6 	eor.w	r7, r7, r6, ror #2
    for( i = 16; i < 64; i += 8 )
 8002ce4:	9001      	str	r0, [sp, #4]
 8002ce6:	9805      	ldr	r0, [sp, #20]
        P( local.A[1], local.A[2], local.A[3], local.A[4], local.A[5],
 8002ce8:	ea87 57b6 	eor.w	r7, r7, r6, ror #22
 8002cec:	f8ca 5044 	str.w	r5, [sl, #68]	@ 0x44
 8002cf0:	44bc      	add	ip, r7
    for( i = 16; i < 64; i += 8 )
 8002cf2:	4550      	cmp	r0, sl
        P( local.A[1], local.A[2], local.A[3], local.A[4], local.A[5],
 8002cf4:	eb01 070c 	add.w	r7, r1, ip
    for( i = 16; i < 64; i += 8 )
 8002cf8:	f47f ae22 	bne.w	8002940 <mbedtls_internal_sha256_process+0x2b0>
 8002cfc:	934a      	str	r3, [sp, #296]	@ 0x128
 8002cfe:	9b02      	ldr	r3, [sp, #8]
 8002d00:	e9cd 1c06 	strd	r1, ip, [sp, #24]
 8002d04:	9346      	str	r3, [sp, #280]	@ 0x118
 8002d06:	9b04      	ldr	r3, [sp, #16]
 8002d08:	924b      	str	r2, [sp, #300]	@ 0x12c
 8002d0a:	f8cd 813c 	str.w	r8, [sp, #316]	@ 0x13c
 8002d0e:	1d1a      	adds	r2, r3, #4
 8002d10:	9445      	str	r4, [sp, #276]	@ 0x114
 8002d12:	f8cd b138 	str.w	fp, [sp, #312]	@ 0x138
 8002d16:	f8cd e134 	str.w	lr, [sp, #308]	@ 0x134
 8002d1a:	9649      	str	r6, [sp, #292]	@ 0x124
 8002d1c:	9547      	str	r5, [sp, #284]	@ 0x11c
 8002d1e:	f8cd 9130 	str.w	r9, [sp, #304]	@ 0x130
 8002d22:	9748      	str	r7, [sp, #288]	@ 0x120
 8002d24:	a847      	add	r0, sp, #284	@ 0x11c
 8002d26:	3324      	adds	r3, #36	@ 0x24
           local.A[6], local.A[7], local.A[0], R(i+7), K[i+7] );
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
        ctx->state[i] += local.A[i];
 8002d28:	f852 1f04 	ldr.w	r1, [r2, #4]!
 8002d2c:	f850 4f04 	ldr.w	r4, [r0, #4]!
    for( i = 0; i < 8; i++ )
 8002d30:	4293      	cmp	r3, r2
        ctx->state[i] += local.A[i];
 8002d32:	4421      	add	r1, r4
 8002d34:	6011      	str	r1, [r2, #0]
    for( i = 0; i < 8; i++ )
 8002d36:	d1f7      	bne.n	8002d28 <mbedtls_internal_sha256_process+0x698>

    /* Zeroise buffers and variables to clear sensitive data from memory. */
    mbedtls_platform_zeroize( &local, sizeof( local ) );
 8002d38:	a806      	add	r0, sp, #24
 8002d3a:	f44f 7194 	mov.w	r1, #296	@ 0x128
 8002d3e:	f7ff fc31 	bl	80025a4 <mbedtls_platform_zeroize>

    return( 0 );
}
 8002d42:	2000      	movs	r0, #0
 8002d44:	b051      	add	sp, #324	@ 0x144
 8002d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d4a:	bf00      	nop

08002d4c <mbedtls_sha256_update_ret>:
 * SHA-256 process buffer
 */
int mbedtls_sha256_update_ret( mbedtls_sha256_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
 8002d4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002d50:	4605      	mov	r5, r0
 8002d52:	460e      	mov	r6, r1
    uint32_t left;

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( ilen == 0 || input != NULL );

    if( ilen == 0 )
 8002d54:	4614      	mov	r4, r2
 8002d56:	b37a      	cbz	r2, 8002db8 <mbedtls_sha256_update_ret+0x6c>
        return( 0 );

    left = ctx->total[0] & 0x3F;
 8002d58:	6803      	ldr	r3, [r0, #0]
 8002d5a:	f003 073f 	and.w	r7, r3, #63	@ 0x3f
    fill = 64 - left;

    ctx->total[0] += (uint32_t) ilen;
 8002d5e:	189b      	adds	r3, r3, r2
 8002d60:	6003      	str	r3, [r0, #0]
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
        ctx->total[1]++;
 8002d62:	bf22      	ittt	cs
 8002d64:	6843      	ldrcs	r3, [r0, #4]
 8002d66:	3301      	addcs	r3, #1
 8002d68:	6043      	strcs	r3, [r0, #4]

    if( left && ilen >= fill )
 8002d6a:	b19f      	cbz	r7, 8002d94 <mbedtls_sha256_update_ret+0x48>
    fill = 64 - left;
 8002d6c:	f1c7 0940 	rsb	r9, r7, #64	@ 0x40
    if( left && ilen >= fill )
 8002d70:	454a      	cmp	r2, r9
 8002d72:	d30f      	bcc.n	8002d94 <mbedtls_sha256_update_ret+0x48>
    {
        memcpy( (void *) (ctx->buffer + left), input, fill );
 8002d74:	f100 0828 	add.w	r8, r0, #40	@ 0x28
 8002d78:	464a      	mov	r2, r9
 8002d7a:	eb08 0007 	add.w	r0, r8, r7
 8002d7e:	f000 f927 	bl	8002fd0 <memcpy>

        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
 8002d82:	4641      	mov	r1, r8
 8002d84:	4628      	mov	r0, r5
 8002d86:	f7ff fc83 	bl	8002690 <mbedtls_internal_sha256_process>
 8002d8a:	b9b0      	cbnz	r0, 8002dba <mbedtls_sha256_update_ret+0x6e>
            return( ret );

        input += fill;
 8002d8c:	443c      	add	r4, r7
        ilen  -= fill;
        left = 0;
 8002d8e:	4607      	mov	r7, r0
        input += fill;
 8002d90:	444e      	add	r6, r9
        ilen  -= fill;
 8002d92:	3c40      	subs	r4, #64	@ 0x40
        left = 0;
 8002d94:	4426      	add	r6, r4
 8002d96:	e004      	b.n	8002da2 <mbedtls_sha256_update_ret+0x56>
    }

    while( ilen >= 64 )
    {
        if( ( ret = mbedtls_internal_sha256_process( ctx, input ) ) != 0 )
 8002d98:	4628      	mov	r0, r5
 8002d9a:	f7ff fc79 	bl	8002690 <mbedtls_internal_sha256_process>
 8002d9e:	b960      	cbnz	r0, 8002dba <mbedtls_sha256_update_ret+0x6e>
            return( ret );

        input += 64;
        ilen  -= 64;
 8002da0:	3c40      	subs	r4, #64	@ 0x40
    while( ilen >= 64 )
 8002da2:	2c3f      	cmp	r4, #63	@ 0x3f
 8002da4:	eba6 0104 	sub.w	r1, r6, r4
 8002da8:	d8f6      	bhi.n	8002d98 <mbedtls_sha256_update_ret+0x4c>
    }

    if( ilen > 0 )
 8002daa:	b12c      	cbz	r4, 8002db8 <mbedtls_sha256_update_ret+0x6c>
        memcpy( (void *) (ctx->buffer + left), input, ilen );
 8002dac:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8002db0:	4622      	mov	r2, r4
 8002db2:	4438      	add	r0, r7
 8002db4:	f000 f90c 	bl	8002fd0 <memcpy>
        return( 0 );
 8002db8:	2000      	movs	r0, #0

    return( 0 );
}
 8002dba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08002dbe <mbedtls_sha256_finish_ret>:
/*
 * SHA-256 final digest
 */
int mbedtls_sha256_finish_ret( mbedtls_sha256_context *ctx,
                               unsigned char output[32] )
{
 8002dbe:	b570      	push	{r4, r5, r6, lr}
 8002dc0:	460d      	mov	r5, r1
    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;

    ctx->buffer[used++] = 0x80;
 8002dc2:	2180      	movs	r1, #128	@ 0x80
    used = ctx->total[0] & 0x3F;
 8002dc4:	6803      	ldr	r3, [r0, #0]

    if( used <= 56 )
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
 8002dc6:	f100 0628 	add.w	r6, r0, #40	@ 0x28
    used = ctx->total[0] & 0x3F;
 8002dca:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
    ctx->buffer[used++] = 0x80;
 8002dce:	1c5a      	adds	r2, r3, #1
    if( used <= 56 )
 8002dd0:	2a38      	cmp	r2, #56	@ 0x38
    ctx->buffer[used++] = 0x80;
 8002dd2:	4403      	add	r3, r0
{
 8002dd4:	4604      	mov	r4, r0
    ctx->buffer[used++] = 0x80;
 8002dd6:	f883 1028 	strb.w	r1, [r3, #40]	@ 0x28
        memset( ctx->buffer + used, 0, 56 - used );
 8002dda:	eb06 0002 	add.w	r0, r6, r2
    if( used <= 56 )
 8002dde:	d861      	bhi.n	8002ea4 <mbedtls_sha256_finish_ret+0xe6>
        memset( ctx->buffer + used, 0, 56 - used );
 8002de0:	2100      	movs	r1, #0
 8002de2:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
        memset( ctx->buffer + used, 0, 64 - used );

        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
            return( ret );

        memset( ctx->buffer, 0, 56 );
 8002de6:	f000 f8bf 	bl	8002f68 <memset>

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
 8002dea:	e9d4 3100 	ldrd	r3, r1, [r4]
    high = ( ctx->total[0] >> 29 )
 8002dee:	0f5a      	lsrs	r2, r3, #29
 8002df0:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
    low  = ( ctx->total[0] <<  3 );
 8002df4:	00db      	lsls	r3, r3, #3
 8002df6:	ba12      	rev	r2, r2
 8002df8:	ba1b      	rev	r3, r3

    MBEDTLS_PUT_UINT32_BE( high, ctx->buffer, 56 );
    MBEDTLS_PUT_UINT32_BE( low,  ctx->buffer, 60 );

    if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
 8002dfa:	4631      	mov	r1, r6
 8002dfc:	4620      	mov	r0, r4
    MBEDTLS_PUT_UINT32_BE( high, ctx->buffer, 56 );
 8002dfe:	6622      	str	r2, [r4, #96]	@ 0x60
    MBEDTLS_PUT_UINT32_BE( low,  ctx->buffer, 60 );
 8002e00:	6663      	str	r3, [r4, #100]	@ 0x64
    if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
 8002e02:	f7ff fc45 	bl	8002690 <mbedtls_internal_sha256_process>
 8002e06:	2800      	cmp	r0, #0
 8002e08:	d14b      	bne.n	8002ea2 <mbedtls_sha256_finish_ret+0xe4>
        return( ret );

    /*
     * Output final state
     */
    MBEDTLS_PUT_UINT32_BE( ctx->state[0], output,  0 );
 8002e0a:	7ae3      	ldrb	r3, [r4, #11]
 8002e0c:	702b      	strb	r3, [r5, #0]
 8002e0e:	8963      	ldrh	r3, [r4, #10]
 8002e10:	706b      	strb	r3, [r5, #1]
 8002e12:	68a3      	ldr	r3, [r4, #8]
 8002e14:	0a1b      	lsrs	r3, r3, #8
 8002e16:	70ab      	strb	r3, [r5, #2]
 8002e18:	68a3      	ldr	r3, [r4, #8]
 8002e1a:	70eb      	strb	r3, [r5, #3]
    MBEDTLS_PUT_UINT32_BE( ctx->state[1], output,  4 );
 8002e1c:	7be3      	ldrb	r3, [r4, #15]
 8002e1e:	712b      	strb	r3, [r5, #4]
 8002e20:	89e3      	ldrh	r3, [r4, #14]
 8002e22:	716b      	strb	r3, [r5, #5]
 8002e24:	68e3      	ldr	r3, [r4, #12]
 8002e26:	0a1b      	lsrs	r3, r3, #8
 8002e28:	71ab      	strb	r3, [r5, #6]
 8002e2a:	68e3      	ldr	r3, [r4, #12]
 8002e2c:	71eb      	strb	r3, [r5, #7]
    MBEDTLS_PUT_UINT32_BE( ctx->state[2], output,  8 );
 8002e2e:	7ce3      	ldrb	r3, [r4, #19]
 8002e30:	722b      	strb	r3, [r5, #8]
 8002e32:	8a63      	ldrh	r3, [r4, #18]
 8002e34:	726b      	strb	r3, [r5, #9]
 8002e36:	6923      	ldr	r3, [r4, #16]
 8002e38:	0a1b      	lsrs	r3, r3, #8
 8002e3a:	72ab      	strb	r3, [r5, #10]
 8002e3c:	6923      	ldr	r3, [r4, #16]
 8002e3e:	72eb      	strb	r3, [r5, #11]
    MBEDTLS_PUT_UINT32_BE( ctx->state[3], output, 12 );
 8002e40:	7de3      	ldrb	r3, [r4, #23]
 8002e42:	732b      	strb	r3, [r5, #12]
 8002e44:	8ae3      	ldrh	r3, [r4, #22]
 8002e46:	736b      	strb	r3, [r5, #13]
 8002e48:	6963      	ldr	r3, [r4, #20]
 8002e4a:	0a1b      	lsrs	r3, r3, #8
 8002e4c:	73ab      	strb	r3, [r5, #14]
 8002e4e:	6963      	ldr	r3, [r4, #20]
 8002e50:	73eb      	strb	r3, [r5, #15]
    MBEDTLS_PUT_UINT32_BE( ctx->state[4], output, 16 );
 8002e52:	7ee3      	ldrb	r3, [r4, #27]
 8002e54:	742b      	strb	r3, [r5, #16]
 8002e56:	8b63      	ldrh	r3, [r4, #26]
 8002e58:	746b      	strb	r3, [r5, #17]
 8002e5a:	69a3      	ldr	r3, [r4, #24]
 8002e5c:	0a1b      	lsrs	r3, r3, #8
 8002e5e:	74ab      	strb	r3, [r5, #18]
 8002e60:	69a3      	ldr	r3, [r4, #24]
 8002e62:	74eb      	strb	r3, [r5, #19]
    MBEDTLS_PUT_UINT32_BE( ctx->state[5], output, 20 );
 8002e64:	7fe3      	ldrb	r3, [r4, #31]
 8002e66:	752b      	strb	r3, [r5, #20]
 8002e68:	8be3      	ldrh	r3, [r4, #30]
 8002e6a:	756b      	strb	r3, [r5, #21]
 8002e6c:	69e3      	ldr	r3, [r4, #28]
 8002e6e:	0a1b      	lsrs	r3, r3, #8
 8002e70:	75ab      	strb	r3, [r5, #22]
 8002e72:	69e3      	ldr	r3, [r4, #28]
 8002e74:	75eb      	strb	r3, [r5, #23]
    MBEDTLS_PUT_UINT32_BE( ctx->state[6], output, 24 );
 8002e76:	f894 3023 	ldrb.w	r3, [r4, #35]	@ 0x23
 8002e7a:	762b      	strb	r3, [r5, #24]
 8002e7c:	8c63      	ldrh	r3, [r4, #34]	@ 0x22
 8002e7e:	766b      	strb	r3, [r5, #25]
 8002e80:	6a23      	ldr	r3, [r4, #32]
 8002e82:	0a1b      	lsrs	r3, r3, #8
 8002e84:	76ab      	strb	r3, [r5, #26]
 8002e86:	6a23      	ldr	r3, [r4, #32]
 8002e88:	76eb      	strb	r3, [r5, #27]

    if( ctx->is224 == 0 )
 8002e8a:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 8002e8c:	b94b      	cbnz	r3, 8002ea2 <mbedtls_sha256_finish_ret+0xe4>
        MBEDTLS_PUT_UINT32_BE( ctx->state[7], output, 28 );
 8002e8e:	f894 3027 	ldrb.w	r3, [r4, #39]	@ 0x27
 8002e92:	772b      	strb	r3, [r5, #28]
 8002e94:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8002e96:	776b      	strb	r3, [r5, #29]
 8002e98:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002e9a:	0a1b      	lsrs	r3, r3, #8
 8002e9c:	77ab      	strb	r3, [r5, #30]
 8002e9e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002ea0:	77eb      	strb	r3, [r5, #31]

    return( 0 );
}
 8002ea2:	bd70      	pop	{r4, r5, r6, pc}
        memset( ctx->buffer + used, 0, 64 - used );
 8002ea4:	2100      	movs	r1, #0
 8002ea6:	f1c2 0240 	rsb	r2, r2, #64	@ 0x40
 8002eaa:	f000 f85d 	bl	8002f68 <memset>
        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
 8002eae:	4631      	mov	r1, r6
 8002eb0:	4620      	mov	r0, r4
 8002eb2:	f7ff fbed 	bl	8002690 <mbedtls_internal_sha256_process>
 8002eb6:	2800      	cmp	r0, #0
 8002eb8:	d1f3      	bne.n	8002ea2 <mbedtls_sha256_finish_ret+0xe4>
        memset( ctx->buffer, 0, 56 );
 8002eba:	4601      	mov	r1, r0
 8002ebc:	2238      	movs	r2, #56	@ 0x38
 8002ebe:	4630      	mov	r0, r6
 8002ec0:	e791      	b.n	8002de6 <mbedtls_sha256_finish_ret+0x28>

08002ec2 <mbedtls_sha256_ret>:
 */
int mbedtls_sha256_ret( const unsigned char *input,
                        size_t ilen,
                        unsigned char output[32],
                        int is224 )
{
 8002ec2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ec4:	461c      	mov	r4, r3
 8002ec6:	b09d      	sub	sp, #116	@ 0x74
 8002ec8:	4606      	mov	r6, r0

    SHA256_VALIDATE_RET( is224 == 0 || is224 == 1 );
    SHA256_VALIDATE_RET( ilen == 0 || input != NULL );
    SHA256_VALIDATE_RET( (unsigned char *)output != NULL );

    mbedtls_sha256_init( &ctx );
 8002eca:	a801      	add	r0, sp, #4
{
 8002ecc:	460f      	mov	r7, r1
 8002ece:	4615      	mov	r5, r2
    mbedtls_sha256_init( &ctx );
 8002ed0:	f7ff fb72 	bl	80025b8 <mbedtls_sha256_init>

    if( ( ret = mbedtls_sha256_starts_ret( &ctx, is224 ) ) != 0 )
 8002ed4:	4621      	mov	r1, r4
 8002ed6:	a801      	add	r0, sp, #4
 8002ed8:	f7ff fb78 	bl	80025cc <mbedtls_sha256_starts_ret>
 8002edc:	4604      	mov	r4, r0
 8002ede:	b958      	cbnz	r0, 8002ef8 <mbedtls_sha256_ret+0x36>
        goto exit;

    if( ( ret = mbedtls_sha256_update_ret( &ctx, input, ilen ) ) != 0 )
 8002ee0:	463a      	mov	r2, r7
 8002ee2:	4631      	mov	r1, r6
 8002ee4:	a801      	add	r0, sp, #4
 8002ee6:	f7ff ff31 	bl	8002d4c <mbedtls_sha256_update_ret>
 8002eea:	4604      	mov	r4, r0
 8002eec:	b920      	cbnz	r0, 8002ef8 <mbedtls_sha256_ret+0x36>
        goto exit;

    if( ( ret = mbedtls_sha256_finish_ret( &ctx, output ) ) != 0 )
 8002eee:	4629      	mov	r1, r5
 8002ef0:	a801      	add	r0, sp, #4
 8002ef2:	f7ff ff64 	bl	8002dbe <mbedtls_sha256_finish_ret>
 8002ef6:	4604      	mov	r4, r0
    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_sha256_context ) );
 8002ef8:	a801      	add	r0, sp, #4
 8002efa:	216c      	movs	r1, #108	@ 0x6c
 8002efc:	f7ff fb52 	bl	80025a4 <mbedtls_platform_zeroize>

exit:
    mbedtls_sha256_free( &ctx );

    return( ret );
}
 8002f00:	4620      	mov	r0, r4
 8002f02:	b01d      	add	sp, #116	@ 0x74
 8002f04:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002f08 <_vsiprintf_r>:
 8002f08:	b500      	push	{lr}
 8002f0a:	b09b      	sub	sp, #108	@ 0x6c
 8002f0c:	9100      	str	r1, [sp, #0]
 8002f0e:	9104      	str	r1, [sp, #16]
 8002f10:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002f14:	9105      	str	r1, [sp, #20]
 8002f16:	9102      	str	r1, [sp, #8]
 8002f18:	4905      	ldr	r1, [pc, #20]	@ (8002f30 <_vsiprintf_r+0x28>)
 8002f1a:	9103      	str	r1, [sp, #12]
 8002f1c:	4669      	mov	r1, sp
 8002f1e:	f000 f9b7 	bl	8003290 <_svfiprintf_r>
 8002f22:	2200      	movs	r2, #0
 8002f24:	9b00      	ldr	r3, [sp, #0]
 8002f26:	701a      	strb	r2, [r3, #0]
 8002f28:	b01b      	add	sp, #108	@ 0x6c
 8002f2a:	f85d fb04 	ldr.w	pc, [sp], #4
 8002f2e:	bf00      	nop
 8002f30:	ffff0208 	.word	0xffff0208

08002f34 <vsiprintf>:
 8002f34:	4613      	mov	r3, r2
 8002f36:	460a      	mov	r2, r1
 8002f38:	4601      	mov	r1, r0
 8002f3a:	4802      	ldr	r0, [pc, #8]	@ (8002f44 <vsiprintf+0x10>)
 8002f3c:	6800      	ldr	r0, [r0, #0]
 8002f3e:	f7ff bfe3 	b.w	8002f08 <_vsiprintf_r>
 8002f42:	bf00      	nop
 8002f44:	20000034 	.word	0x20000034

08002f48 <memcmp>:
 8002f48:	b510      	push	{r4, lr}
 8002f4a:	3901      	subs	r1, #1
 8002f4c:	4402      	add	r2, r0
 8002f4e:	4290      	cmp	r0, r2
 8002f50:	d101      	bne.n	8002f56 <memcmp+0xe>
 8002f52:	2000      	movs	r0, #0
 8002f54:	e005      	b.n	8002f62 <memcmp+0x1a>
 8002f56:	7803      	ldrb	r3, [r0, #0]
 8002f58:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8002f5c:	42a3      	cmp	r3, r4
 8002f5e:	d001      	beq.n	8002f64 <memcmp+0x1c>
 8002f60:	1b18      	subs	r0, r3, r4
 8002f62:	bd10      	pop	{r4, pc}
 8002f64:	3001      	adds	r0, #1
 8002f66:	e7f2      	b.n	8002f4e <memcmp+0x6>

08002f68 <memset>:
 8002f68:	4603      	mov	r3, r0
 8002f6a:	4402      	add	r2, r0
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d100      	bne.n	8002f72 <memset+0xa>
 8002f70:	4770      	bx	lr
 8002f72:	f803 1b01 	strb.w	r1, [r3], #1
 8002f76:	e7f9      	b.n	8002f6c <memset+0x4>

08002f78 <__errno>:
 8002f78:	4b01      	ldr	r3, [pc, #4]	@ (8002f80 <__errno+0x8>)
 8002f7a:	6818      	ldr	r0, [r3, #0]
 8002f7c:	4770      	bx	lr
 8002f7e:	bf00      	nop
 8002f80:	20000034 	.word	0x20000034

08002f84 <__libc_init_array>:
 8002f84:	b570      	push	{r4, r5, r6, lr}
 8002f86:	2600      	movs	r6, #0
 8002f88:	4d0c      	ldr	r5, [pc, #48]	@ (8002fbc <__libc_init_array+0x38>)
 8002f8a:	4c0d      	ldr	r4, [pc, #52]	@ (8002fc0 <__libc_init_array+0x3c>)
 8002f8c:	1b64      	subs	r4, r4, r5
 8002f8e:	10a4      	asrs	r4, r4, #2
 8002f90:	42a6      	cmp	r6, r4
 8002f92:	d109      	bne.n	8002fa8 <__libc_init_array+0x24>
 8002f94:	f000 fc78 	bl	8003888 <_init>
 8002f98:	2600      	movs	r6, #0
 8002f9a:	4d0a      	ldr	r5, [pc, #40]	@ (8002fc4 <__libc_init_array+0x40>)
 8002f9c:	4c0a      	ldr	r4, [pc, #40]	@ (8002fc8 <__libc_init_array+0x44>)
 8002f9e:	1b64      	subs	r4, r4, r5
 8002fa0:	10a4      	asrs	r4, r4, #2
 8002fa2:	42a6      	cmp	r6, r4
 8002fa4:	d105      	bne.n	8002fb2 <__libc_init_array+0x2e>
 8002fa6:	bd70      	pop	{r4, r5, r6, pc}
 8002fa8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fac:	4798      	blx	r3
 8002fae:	3601      	adds	r6, #1
 8002fb0:	e7ee      	b.n	8002f90 <__libc_init_array+0xc>
 8002fb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fb6:	4798      	blx	r3
 8002fb8:	3601      	adds	r6, #1
 8002fba:	e7f2      	b.n	8002fa2 <__libc_init_array+0x1e>
 8002fbc:	08003ba4 	.word	0x08003ba4
 8002fc0:	08003ba4 	.word	0x08003ba4
 8002fc4:	08003ba4 	.word	0x08003ba4
 8002fc8:	08003ba8 	.word	0x08003ba8

08002fcc <__retarget_lock_acquire_recursive>:
 8002fcc:	4770      	bx	lr

08002fce <__retarget_lock_release_recursive>:
 8002fce:	4770      	bx	lr

08002fd0 <memcpy>:
 8002fd0:	440a      	add	r2, r1
 8002fd2:	4291      	cmp	r1, r2
 8002fd4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8002fd8:	d100      	bne.n	8002fdc <memcpy+0xc>
 8002fda:	4770      	bx	lr
 8002fdc:	b510      	push	{r4, lr}
 8002fde:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002fe2:	4291      	cmp	r1, r2
 8002fe4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002fe8:	d1f9      	bne.n	8002fde <memcpy+0xe>
 8002fea:	bd10      	pop	{r4, pc}

08002fec <_free_r>:
 8002fec:	b538      	push	{r3, r4, r5, lr}
 8002fee:	4605      	mov	r5, r0
 8002ff0:	2900      	cmp	r1, #0
 8002ff2:	d040      	beq.n	8003076 <_free_r+0x8a>
 8002ff4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002ff8:	1f0c      	subs	r4, r1, #4
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	bfb8      	it	lt
 8002ffe:	18e4      	addlt	r4, r4, r3
 8003000:	f000 f8de 	bl	80031c0 <__malloc_lock>
 8003004:	4a1c      	ldr	r2, [pc, #112]	@ (8003078 <_free_r+0x8c>)
 8003006:	6813      	ldr	r3, [r2, #0]
 8003008:	b933      	cbnz	r3, 8003018 <_free_r+0x2c>
 800300a:	6063      	str	r3, [r4, #4]
 800300c:	6014      	str	r4, [r2, #0]
 800300e:	4628      	mov	r0, r5
 8003010:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003014:	f000 b8da 	b.w	80031cc <__malloc_unlock>
 8003018:	42a3      	cmp	r3, r4
 800301a:	d908      	bls.n	800302e <_free_r+0x42>
 800301c:	6820      	ldr	r0, [r4, #0]
 800301e:	1821      	adds	r1, r4, r0
 8003020:	428b      	cmp	r3, r1
 8003022:	bf01      	itttt	eq
 8003024:	6819      	ldreq	r1, [r3, #0]
 8003026:	685b      	ldreq	r3, [r3, #4]
 8003028:	1809      	addeq	r1, r1, r0
 800302a:	6021      	streq	r1, [r4, #0]
 800302c:	e7ed      	b.n	800300a <_free_r+0x1e>
 800302e:	461a      	mov	r2, r3
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	b10b      	cbz	r3, 8003038 <_free_r+0x4c>
 8003034:	42a3      	cmp	r3, r4
 8003036:	d9fa      	bls.n	800302e <_free_r+0x42>
 8003038:	6811      	ldr	r1, [r2, #0]
 800303a:	1850      	adds	r0, r2, r1
 800303c:	42a0      	cmp	r0, r4
 800303e:	d10b      	bne.n	8003058 <_free_r+0x6c>
 8003040:	6820      	ldr	r0, [r4, #0]
 8003042:	4401      	add	r1, r0
 8003044:	1850      	adds	r0, r2, r1
 8003046:	4283      	cmp	r3, r0
 8003048:	6011      	str	r1, [r2, #0]
 800304a:	d1e0      	bne.n	800300e <_free_r+0x22>
 800304c:	6818      	ldr	r0, [r3, #0]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	4408      	add	r0, r1
 8003052:	6010      	str	r0, [r2, #0]
 8003054:	6053      	str	r3, [r2, #4]
 8003056:	e7da      	b.n	800300e <_free_r+0x22>
 8003058:	d902      	bls.n	8003060 <_free_r+0x74>
 800305a:	230c      	movs	r3, #12
 800305c:	602b      	str	r3, [r5, #0]
 800305e:	e7d6      	b.n	800300e <_free_r+0x22>
 8003060:	6820      	ldr	r0, [r4, #0]
 8003062:	1821      	adds	r1, r4, r0
 8003064:	428b      	cmp	r3, r1
 8003066:	bf01      	itttt	eq
 8003068:	6819      	ldreq	r1, [r3, #0]
 800306a:	685b      	ldreq	r3, [r3, #4]
 800306c:	1809      	addeq	r1, r1, r0
 800306e:	6021      	streq	r1, [r4, #0]
 8003070:	6063      	str	r3, [r4, #4]
 8003072:	6054      	str	r4, [r2, #4]
 8003074:	e7cb      	b.n	800300e <_free_r+0x22>
 8003076:	bd38      	pop	{r3, r4, r5, pc}
 8003078:	200024f0 	.word	0x200024f0

0800307c <sbrk_aligned>:
 800307c:	b570      	push	{r4, r5, r6, lr}
 800307e:	4e0f      	ldr	r6, [pc, #60]	@ (80030bc <sbrk_aligned+0x40>)
 8003080:	460c      	mov	r4, r1
 8003082:	6831      	ldr	r1, [r6, #0]
 8003084:	4605      	mov	r5, r0
 8003086:	b911      	cbnz	r1, 800308e <sbrk_aligned+0x12>
 8003088:	f000 fbaa 	bl	80037e0 <_sbrk_r>
 800308c:	6030      	str	r0, [r6, #0]
 800308e:	4621      	mov	r1, r4
 8003090:	4628      	mov	r0, r5
 8003092:	f000 fba5 	bl	80037e0 <_sbrk_r>
 8003096:	1c43      	adds	r3, r0, #1
 8003098:	d103      	bne.n	80030a2 <sbrk_aligned+0x26>
 800309a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800309e:	4620      	mov	r0, r4
 80030a0:	bd70      	pop	{r4, r5, r6, pc}
 80030a2:	1cc4      	adds	r4, r0, #3
 80030a4:	f024 0403 	bic.w	r4, r4, #3
 80030a8:	42a0      	cmp	r0, r4
 80030aa:	d0f8      	beq.n	800309e <sbrk_aligned+0x22>
 80030ac:	1a21      	subs	r1, r4, r0
 80030ae:	4628      	mov	r0, r5
 80030b0:	f000 fb96 	bl	80037e0 <_sbrk_r>
 80030b4:	3001      	adds	r0, #1
 80030b6:	d1f2      	bne.n	800309e <sbrk_aligned+0x22>
 80030b8:	e7ef      	b.n	800309a <sbrk_aligned+0x1e>
 80030ba:	bf00      	nop
 80030bc:	200024ec 	.word	0x200024ec

080030c0 <_malloc_r>:
 80030c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80030c4:	1ccd      	adds	r5, r1, #3
 80030c6:	f025 0503 	bic.w	r5, r5, #3
 80030ca:	3508      	adds	r5, #8
 80030cc:	2d0c      	cmp	r5, #12
 80030ce:	bf38      	it	cc
 80030d0:	250c      	movcc	r5, #12
 80030d2:	2d00      	cmp	r5, #0
 80030d4:	4606      	mov	r6, r0
 80030d6:	db01      	blt.n	80030dc <_malloc_r+0x1c>
 80030d8:	42a9      	cmp	r1, r5
 80030da:	d904      	bls.n	80030e6 <_malloc_r+0x26>
 80030dc:	230c      	movs	r3, #12
 80030de:	6033      	str	r3, [r6, #0]
 80030e0:	2000      	movs	r0, #0
 80030e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80030e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80031bc <_malloc_r+0xfc>
 80030ea:	f000 f869 	bl	80031c0 <__malloc_lock>
 80030ee:	f8d8 3000 	ldr.w	r3, [r8]
 80030f2:	461c      	mov	r4, r3
 80030f4:	bb44      	cbnz	r4, 8003148 <_malloc_r+0x88>
 80030f6:	4629      	mov	r1, r5
 80030f8:	4630      	mov	r0, r6
 80030fa:	f7ff ffbf 	bl	800307c <sbrk_aligned>
 80030fe:	1c43      	adds	r3, r0, #1
 8003100:	4604      	mov	r4, r0
 8003102:	d158      	bne.n	80031b6 <_malloc_r+0xf6>
 8003104:	f8d8 4000 	ldr.w	r4, [r8]
 8003108:	4627      	mov	r7, r4
 800310a:	2f00      	cmp	r7, #0
 800310c:	d143      	bne.n	8003196 <_malloc_r+0xd6>
 800310e:	2c00      	cmp	r4, #0
 8003110:	d04b      	beq.n	80031aa <_malloc_r+0xea>
 8003112:	6823      	ldr	r3, [r4, #0]
 8003114:	4639      	mov	r1, r7
 8003116:	4630      	mov	r0, r6
 8003118:	eb04 0903 	add.w	r9, r4, r3
 800311c:	f000 fb60 	bl	80037e0 <_sbrk_r>
 8003120:	4581      	cmp	r9, r0
 8003122:	d142      	bne.n	80031aa <_malloc_r+0xea>
 8003124:	6821      	ldr	r1, [r4, #0]
 8003126:	4630      	mov	r0, r6
 8003128:	1a6d      	subs	r5, r5, r1
 800312a:	4629      	mov	r1, r5
 800312c:	f7ff ffa6 	bl	800307c <sbrk_aligned>
 8003130:	3001      	adds	r0, #1
 8003132:	d03a      	beq.n	80031aa <_malloc_r+0xea>
 8003134:	6823      	ldr	r3, [r4, #0]
 8003136:	442b      	add	r3, r5
 8003138:	6023      	str	r3, [r4, #0]
 800313a:	f8d8 3000 	ldr.w	r3, [r8]
 800313e:	685a      	ldr	r2, [r3, #4]
 8003140:	bb62      	cbnz	r2, 800319c <_malloc_r+0xdc>
 8003142:	f8c8 7000 	str.w	r7, [r8]
 8003146:	e00f      	b.n	8003168 <_malloc_r+0xa8>
 8003148:	6822      	ldr	r2, [r4, #0]
 800314a:	1b52      	subs	r2, r2, r5
 800314c:	d420      	bmi.n	8003190 <_malloc_r+0xd0>
 800314e:	2a0b      	cmp	r2, #11
 8003150:	d917      	bls.n	8003182 <_malloc_r+0xc2>
 8003152:	1961      	adds	r1, r4, r5
 8003154:	42a3      	cmp	r3, r4
 8003156:	6025      	str	r5, [r4, #0]
 8003158:	bf18      	it	ne
 800315a:	6059      	strne	r1, [r3, #4]
 800315c:	6863      	ldr	r3, [r4, #4]
 800315e:	bf08      	it	eq
 8003160:	f8c8 1000 	streq.w	r1, [r8]
 8003164:	5162      	str	r2, [r4, r5]
 8003166:	604b      	str	r3, [r1, #4]
 8003168:	4630      	mov	r0, r6
 800316a:	f000 f82f 	bl	80031cc <__malloc_unlock>
 800316e:	f104 000b 	add.w	r0, r4, #11
 8003172:	1d23      	adds	r3, r4, #4
 8003174:	f020 0007 	bic.w	r0, r0, #7
 8003178:	1ac2      	subs	r2, r0, r3
 800317a:	bf1c      	itt	ne
 800317c:	1a1b      	subne	r3, r3, r0
 800317e:	50a3      	strne	r3, [r4, r2]
 8003180:	e7af      	b.n	80030e2 <_malloc_r+0x22>
 8003182:	6862      	ldr	r2, [r4, #4]
 8003184:	42a3      	cmp	r3, r4
 8003186:	bf0c      	ite	eq
 8003188:	f8c8 2000 	streq.w	r2, [r8]
 800318c:	605a      	strne	r2, [r3, #4]
 800318e:	e7eb      	b.n	8003168 <_malloc_r+0xa8>
 8003190:	4623      	mov	r3, r4
 8003192:	6864      	ldr	r4, [r4, #4]
 8003194:	e7ae      	b.n	80030f4 <_malloc_r+0x34>
 8003196:	463c      	mov	r4, r7
 8003198:	687f      	ldr	r7, [r7, #4]
 800319a:	e7b6      	b.n	800310a <_malloc_r+0x4a>
 800319c:	461a      	mov	r2, r3
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	42a3      	cmp	r3, r4
 80031a2:	d1fb      	bne.n	800319c <_malloc_r+0xdc>
 80031a4:	2300      	movs	r3, #0
 80031a6:	6053      	str	r3, [r2, #4]
 80031a8:	e7de      	b.n	8003168 <_malloc_r+0xa8>
 80031aa:	230c      	movs	r3, #12
 80031ac:	4630      	mov	r0, r6
 80031ae:	6033      	str	r3, [r6, #0]
 80031b0:	f000 f80c 	bl	80031cc <__malloc_unlock>
 80031b4:	e794      	b.n	80030e0 <_malloc_r+0x20>
 80031b6:	6005      	str	r5, [r0, #0]
 80031b8:	e7d6      	b.n	8003168 <_malloc_r+0xa8>
 80031ba:	bf00      	nop
 80031bc:	200024f0 	.word	0x200024f0

080031c0 <__malloc_lock>:
 80031c0:	4801      	ldr	r0, [pc, #4]	@ (80031c8 <__malloc_lock+0x8>)
 80031c2:	f7ff bf03 	b.w	8002fcc <__retarget_lock_acquire_recursive>
 80031c6:	bf00      	nop
 80031c8:	200024e8 	.word	0x200024e8

080031cc <__malloc_unlock>:
 80031cc:	4801      	ldr	r0, [pc, #4]	@ (80031d4 <__malloc_unlock+0x8>)
 80031ce:	f7ff befe 	b.w	8002fce <__retarget_lock_release_recursive>
 80031d2:	bf00      	nop
 80031d4:	200024e8 	.word	0x200024e8

080031d8 <__ssputs_r>:
 80031d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80031dc:	461f      	mov	r7, r3
 80031de:	688e      	ldr	r6, [r1, #8]
 80031e0:	4682      	mov	sl, r0
 80031e2:	42be      	cmp	r6, r7
 80031e4:	460c      	mov	r4, r1
 80031e6:	4690      	mov	r8, r2
 80031e8:	680b      	ldr	r3, [r1, #0]
 80031ea:	d82d      	bhi.n	8003248 <__ssputs_r+0x70>
 80031ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80031f0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80031f4:	d026      	beq.n	8003244 <__ssputs_r+0x6c>
 80031f6:	6965      	ldr	r5, [r4, #20]
 80031f8:	6909      	ldr	r1, [r1, #16]
 80031fa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80031fe:	eba3 0901 	sub.w	r9, r3, r1
 8003202:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003206:	1c7b      	adds	r3, r7, #1
 8003208:	444b      	add	r3, r9
 800320a:	106d      	asrs	r5, r5, #1
 800320c:	429d      	cmp	r5, r3
 800320e:	bf38      	it	cc
 8003210:	461d      	movcc	r5, r3
 8003212:	0553      	lsls	r3, r2, #21
 8003214:	d527      	bpl.n	8003266 <__ssputs_r+0x8e>
 8003216:	4629      	mov	r1, r5
 8003218:	f7ff ff52 	bl	80030c0 <_malloc_r>
 800321c:	4606      	mov	r6, r0
 800321e:	b360      	cbz	r0, 800327a <__ssputs_r+0xa2>
 8003220:	464a      	mov	r2, r9
 8003222:	6921      	ldr	r1, [r4, #16]
 8003224:	f7ff fed4 	bl	8002fd0 <memcpy>
 8003228:	89a3      	ldrh	r3, [r4, #12]
 800322a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800322e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003232:	81a3      	strh	r3, [r4, #12]
 8003234:	6126      	str	r6, [r4, #16]
 8003236:	444e      	add	r6, r9
 8003238:	6026      	str	r6, [r4, #0]
 800323a:	463e      	mov	r6, r7
 800323c:	6165      	str	r5, [r4, #20]
 800323e:	eba5 0509 	sub.w	r5, r5, r9
 8003242:	60a5      	str	r5, [r4, #8]
 8003244:	42be      	cmp	r6, r7
 8003246:	d900      	bls.n	800324a <__ssputs_r+0x72>
 8003248:	463e      	mov	r6, r7
 800324a:	4632      	mov	r2, r6
 800324c:	4641      	mov	r1, r8
 800324e:	6820      	ldr	r0, [r4, #0]
 8003250:	f000 faac 	bl	80037ac <memmove>
 8003254:	2000      	movs	r0, #0
 8003256:	68a3      	ldr	r3, [r4, #8]
 8003258:	1b9b      	subs	r3, r3, r6
 800325a:	60a3      	str	r3, [r4, #8]
 800325c:	6823      	ldr	r3, [r4, #0]
 800325e:	4433      	add	r3, r6
 8003260:	6023      	str	r3, [r4, #0]
 8003262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003266:	462a      	mov	r2, r5
 8003268:	f000 fad8 	bl	800381c <_realloc_r>
 800326c:	4606      	mov	r6, r0
 800326e:	2800      	cmp	r0, #0
 8003270:	d1e0      	bne.n	8003234 <__ssputs_r+0x5c>
 8003272:	4650      	mov	r0, sl
 8003274:	6921      	ldr	r1, [r4, #16]
 8003276:	f7ff feb9 	bl	8002fec <_free_r>
 800327a:	230c      	movs	r3, #12
 800327c:	f8ca 3000 	str.w	r3, [sl]
 8003280:	89a3      	ldrh	r3, [r4, #12]
 8003282:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003286:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800328a:	81a3      	strh	r3, [r4, #12]
 800328c:	e7e9      	b.n	8003262 <__ssputs_r+0x8a>
	...

08003290 <_svfiprintf_r>:
 8003290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003294:	4698      	mov	r8, r3
 8003296:	898b      	ldrh	r3, [r1, #12]
 8003298:	4607      	mov	r7, r0
 800329a:	061b      	lsls	r3, r3, #24
 800329c:	460d      	mov	r5, r1
 800329e:	4614      	mov	r4, r2
 80032a0:	b09d      	sub	sp, #116	@ 0x74
 80032a2:	d510      	bpl.n	80032c6 <_svfiprintf_r+0x36>
 80032a4:	690b      	ldr	r3, [r1, #16]
 80032a6:	b973      	cbnz	r3, 80032c6 <_svfiprintf_r+0x36>
 80032a8:	2140      	movs	r1, #64	@ 0x40
 80032aa:	f7ff ff09 	bl	80030c0 <_malloc_r>
 80032ae:	6028      	str	r0, [r5, #0]
 80032b0:	6128      	str	r0, [r5, #16]
 80032b2:	b930      	cbnz	r0, 80032c2 <_svfiprintf_r+0x32>
 80032b4:	230c      	movs	r3, #12
 80032b6:	603b      	str	r3, [r7, #0]
 80032b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80032bc:	b01d      	add	sp, #116	@ 0x74
 80032be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032c2:	2340      	movs	r3, #64	@ 0x40
 80032c4:	616b      	str	r3, [r5, #20]
 80032c6:	2300      	movs	r3, #0
 80032c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80032ca:	2320      	movs	r3, #32
 80032cc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80032d0:	2330      	movs	r3, #48	@ 0x30
 80032d2:	f04f 0901 	mov.w	r9, #1
 80032d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80032da:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8003474 <_svfiprintf_r+0x1e4>
 80032de:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80032e2:	4623      	mov	r3, r4
 80032e4:	469a      	mov	sl, r3
 80032e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80032ea:	b10a      	cbz	r2, 80032f0 <_svfiprintf_r+0x60>
 80032ec:	2a25      	cmp	r2, #37	@ 0x25
 80032ee:	d1f9      	bne.n	80032e4 <_svfiprintf_r+0x54>
 80032f0:	ebba 0b04 	subs.w	fp, sl, r4
 80032f4:	d00b      	beq.n	800330e <_svfiprintf_r+0x7e>
 80032f6:	465b      	mov	r3, fp
 80032f8:	4622      	mov	r2, r4
 80032fa:	4629      	mov	r1, r5
 80032fc:	4638      	mov	r0, r7
 80032fe:	f7ff ff6b 	bl	80031d8 <__ssputs_r>
 8003302:	3001      	adds	r0, #1
 8003304:	f000 80a7 	beq.w	8003456 <_svfiprintf_r+0x1c6>
 8003308:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800330a:	445a      	add	r2, fp
 800330c:	9209      	str	r2, [sp, #36]	@ 0x24
 800330e:	f89a 3000 	ldrb.w	r3, [sl]
 8003312:	2b00      	cmp	r3, #0
 8003314:	f000 809f 	beq.w	8003456 <_svfiprintf_r+0x1c6>
 8003318:	2300      	movs	r3, #0
 800331a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800331e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003322:	f10a 0a01 	add.w	sl, sl, #1
 8003326:	9304      	str	r3, [sp, #16]
 8003328:	9307      	str	r3, [sp, #28]
 800332a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800332e:	931a      	str	r3, [sp, #104]	@ 0x68
 8003330:	4654      	mov	r4, sl
 8003332:	2205      	movs	r2, #5
 8003334:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003338:	484e      	ldr	r0, [pc, #312]	@ (8003474 <_svfiprintf_r+0x1e4>)
 800333a:	f000 fa61 	bl	8003800 <memchr>
 800333e:	9a04      	ldr	r2, [sp, #16]
 8003340:	b9d8      	cbnz	r0, 800337a <_svfiprintf_r+0xea>
 8003342:	06d0      	lsls	r0, r2, #27
 8003344:	bf44      	itt	mi
 8003346:	2320      	movmi	r3, #32
 8003348:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800334c:	0711      	lsls	r1, r2, #28
 800334e:	bf44      	itt	mi
 8003350:	232b      	movmi	r3, #43	@ 0x2b
 8003352:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003356:	f89a 3000 	ldrb.w	r3, [sl]
 800335a:	2b2a      	cmp	r3, #42	@ 0x2a
 800335c:	d015      	beq.n	800338a <_svfiprintf_r+0xfa>
 800335e:	4654      	mov	r4, sl
 8003360:	2000      	movs	r0, #0
 8003362:	f04f 0c0a 	mov.w	ip, #10
 8003366:	9a07      	ldr	r2, [sp, #28]
 8003368:	4621      	mov	r1, r4
 800336a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800336e:	3b30      	subs	r3, #48	@ 0x30
 8003370:	2b09      	cmp	r3, #9
 8003372:	d94b      	bls.n	800340c <_svfiprintf_r+0x17c>
 8003374:	b1b0      	cbz	r0, 80033a4 <_svfiprintf_r+0x114>
 8003376:	9207      	str	r2, [sp, #28]
 8003378:	e014      	b.n	80033a4 <_svfiprintf_r+0x114>
 800337a:	eba0 0308 	sub.w	r3, r0, r8
 800337e:	fa09 f303 	lsl.w	r3, r9, r3
 8003382:	4313      	orrs	r3, r2
 8003384:	46a2      	mov	sl, r4
 8003386:	9304      	str	r3, [sp, #16]
 8003388:	e7d2      	b.n	8003330 <_svfiprintf_r+0xa0>
 800338a:	9b03      	ldr	r3, [sp, #12]
 800338c:	1d19      	adds	r1, r3, #4
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	9103      	str	r1, [sp, #12]
 8003392:	2b00      	cmp	r3, #0
 8003394:	bfbb      	ittet	lt
 8003396:	425b      	neglt	r3, r3
 8003398:	f042 0202 	orrlt.w	r2, r2, #2
 800339c:	9307      	strge	r3, [sp, #28]
 800339e:	9307      	strlt	r3, [sp, #28]
 80033a0:	bfb8      	it	lt
 80033a2:	9204      	strlt	r2, [sp, #16]
 80033a4:	7823      	ldrb	r3, [r4, #0]
 80033a6:	2b2e      	cmp	r3, #46	@ 0x2e
 80033a8:	d10a      	bne.n	80033c0 <_svfiprintf_r+0x130>
 80033aa:	7863      	ldrb	r3, [r4, #1]
 80033ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80033ae:	d132      	bne.n	8003416 <_svfiprintf_r+0x186>
 80033b0:	9b03      	ldr	r3, [sp, #12]
 80033b2:	3402      	adds	r4, #2
 80033b4:	1d1a      	adds	r2, r3, #4
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	9203      	str	r2, [sp, #12]
 80033ba:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80033be:	9305      	str	r3, [sp, #20]
 80033c0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8003478 <_svfiprintf_r+0x1e8>
 80033c4:	2203      	movs	r2, #3
 80033c6:	4650      	mov	r0, sl
 80033c8:	7821      	ldrb	r1, [r4, #0]
 80033ca:	f000 fa19 	bl	8003800 <memchr>
 80033ce:	b138      	cbz	r0, 80033e0 <_svfiprintf_r+0x150>
 80033d0:	2240      	movs	r2, #64	@ 0x40
 80033d2:	9b04      	ldr	r3, [sp, #16]
 80033d4:	eba0 000a 	sub.w	r0, r0, sl
 80033d8:	4082      	lsls	r2, r0
 80033da:	4313      	orrs	r3, r2
 80033dc:	3401      	adds	r4, #1
 80033de:	9304      	str	r3, [sp, #16]
 80033e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80033e4:	2206      	movs	r2, #6
 80033e6:	4825      	ldr	r0, [pc, #148]	@ (800347c <_svfiprintf_r+0x1ec>)
 80033e8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80033ec:	f000 fa08 	bl	8003800 <memchr>
 80033f0:	2800      	cmp	r0, #0
 80033f2:	d036      	beq.n	8003462 <_svfiprintf_r+0x1d2>
 80033f4:	4b22      	ldr	r3, [pc, #136]	@ (8003480 <_svfiprintf_r+0x1f0>)
 80033f6:	bb1b      	cbnz	r3, 8003440 <_svfiprintf_r+0x1b0>
 80033f8:	9b03      	ldr	r3, [sp, #12]
 80033fa:	3307      	adds	r3, #7
 80033fc:	f023 0307 	bic.w	r3, r3, #7
 8003400:	3308      	adds	r3, #8
 8003402:	9303      	str	r3, [sp, #12]
 8003404:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003406:	4433      	add	r3, r6
 8003408:	9309      	str	r3, [sp, #36]	@ 0x24
 800340a:	e76a      	b.n	80032e2 <_svfiprintf_r+0x52>
 800340c:	460c      	mov	r4, r1
 800340e:	2001      	movs	r0, #1
 8003410:	fb0c 3202 	mla	r2, ip, r2, r3
 8003414:	e7a8      	b.n	8003368 <_svfiprintf_r+0xd8>
 8003416:	2300      	movs	r3, #0
 8003418:	f04f 0c0a 	mov.w	ip, #10
 800341c:	4619      	mov	r1, r3
 800341e:	3401      	adds	r4, #1
 8003420:	9305      	str	r3, [sp, #20]
 8003422:	4620      	mov	r0, r4
 8003424:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003428:	3a30      	subs	r2, #48	@ 0x30
 800342a:	2a09      	cmp	r2, #9
 800342c:	d903      	bls.n	8003436 <_svfiprintf_r+0x1a6>
 800342e:	2b00      	cmp	r3, #0
 8003430:	d0c6      	beq.n	80033c0 <_svfiprintf_r+0x130>
 8003432:	9105      	str	r1, [sp, #20]
 8003434:	e7c4      	b.n	80033c0 <_svfiprintf_r+0x130>
 8003436:	4604      	mov	r4, r0
 8003438:	2301      	movs	r3, #1
 800343a:	fb0c 2101 	mla	r1, ip, r1, r2
 800343e:	e7f0      	b.n	8003422 <_svfiprintf_r+0x192>
 8003440:	ab03      	add	r3, sp, #12
 8003442:	9300      	str	r3, [sp, #0]
 8003444:	462a      	mov	r2, r5
 8003446:	4638      	mov	r0, r7
 8003448:	4b0e      	ldr	r3, [pc, #56]	@ (8003484 <_svfiprintf_r+0x1f4>)
 800344a:	a904      	add	r1, sp, #16
 800344c:	f3af 8000 	nop.w
 8003450:	1c42      	adds	r2, r0, #1
 8003452:	4606      	mov	r6, r0
 8003454:	d1d6      	bne.n	8003404 <_svfiprintf_r+0x174>
 8003456:	89ab      	ldrh	r3, [r5, #12]
 8003458:	065b      	lsls	r3, r3, #25
 800345a:	f53f af2d 	bmi.w	80032b8 <_svfiprintf_r+0x28>
 800345e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003460:	e72c      	b.n	80032bc <_svfiprintf_r+0x2c>
 8003462:	ab03      	add	r3, sp, #12
 8003464:	9300      	str	r3, [sp, #0]
 8003466:	462a      	mov	r2, r5
 8003468:	4638      	mov	r0, r7
 800346a:	4b06      	ldr	r3, [pc, #24]	@ (8003484 <_svfiprintf_r+0x1f4>)
 800346c:	a904      	add	r1, sp, #16
 800346e:	f000 f87d 	bl	800356c <_printf_i>
 8003472:	e7ed      	b.n	8003450 <_svfiprintf_r+0x1c0>
 8003474:	08003b68 	.word	0x08003b68
 8003478:	08003b6e 	.word	0x08003b6e
 800347c:	08003b72 	.word	0x08003b72
 8003480:	00000000 	.word	0x00000000
 8003484:	080031d9 	.word	0x080031d9

08003488 <_printf_common>:
 8003488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800348c:	4616      	mov	r6, r2
 800348e:	4698      	mov	r8, r3
 8003490:	688a      	ldr	r2, [r1, #8]
 8003492:	690b      	ldr	r3, [r1, #16]
 8003494:	4607      	mov	r7, r0
 8003496:	4293      	cmp	r3, r2
 8003498:	bfb8      	it	lt
 800349a:	4613      	movlt	r3, r2
 800349c:	6033      	str	r3, [r6, #0]
 800349e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80034a2:	460c      	mov	r4, r1
 80034a4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80034a8:	b10a      	cbz	r2, 80034ae <_printf_common+0x26>
 80034aa:	3301      	adds	r3, #1
 80034ac:	6033      	str	r3, [r6, #0]
 80034ae:	6823      	ldr	r3, [r4, #0]
 80034b0:	0699      	lsls	r1, r3, #26
 80034b2:	bf42      	ittt	mi
 80034b4:	6833      	ldrmi	r3, [r6, #0]
 80034b6:	3302      	addmi	r3, #2
 80034b8:	6033      	strmi	r3, [r6, #0]
 80034ba:	6825      	ldr	r5, [r4, #0]
 80034bc:	f015 0506 	ands.w	r5, r5, #6
 80034c0:	d106      	bne.n	80034d0 <_printf_common+0x48>
 80034c2:	f104 0a19 	add.w	sl, r4, #25
 80034c6:	68e3      	ldr	r3, [r4, #12]
 80034c8:	6832      	ldr	r2, [r6, #0]
 80034ca:	1a9b      	subs	r3, r3, r2
 80034cc:	42ab      	cmp	r3, r5
 80034ce:	dc2b      	bgt.n	8003528 <_printf_common+0xa0>
 80034d0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80034d4:	6822      	ldr	r2, [r4, #0]
 80034d6:	3b00      	subs	r3, #0
 80034d8:	bf18      	it	ne
 80034da:	2301      	movne	r3, #1
 80034dc:	0692      	lsls	r2, r2, #26
 80034de:	d430      	bmi.n	8003542 <_printf_common+0xba>
 80034e0:	4641      	mov	r1, r8
 80034e2:	4638      	mov	r0, r7
 80034e4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80034e8:	47c8      	blx	r9
 80034ea:	3001      	adds	r0, #1
 80034ec:	d023      	beq.n	8003536 <_printf_common+0xae>
 80034ee:	6823      	ldr	r3, [r4, #0]
 80034f0:	6922      	ldr	r2, [r4, #16]
 80034f2:	f003 0306 	and.w	r3, r3, #6
 80034f6:	2b04      	cmp	r3, #4
 80034f8:	bf14      	ite	ne
 80034fa:	2500      	movne	r5, #0
 80034fc:	6833      	ldreq	r3, [r6, #0]
 80034fe:	f04f 0600 	mov.w	r6, #0
 8003502:	bf08      	it	eq
 8003504:	68e5      	ldreq	r5, [r4, #12]
 8003506:	f104 041a 	add.w	r4, r4, #26
 800350a:	bf08      	it	eq
 800350c:	1aed      	subeq	r5, r5, r3
 800350e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003512:	bf08      	it	eq
 8003514:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003518:	4293      	cmp	r3, r2
 800351a:	bfc4      	itt	gt
 800351c:	1a9b      	subgt	r3, r3, r2
 800351e:	18ed      	addgt	r5, r5, r3
 8003520:	42b5      	cmp	r5, r6
 8003522:	d11a      	bne.n	800355a <_printf_common+0xd2>
 8003524:	2000      	movs	r0, #0
 8003526:	e008      	b.n	800353a <_printf_common+0xb2>
 8003528:	2301      	movs	r3, #1
 800352a:	4652      	mov	r2, sl
 800352c:	4641      	mov	r1, r8
 800352e:	4638      	mov	r0, r7
 8003530:	47c8      	blx	r9
 8003532:	3001      	adds	r0, #1
 8003534:	d103      	bne.n	800353e <_printf_common+0xb6>
 8003536:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800353a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800353e:	3501      	adds	r5, #1
 8003540:	e7c1      	b.n	80034c6 <_printf_common+0x3e>
 8003542:	2030      	movs	r0, #48	@ 0x30
 8003544:	18e1      	adds	r1, r4, r3
 8003546:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800354a:	1c5a      	adds	r2, r3, #1
 800354c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003550:	4422      	add	r2, r4
 8003552:	3302      	adds	r3, #2
 8003554:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003558:	e7c2      	b.n	80034e0 <_printf_common+0x58>
 800355a:	2301      	movs	r3, #1
 800355c:	4622      	mov	r2, r4
 800355e:	4641      	mov	r1, r8
 8003560:	4638      	mov	r0, r7
 8003562:	47c8      	blx	r9
 8003564:	3001      	adds	r0, #1
 8003566:	d0e6      	beq.n	8003536 <_printf_common+0xae>
 8003568:	3601      	adds	r6, #1
 800356a:	e7d9      	b.n	8003520 <_printf_common+0x98>

0800356c <_printf_i>:
 800356c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003570:	7e0f      	ldrb	r7, [r1, #24]
 8003572:	4691      	mov	r9, r2
 8003574:	2f78      	cmp	r7, #120	@ 0x78
 8003576:	4680      	mov	r8, r0
 8003578:	460c      	mov	r4, r1
 800357a:	469a      	mov	sl, r3
 800357c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800357e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003582:	d807      	bhi.n	8003594 <_printf_i+0x28>
 8003584:	2f62      	cmp	r7, #98	@ 0x62
 8003586:	d80a      	bhi.n	800359e <_printf_i+0x32>
 8003588:	2f00      	cmp	r7, #0
 800358a:	f000 80d3 	beq.w	8003734 <_printf_i+0x1c8>
 800358e:	2f58      	cmp	r7, #88	@ 0x58
 8003590:	f000 80ba 	beq.w	8003708 <_printf_i+0x19c>
 8003594:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003598:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800359c:	e03a      	b.n	8003614 <_printf_i+0xa8>
 800359e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80035a2:	2b15      	cmp	r3, #21
 80035a4:	d8f6      	bhi.n	8003594 <_printf_i+0x28>
 80035a6:	a101      	add	r1, pc, #4	@ (adr r1, 80035ac <_printf_i+0x40>)
 80035a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80035ac:	08003605 	.word	0x08003605
 80035b0:	08003619 	.word	0x08003619
 80035b4:	08003595 	.word	0x08003595
 80035b8:	08003595 	.word	0x08003595
 80035bc:	08003595 	.word	0x08003595
 80035c0:	08003595 	.word	0x08003595
 80035c4:	08003619 	.word	0x08003619
 80035c8:	08003595 	.word	0x08003595
 80035cc:	08003595 	.word	0x08003595
 80035d0:	08003595 	.word	0x08003595
 80035d4:	08003595 	.word	0x08003595
 80035d8:	0800371b 	.word	0x0800371b
 80035dc:	08003643 	.word	0x08003643
 80035e0:	080036d5 	.word	0x080036d5
 80035e4:	08003595 	.word	0x08003595
 80035e8:	08003595 	.word	0x08003595
 80035ec:	0800373d 	.word	0x0800373d
 80035f0:	08003595 	.word	0x08003595
 80035f4:	08003643 	.word	0x08003643
 80035f8:	08003595 	.word	0x08003595
 80035fc:	08003595 	.word	0x08003595
 8003600:	080036dd 	.word	0x080036dd
 8003604:	6833      	ldr	r3, [r6, #0]
 8003606:	1d1a      	adds	r2, r3, #4
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	6032      	str	r2, [r6, #0]
 800360c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003610:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003614:	2301      	movs	r3, #1
 8003616:	e09e      	b.n	8003756 <_printf_i+0x1ea>
 8003618:	6833      	ldr	r3, [r6, #0]
 800361a:	6820      	ldr	r0, [r4, #0]
 800361c:	1d19      	adds	r1, r3, #4
 800361e:	6031      	str	r1, [r6, #0]
 8003620:	0606      	lsls	r6, r0, #24
 8003622:	d501      	bpl.n	8003628 <_printf_i+0xbc>
 8003624:	681d      	ldr	r5, [r3, #0]
 8003626:	e003      	b.n	8003630 <_printf_i+0xc4>
 8003628:	0645      	lsls	r5, r0, #25
 800362a:	d5fb      	bpl.n	8003624 <_printf_i+0xb8>
 800362c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003630:	2d00      	cmp	r5, #0
 8003632:	da03      	bge.n	800363c <_printf_i+0xd0>
 8003634:	232d      	movs	r3, #45	@ 0x2d
 8003636:	426d      	negs	r5, r5
 8003638:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800363c:	230a      	movs	r3, #10
 800363e:	4859      	ldr	r0, [pc, #356]	@ (80037a4 <_printf_i+0x238>)
 8003640:	e011      	b.n	8003666 <_printf_i+0xfa>
 8003642:	6821      	ldr	r1, [r4, #0]
 8003644:	6833      	ldr	r3, [r6, #0]
 8003646:	0608      	lsls	r0, r1, #24
 8003648:	f853 5b04 	ldr.w	r5, [r3], #4
 800364c:	d402      	bmi.n	8003654 <_printf_i+0xe8>
 800364e:	0649      	lsls	r1, r1, #25
 8003650:	bf48      	it	mi
 8003652:	b2ad      	uxthmi	r5, r5
 8003654:	2f6f      	cmp	r7, #111	@ 0x6f
 8003656:	6033      	str	r3, [r6, #0]
 8003658:	bf14      	ite	ne
 800365a:	230a      	movne	r3, #10
 800365c:	2308      	moveq	r3, #8
 800365e:	4851      	ldr	r0, [pc, #324]	@ (80037a4 <_printf_i+0x238>)
 8003660:	2100      	movs	r1, #0
 8003662:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003666:	6866      	ldr	r6, [r4, #4]
 8003668:	2e00      	cmp	r6, #0
 800366a:	bfa8      	it	ge
 800366c:	6821      	ldrge	r1, [r4, #0]
 800366e:	60a6      	str	r6, [r4, #8]
 8003670:	bfa4      	itt	ge
 8003672:	f021 0104 	bicge.w	r1, r1, #4
 8003676:	6021      	strge	r1, [r4, #0]
 8003678:	b90d      	cbnz	r5, 800367e <_printf_i+0x112>
 800367a:	2e00      	cmp	r6, #0
 800367c:	d04b      	beq.n	8003716 <_printf_i+0x1aa>
 800367e:	4616      	mov	r6, r2
 8003680:	fbb5 f1f3 	udiv	r1, r5, r3
 8003684:	fb03 5711 	mls	r7, r3, r1, r5
 8003688:	5dc7      	ldrb	r7, [r0, r7]
 800368a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800368e:	462f      	mov	r7, r5
 8003690:	42bb      	cmp	r3, r7
 8003692:	460d      	mov	r5, r1
 8003694:	d9f4      	bls.n	8003680 <_printf_i+0x114>
 8003696:	2b08      	cmp	r3, #8
 8003698:	d10b      	bne.n	80036b2 <_printf_i+0x146>
 800369a:	6823      	ldr	r3, [r4, #0]
 800369c:	07df      	lsls	r7, r3, #31
 800369e:	d508      	bpl.n	80036b2 <_printf_i+0x146>
 80036a0:	6923      	ldr	r3, [r4, #16]
 80036a2:	6861      	ldr	r1, [r4, #4]
 80036a4:	4299      	cmp	r1, r3
 80036a6:	bfde      	ittt	le
 80036a8:	2330      	movle	r3, #48	@ 0x30
 80036aa:	f806 3c01 	strble.w	r3, [r6, #-1]
 80036ae:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80036b2:	1b92      	subs	r2, r2, r6
 80036b4:	6122      	str	r2, [r4, #16]
 80036b6:	464b      	mov	r3, r9
 80036b8:	4621      	mov	r1, r4
 80036ba:	4640      	mov	r0, r8
 80036bc:	f8cd a000 	str.w	sl, [sp]
 80036c0:	aa03      	add	r2, sp, #12
 80036c2:	f7ff fee1 	bl	8003488 <_printf_common>
 80036c6:	3001      	adds	r0, #1
 80036c8:	d14a      	bne.n	8003760 <_printf_i+0x1f4>
 80036ca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80036ce:	b004      	add	sp, #16
 80036d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036d4:	6823      	ldr	r3, [r4, #0]
 80036d6:	f043 0320 	orr.w	r3, r3, #32
 80036da:	6023      	str	r3, [r4, #0]
 80036dc:	2778      	movs	r7, #120	@ 0x78
 80036de:	4832      	ldr	r0, [pc, #200]	@ (80037a8 <_printf_i+0x23c>)
 80036e0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80036e4:	6823      	ldr	r3, [r4, #0]
 80036e6:	6831      	ldr	r1, [r6, #0]
 80036e8:	061f      	lsls	r7, r3, #24
 80036ea:	f851 5b04 	ldr.w	r5, [r1], #4
 80036ee:	d402      	bmi.n	80036f6 <_printf_i+0x18a>
 80036f0:	065f      	lsls	r7, r3, #25
 80036f2:	bf48      	it	mi
 80036f4:	b2ad      	uxthmi	r5, r5
 80036f6:	6031      	str	r1, [r6, #0]
 80036f8:	07d9      	lsls	r1, r3, #31
 80036fa:	bf44      	itt	mi
 80036fc:	f043 0320 	orrmi.w	r3, r3, #32
 8003700:	6023      	strmi	r3, [r4, #0]
 8003702:	b11d      	cbz	r5, 800370c <_printf_i+0x1a0>
 8003704:	2310      	movs	r3, #16
 8003706:	e7ab      	b.n	8003660 <_printf_i+0xf4>
 8003708:	4826      	ldr	r0, [pc, #152]	@ (80037a4 <_printf_i+0x238>)
 800370a:	e7e9      	b.n	80036e0 <_printf_i+0x174>
 800370c:	6823      	ldr	r3, [r4, #0]
 800370e:	f023 0320 	bic.w	r3, r3, #32
 8003712:	6023      	str	r3, [r4, #0]
 8003714:	e7f6      	b.n	8003704 <_printf_i+0x198>
 8003716:	4616      	mov	r6, r2
 8003718:	e7bd      	b.n	8003696 <_printf_i+0x12a>
 800371a:	6833      	ldr	r3, [r6, #0]
 800371c:	6825      	ldr	r5, [r4, #0]
 800371e:	1d18      	adds	r0, r3, #4
 8003720:	6961      	ldr	r1, [r4, #20]
 8003722:	6030      	str	r0, [r6, #0]
 8003724:	062e      	lsls	r6, r5, #24
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	d501      	bpl.n	800372e <_printf_i+0x1c2>
 800372a:	6019      	str	r1, [r3, #0]
 800372c:	e002      	b.n	8003734 <_printf_i+0x1c8>
 800372e:	0668      	lsls	r0, r5, #25
 8003730:	d5fb      	bpl.n	800372a <_printf_i+0x1be>
 8003732:	8019      	strh	r1, [r3, #0]
 8003734:	2300      	movs	r3, #0
 8003736:	4616      	mov	r6, r2
 8003738:	6123      	str	r3, [r4, #16]
 800373a:	e7bc      	b.n	80036b6 <_printf_i+0x14a>
 800373c:	6833      	ldr	r3, [r6, #0]
 800373e:	2100      	movs	r1, #0
 8003740:	1d1a      	adds	r2, r3, #4
 8003742:	6032      	str	r2, [r6, #0]
 8003744:	681e      	ldr	r6, [r3, #0]
 8003746:	6862      	ldr	r2, [r4, #4]
 8003748:	4630      	mov	r0, r6
 800374a:	f000 f859 	bl	8003800 <memchr>
 800374e:	b108      	cbz	r0, 8003754 <_printf_i+0x1e8>
 8003750:	1b80      	subs	r0, r0, r6
 8003752:	6060      	str	r0, [r4, #4]
 8003754:	6863      	ldr	r3, [r4, #4]
 8003756:	6123      	str	r3, [r4, #16]
 8003758:	2300      	movs	r3, #0
 800375a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800375e:	e7aa      	b.n	80036b6 <_printf_i+0x14a>
 8003760:	4632      	mov	r2, r6
 8003762:	4649      	mov	r1, r9
 8003764:	4640      	mov	r0, r8
 8003766:	6923      	ldr	r3, [r4, #16]
 8003768:	47d0      	blx	sl
 800376a:	3001      	adds	r0, #1
 800376c:	d0ad      	beq.n	80036ca <_printf_i+0x15e>
 800376e:	6823      	ldr	r3, [r4, #0]
 8003770:	079b      	lsls	r3, r3, #30
 8003772:	d413      	bmi.n	800379c <_printf_i+0x230>
 8003774:	68e0      	ldr	r0, [r4, #12]
 8003776:	9b03      	ldr	r3, [sp, #12]
 8003778:	4298      	cmp	r0, r3
 800377a:	bfb8      	it	lt
 800377c:	4618      	movlt	r0, r3
 800377e:	e7a6      	b.n	80036ce <_printf_i+0x162>
 8003780:	2301      	movs	r3, #1
 8003782:	4632      	mov	r2, r6
 8003784:	4649      	mov	r1, r9
 8003786:	4640      	mov	r0, r8
 8003788:	47d0      	blx	sl
 800378a:	3001      	adds	r0, #1
 800378c:	d09d      	beq.n	80036ca <_printf_i+0x15e>
 800378e:	3501      	adds	r5, #1
 8003790:	68e3      	ldr	r3, [r4, #12]
 8003792:	9903      	ldr	r1, [sp, #12]
 8003794:	1a5b      	subs	r3, r3, r1
 8003796:	42ab      	cmp	r3, r5
 8003798:	dcf2      	bgt.n	8003780 <_printf_i+0x214>
 800379a:	e7eb      	b.n	8003774 <_printf_i+0x208>
 800379c:	2500      	movs	r5, #0
 800379e:	f104 0619 	add.w	r6, r4, #25
 80037a2:	e7f5      	b.n	8003790 <_printf_i+0x224>
 80037a4:	08003b79 	.word	0x08003b79
 80037a8:	08003b8a 	.word	0x08003b8a

080037ac <memmove>:
 80037ac:	4288      	cmp	r0, r1
 80037ae:	b510      	push	{r4, lr}
 80037b0:	eb01 0402 	add.w	r4, r1, r2
 80037b4:	d902      	bls.n	80037bc <memmove+0x10>
 80037b6:	4284      	cmp	r4, r0
 80037b8:	4623      	mov	r3, r4
 80037ba:	d807      	bhi.n	80037cc <memmove+0x20>
 80037bc:	1e43      	subs	r3, r0, #1
 80037be:	42a1      	cmp	r1, r4
 80037c0:	d008      	beq.n	80037d4 <memmove+0x28>
 80037c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80037c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80037ca:	e7f8      	b.n	80037be <memmove+0x12>
 80037cc:	4601      	mov	r1, r0
 80037ce:	4402      	add	r2, r0
 80037d0:	428a      	cmp	r2, r1
 80037d2:	d100      	bne.n	80037d6 <memmove+0x2a>
 80037d4:	bd10      	pop	{r4, pc}
 80037d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80037da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80037de:	e7f7      	b.n	80037d0 <memmove+0x24>

080037e0 <_sbrk_r>:
 80037e0:	b538      	push	{r3, r4, r5, lr}
 80037e2:	2300      	movs	r3, #0
 80037e4:	4d05      	ldr	r5, [pc, #20]	@ (80037fc <_sbrk_r+0x1c>)
 80037e6:	4604      	mov	r4, r0
 80037e8:	4608      	mov	r0, r1
 80037ea:	602b      	str	r3, [r5, #0]
 80037ec:	f7fd f9ce 	bl	8000b8c <_sbrk>
 80037f0:	1c43      	adds	r3, r0, #1
 80037f2:	d102      	bne.n	80037fa <_sbrk_r+0x1a>
 80037f4:	682b      	ldr	r3, [r5, #0]
 80037f6:	b103      	cbz	r3, 80037fa <_sbrk_r+0x1a>
 80037f8:	6023      	str	r3, [r4, #0]
 80037fa:	bd38      	pop	{r3, r4, r5, pc}
 80037fc:	200024e4 	.word	0x200024e4

08003800 <memchr>:
 8003800:	4603      	mov	r3, r0
 8003802:	b510      	push	{r4, lr}
 8003804:	b2c9      	uxtb	r1, r1
 8003806:	4402      	add	r2, r0
 8003808:	4293      	cmp	r3, r2
 800380a:	4618      	mov	r0, r3
 800380c:	d101      	bne.n	8003812 <memchr+0x12>
 800380e:	2000      	movs	r0, #0
 8003810:	e003      	b.n	800381a <memchr+0x1a>
 8003812:	7804      	ldrb	r4, [r0, #0]
 8003814:	3301      	adds	r3, #1
 8003816:	428c      	cmp	r4, r1
 8003818:	d1f6      	bne.n	8003808 <memchr+0x8>
 800381a:	bd10      	pop	{r4, pc}

0800381c <_realloc_r>:
 800381c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003820:	4680      	mov	r8, r0
 8003822:	4615      	mov	r5, r2
 8003824:	460c      	mov	r4, r1
 8003826:	b921      	cbnz	r1, 8003832 <_realloc_r+0x16>
 8003828:	4611      	mov	r1, r2
 800382a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800382e:	f7ff bc47 	b.w	80030c0 <_malloc_r>
 8003832:	b92a      	cbnz	r2, 8003840 <_realloc_r+0x24>
 8003834:	f7ff fbda 	bl	8002fec <_free_r>
 8003838:	2400      	movs	r4, #0
 800383a:	4620      	mov	r0, r4
 800383c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003840:	f000 f81a 	bl	8003878 <_malloc_usable_size_r>
 8003844:	4285      	cmp	r5, r0
 8003846:	4606      	mov	r6, r0
 8003848:	d802      	bhi.n	8003850 <_realloc_r+0x34>
 800384a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800384e:	d8f4      	bhi.n	800383a <_realloc_r+0x1e>
 8003850:	4629      	mov	r1, r5
 8003852:	4640      	mov	r0, r8
 8003854:	f7ff fc34 	bl	80030c0 <_malloc_r>
 8003858:	4607      	mov	r7, r0
 800385a:	2800      	cmp	r0, #0
 800385c:	d0ec      	beq.n	8003838 <_realloc_r+0x1c>
 800385e:	42b5      	cmp	r5, r6
 8003860:	462a      	mov	r2, r5
 8003862:	4621      	mov	r1, r4
 8003864:	bf28      	it	cs
 8003866:	4632      	movcs	r2, r6
 8003868:	f7ff fbb2 	bl	8002fd0 <memcpy>
 800386c:	4621      	mov	r1, r4
 800386e:	4640      	mov	r0, r8
 8003870:	f7ff fbbc 	bl	8002fec <_free_r>
 8003874:	463c      	mov	r4, r7
 8003876:	e7e0      	b.n	800383a <_realloc_r+0x1e>

08003878 <_malloc_usable_size_r>:
 8003878:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800387c:	1f18      	subs	r0, r3, #4
 800387e:	2b00      	cmp	r3, #0
 8003880:	bfbc      	itt	lt
 8003882:	580b      	ldrlt	r3, [r1, r0]
 8003884:	18c0      	addlt	r0, r0, r3
 8003886:	4770      	bx	lr

08003888 <_init>:
 8003888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800388a:	bf00      	nop
 800388c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800388e:	bc08      	pop	{r3}
 8003890:	469e      	mov	lr, r3
 8003892:	4770      	bx	lr

08003894 <_fini>:
 8003894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003896:	bf00      	nop
 8003898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800389a:	bc08      	pop	{r3}
 800389c:	469e      	mov	lr, r3
 800389e:	4770      	bx	lr
